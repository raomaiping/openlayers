{"version":3,"sources":["webpack:///./src/hooks/updateMapSize.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/render.js","webpack:///./src/views/others/water-wave-animation/index.vue?694e","webpack:///./src/views/others/water-wave-animation/tools.js","webpack:///./src/views/others/water-wave-animation/index.vue","webpack:///./src/views/others/water-wave-animation/index.vue?bb5b","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/style/Text.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/Overlay.js"],"names":["map","targetNode","document","querySelector","observer","MutationObserver","mutationsList","mutation","type","attributeName","i","length","updateSize","observe","attributes","childList","subtree","onBeforeUnmount","disconnect","getVectorContext","event","context","CanvasRenderingContext2D","Error","userTransform","canvasPixelRatio","inversePixelTransform","frameState","transform","slice","coordinateToPixelTransform","squaredTolerance","viewState","resolution","userProjection","projection","extent","rotation","addVectorLabel","coordinate","vectorSource","name","feature","newFeature","Feature","geometry","Point","setStyle","Style","text","Text","textAlign","textBaseline","font","get","fill","Fill","color","stroke","Stroke","width","offsetY","addFeature","onMounted","initMap","tileLayer","TileLayer","source","XYZ","attributions","ATTRIBUTIONS","url","MAPURL","maxZoom","VectorSource","wrapX","vector","VectorLayer","Map","layers","target","view","View","center","SHENZHEN","zoom","multiWorld","updateMapSize","geom","start","Date","now","flashGeom","getGeometry","clone","on","elapsed","time","vectorContext","elapsedRatio","radius","easeOut","opacity","style","image","CircleStyle","drawGeometry","render","flash","element","createElement","className","p","span","appendChild","point_overlay","Overlay","positioning","addOverlay","setPosition","FUZHOU","__exports__","opt_options","options","this","font_","rotation_","rotateWithView_","rotateWithView","scale_","scale","scaleArray_","undefined","text_","textAlign_","justify_","justify","textBaseline_","fill_","maxAngle_","maxAngle","Math","PI","placement_","placement","POINT","overflow_","overflow","stroke_","offsetX_","offsetX","offsetY_","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","prototype","getScale","getFont","getPlacement","getMaxAngle","getOverflow","getRotation","getRotateWithView","Array","isArray","getText","getTextAlign","getJustify","getTextBaseline","getFill","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","getScaleArray","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setRotateWithView","setFill","setRotation","setScale","setStroke","setText","setTextAlign","setJustify","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","hasOwnProperty","call","TypeError","String","__","constructor","create","Property","_super","_this","once","un","id","insertFirst","stopEvent","position","pointerEvents","autoPan","animation","autoPanAnimation","margin","autoPanMargin","rendered","transform_","visible","mapPostrenderListenerKey","addChangeListener","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","getElement","getId","getMap","getOffset","getPosition","getPositioning","POSTRENDER","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","setMap","panIntoView","opt_panIntoViewOptions","getTargetElement","mapRect","getRect","getSize","overlayRect","panIntoViewOptions","myMargin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","abs","getView","getCenterInternal","centerPx","getPixelFromCoordinateInternal","newCenterPx","panOptions","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","box","getBoundingClientRect","left","window","pageXOffset","top","pageYOffset","setVisible","display","isRendered","pixel","getPixelFromCoordinate","mapSize","updateRenderedPosition","x","round","y","posX","posY","concat","msTransform","getOptions"],"mappings":"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","file":"js/chunk-29cbad29.d1652a36.js","sourcesContent":["import { onBeforeUnmount } from \"vue\";\n\n/**\n * 监听侧边栏，侧边栏发生变化更新地图\n * @param {ol.Map} map 地图实例\n */\nexport default (...map) => {\n  // 选择需要观察变动的节点\n  const targetNode = document.querySelector(\n    \".el-aside .menu .el-scrollbar__view\"\n  );\n  // 观察器的配置（需要观察什么变动）\n  const config = { attributes: true, childList: true, subtree: true };\n  // 当观察到变动时执行的回调函数\n  const callback = function (mutationsList) {\n    // Use traditional 'for loops' for IE 11\n    for (let mutation of mutationsList) {\n      if (mutation.type === \"childList\") {\n        // console.log(\"已添加或删除子节点。\");\n      } else if (\n        mutation.type === \"attributes\" &&\n        mutation.attributeName === \"style\"\n      ) {\n        for (let i = 0; i < map.length; i++) {\n          map[i].updateSize();\n        }\n\n        // console.log(\"这个 \" + mutation.attributeName + \" 属性被修改。\");\n      }\n    }\n  };\n  // 创建一个观察器实例并传入回调函数\n  const observer = new MutationObserver(callback);\n\n  // 以上述配置开始观察目标节点\n  observer.observe(targetNode, config);\n\n  //卸载前\n  onBeforeUnmount(() => {\n    observer.disconnect();\n  });\n};\n","/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport { DEVICE_PIXEL_RATIO } from './has.js';\nimport { apply as applyTransform, create as createTransform, multiply as multiplyTransform, scale as scaleTransform, } from './transform.js';\nimport { getSquaredTolerance } from './renderer/vector.js';\nimport { getTransformFromProjections, getUserProjection } from './proj.js';\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature~Feature} or\n * {@link module:ol/render/Feature~RenderFeature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [opt_options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\nexport function toContext(context, opt_options) {\n    var canvas = context.canvas;\n    var options = opt_options ? opt_options : {};\n    var pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n    var size = options.size;\n    if (size) {\n        canvas.width = size[0] * pixelRatio;\n        canvas.height = size[1] * pixelRatio;\n        canvas.style.width = size[0] + 'px';\n        canvas.style.height = size[1] + 'px';\n    }\n    var extent = [0, 0, canvas.width, canvas.height];\n    var transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n    return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\nexport function getVectorContext(event) {\n    if (!(event.context instanceof CanvasRenderingContext2D)) {\n        throw new Error('Only works for render events from Canvas 2D layers');\n    }\n    // canvas may be at a different pixel ratio than frameState.pixelRatio\n    var canvasPixelRatio = event.inversePixelTransform[0];\n    var frameState = event.frameState;\n    var transform = multiplyTransform(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);\n    var squaredTolerance = getSquaredTolerance(frameState.viewState.resolution, canvasPixelRatio);\n    var userTransform;\n    var userProjection = getUserProjection();\n    if (userProjection) {\n        userTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);\n    }\n    return new CanvasImmediateRenderer(event.context, canvasPixelRatio, frameState.extent, transform, frameState.viewState.rotation, squaredTolerance, userTransform);\n}\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\nexport function getRenderPixel(event, pixel) {\n    return applyTransform(event.inversePixelTransform, pixel.slice(0));\n}\n//# sourceMappingURL=render.js.map","export * from \"-!../../../../node_modules/.pnpm/mini-css-extract-plugin@0.9.0_webpack@4.47.0/node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../../node_modules/.pnpm/css-loader@3.6.0_webpack@4.47.0/node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../../node_modules/.pnpm/vue-loader@16.8.3_@vue+compiler-sfc@3.4.6_vue@3.4.6_webpack@4.47.0/node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/.pnpm/postcss-loader@3.0.0/node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../../node_modules/.pnpm/cache-loader@4.1.0_webpack@4.47.0/node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/.pnpm/vue-loader@16.8.3_@vue+compiler-sfc@3.4.6_vue@3.4.6_webpack@4.47.0/node_modules/vue-loader/dist/index.js??ref--1-1!./index.vue?vue&type=style&index=0&id=0e45f960&scoped=true&lang=css\"","import { Style, Text, Fill, Stroke } from \"ol/style\";\nimport { Feature } from \"ol\";\nimport { Point } from \"ol/geom\";\n\n/**\n * 创建矢量标注样式函数,设置image为图标ol.style.Icon\n * @param {ol.Feature} feature 要素\n */\nexport const createLabelStyle = (feature) =>\n  new Style({\n    text: new Text({\n      //位置\n      textAlign: \"center\",\n      //基准线\n      textBaseline: \"middle\",\n      //文字样式\n      font: \"normal 14px 微软雅黑\",\n      //文本内容\n      text: feature.get(\"name\"),\n      //文本填充样式（即文字颜色）\n      fill: new Fill({ color: \"#aa3300\" }),\n      stroke: new Stroke({ color: \"#ffcc33\", width: 2 }),\n      offsetY: 40,\n    }),\n  });\n\n/**\n * 添加一个新的标注（矢量要素）\n * @param {ol.Coordinate} coordinate 坐标点\n * @param {ol.source.Vector} vectorSource 矢量标注的数据源\n * @param {String} name 标注名\n */\nexport const addVectorLabel = ({\n  coordinate,\n  vectorSource,\n  name = \"标注点\",\n}) => {\n  //新建一个要素 ol.Feature\n  var newFeature = new Feature({\n    //几何信息\n    geometry: new Point(coordinate),\n    //名称属性\n    name,\n  });\n  //设置要素的样式\n  newFeature.setStyle(createLabelStyle(newFeature));\n  //将新要素添加到数据源中\n  vectorSource.addFeature(newFeature);\n};\n","<template>\n  <div id=\"map\"></div>\n</template>\n\n<script setup>\nimport 'ol/ol.css'\nimport { onMounted } from 'vue'\nimport Feature from 'ol/Feature'\nimport { Map, Overlay } from 'ol'\nimport Point from 'ol/geom/Point'\nimport View from 'ol/View'\nimport { Circle as CircleStyle, Stroke, Style } from 'ol/style'\nimport { XYZ, Vector as VectorSource } from 'ol/source'\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer'\nimport { easeOut } from 'ol/easing'\nimport { getVectorContext } from 'ol/render'\nimport { ATTRIBUTIONS, MAPURL, SHENZHEN, FUZHOU } from '@/constants'\nimport updateMapSize from '@/hooks/updateMapSize'\nimport { addVectorLabel } from './tools'\n\nconst initMap = () => {\n  const tileLayer = new TileLayer({\n    source: new XYZ({\n      attributions: ATTRIBUTIONS,\n      url: MAPURL,\n      maxZoom: 20,\n    }),\n  })\n\n  const source = new VectorSource({\n    wrapX: false,\n  })\n  const vector = new VectorLayer({\n    source: source,\n  })\n\n  const map = new Map({\n    layers: [tileLayer, vector],\n    target: 'map',\n    view: new View({\n      projection: 'EPSG:4326',\n      center: SHENZHEN,\n      //地图初始显示级别\n      zoom: 5,\n      multiWorld: true,\n    }),\n  })\n  updateMapSize(map)\n  const duration = 3000\n  function flash(feature) {\n    let start = Date.now()\n    const flashGeom = feature.getGeometry().clone()\n    tileLayer.on('postrender', animate)\n    function animate(event) {\n      const frameState = event.frameState\n      const elapsed = frameState.time - start\n      const vectorContext = getVectorContext(event)\n      const elapsedRatio = elapsed / duration\n      // 开始半径为5，结束半径为30。\n      const radius = easeOut(elapsedRatio) * 25 + 5\n      const opacity = easeOut(1 - elapsedRatio)\n\n      const style = new Style({\n        image: new CircleStyle({\n          radius: radius,\n          stroke: new Stroke({\n            color: 'rgba(255, 0, 0, ' + opacity + ')',\n            width: 0.25 + opacity,\n          }),\n        }),\n      })\n      vectorContext.setStyle(style)\n      vectorContext.drawGeometry(flashGeom)\n      if (elapsed > duration) {\n        start = frameState.time\n      }\n      // 告诉OpenLayers继续后期动画\n      map.render()\n    }\n  }\n\n  //第一种方式添加水纹动画\n  const geom = new Point(SHENZHEN)\n  const feature = new Feature(geom)\n  source.addFeature(feature)\n  flash(feature)\n  //添加打工点\n  addVectorLabel({\n    coordinate: SHENZHEN,\n    vectorSource: source,\n    name: '打工点',\n  })\n\n  //第二种方式添加水纹动画\n  const element = document.createElement('div')\n  element.className = 'point_animation'\n  const p = document.createElement('p')\n  const span = document.createElement('span')\n  element.appendChild(p)\n  element.appendChild(span)\n  const point_overlay = new Overlay({\n    element: element,\n    positioning: 'center-center',\n  })\n  map.addOverlay(point_overlay)\n  point_overlay.setPosition(FUZHOU)\n  //添加家\n  addVectorLabel({\n    coordinate: FUZHOU,\n    vectorSource: source,\n    name: '家',\n  })\n}\nonMounted(() => {\n  initMap()\n})\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#map {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n/**橙色点扩散闪烁样式*/\n:deep(.point_animation) {\n  background: #ff9900;\n  width: 6px;\n  height: 6px;\n  border: 2px #ff9900 solid;\n  border-radius: 50%;\n  position: absolute;\n}\n:deep(.point_animation p),\n:deep(.point_animation span) {\n  position: absolute;\n  width: 4px;\n  height: 4px;\n  animation: point_animation 4s infinite;\n  box-shadow: 0px 0px 1px #ff9900;\n  margin: 0px;\n  border-radius: 50%;\n}\n:deep(.point_animation span) {\n  animation-delay: 1.5s;\n}\n@keyframes point_animation {\n  10% {\n    transform: scale(1);\n  }\n  100% {\n    transform: scale(8);\n  }\n}\n</style>\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=0e45f960&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/openlayers/openlayers/node_modules/.pnpm/vue-loader@16.8.3_@vue+compiler-sfc@3.4.6_vue@3.4.6_webpack@4.47.0/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-0e45f960\"]])\n\nexport default __exports__","/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\nimport { toSize } from '../size.js';\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nvar DEFAULT_FILL_COLOR = '#333';\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for the immediate rendering API.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nvar Text = /** @class */ (function () {\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Text(opt_options) {\n        var options = opt_options || {};\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.font_ = options.font;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.rotation_ = options.rotation;\n        /**\n         * @private\n         * @type {boolean|undefined}\n         */\n        this.rotateWithView_ = options.rotateWithView;\n        /**\n         * @private\n         * @type {number|import(\"../size.js\").Size|undefined}\n         */\n        this.scale_ = options.scale;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n        /**\n         * @private\n         * @type {string|Array<string>|undefined}\n         */\n        this.text_ = options.text;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.textAlign_ = options.textAlign;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.justify_ = options.justify;\n        /**\n         * @private\n         * @type {string|undefined}\n         */\n        this.textBaseline_ = options.textBaseline;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        this.fill_ =\n            options.fill !== undefined\n                ? options.fill\n                : new Fill({ color: DEFAULT_FILL_COLOR });\n        /**\n         * @private\n         * @type {number}\n         */\n        this.maxAngle_ =\n            options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n        /**\n         * @private\n         * @type {import(\"./TextPlacement.js\").default|string}\n         */\n        this.placement_ =\n            options.placement !== undefined ? options.placement : TextPlacement.POINT;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.overflow_ = !!options.overflow;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n        /**\n         * @private\n         * @type {import(\"./Fill.js\").default}\n         */\n        this.backgroundFill_ = options.backgroundFill\n            ? options.backgroundFill\n            : null;\n        /**\n         * @private\n         * @type {import(\"./Stroke.js\").default}\n         */\n        this.backgroundStroke_ = options.backgroundStroke\n            ? options.backgroundStroke\n            : null;\n        /**\n         * @private\n         * @type {Array<number>|null}\n         */\n        this.padding_ = options.padding === undefined ? null : options.padding;\n    }\n    /**\n     * Clones the style.\n     * @return {Text} The cloned style.\n     * @api\n     */\n    Text.prototype.clone = function () {\n        var scale = this.getScale();\n        return new Text({\n            font: this.getFont(),\n            placement: this.getPlacement(),\n            maxAngle: this.getMaxAngle(),\n            overflow: this.getOverflow(),\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            text: this.getText(),\n            textAlign: this.getTextAlign(),\n            justify: this.getJustify(),\n            textBaseline: this.getTextBaseline(),\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            offsetX: this.getOffsetX(),\n            offsetY: this.getOffsetY(),\n            backgroundFill: this.getBackgroundFill()\n                ? this.getBackgroundFill().clone()\n                : undefined,\n            backgroundStroke: this.getBackgroundStroke()\n                ? this.getBackgroundStroke().clone()\n                : undefined,\n            padding: this.getPadding() || undefined,\n        });\n    };\n    /**\n     * Get the `overflow` configuration.\n     * @return {boolean} Let text overflow the length of the path they follow.\n     * @api\n     */\n    Text.prototype.getOverflow = function () {\n        return this.overflow_;\n    };\n    /**\n     * Get the font name.\n     * @return {string|undefined} Font.\n     * @api\n     */\n    Text.prototype.getFont = function () {\n        return this.font_;\n    };\n    /**\n     * Get the maximum angle between adjacent characters.\n     * @return {number} Angle in radians.\n     * @api\n     */\n    Text.prototype.getMaxAngle = function () {\n        return this.maxAngle_;\n    };\n    /**\n     * Get the label placement.\n     * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n     * @api\n     */\n    Text.prototype.getPlacement = function () {\n        return this.placement_;\n    };\n    /**\n     * Get the x-offset for the text.\n     * @return {number} Horizontal text offset.\n     * @api\n     */\n    Text.prototype.getOffsetX = function () {\n        return this.offsetX_;\n    };\n    /**\n     * Get the y-offset for the text.\n     * @return {number} Vertical text offset.\n     * @api\n     */\n    Text.prototype.getOffsetY = function () {\n        return this.offsetY_;\n    };\n    /**\n     * Get the fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    Text.prototype.getFill = function () {\n        return this.fill_;\n    };\n    /**\n     * Determine whether the text rotates with the map.\n     * @return {boolean|undefined} Rotate with map.\n     * @api\n     */\n    Text.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Get the text rotation.\n     * @return {number|undefined} Rotation.\n     * @api\n     */\n    Text.prototype.getRotation = function () {\n        return this.rotation_;\n    };\n    /**\n     * Get the text scale.\n     * @return {number|import(\"../size.js\").Size|undefined} Scale.\n     * @api\n     */\n    Text.prototype.getScale = function () {\n        return this.scale_;\n    };\n    /**\n     * Get the symbolizer scale array.\n     * @return {import(\"../size.js\").Size} Scale array.\n     */\n    Text.prototype.getScaleArray = function () {\n        return this.scaleArray_;\n    };\n    /**\n     * Get the stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    Text.prototype.getStroke = function () {\n        return this.stroke_;\n    };\n    /**\n     * Get the text to be rendered.\n     * @return {string|Array<string>|undefined} Text.\n     * @api\n     */\n    Text.prototype.getText = function () {\n        return this.text_;\n    };\n    /**\n     * Get the text alignment.\n     * @return {string|undefined} Text align.\n     * @api\n     */\n    Text.prototype.getTextAlign = function () {\n        return this.textAlign_;\n    };\n    /**\n     * Get the justification.\n     * @return {string|undefined} Justification.\n     * @api\n     */\n    Text.prototype.getJustify = function () {\n        return this.justify_;\n    };\n    /**\n     * Get the text baseline.\n     * @return {string|undefined} Text baseline.\n     * @api\n     */\n    Text.prototype.getTextBaseline = function () {\n        return this.textBaseline_;\n    };\n    /**\n     * Get the background fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n    Text.prototype.getBackgroundFill = function () {\n        return this.backgroundFill_;\n    };\n    /**\n     * Get the background stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n    Text.prototype.getBackgroundStroke = function () {\n        return this.backgroundStroke_;\n    };\n    /**\n     * Get the padding for the text.\n     * @return {Array<number>|null} Padding.\n     * @api\n     */\n    Text.prototype.getPadding = function () {\n        return this.padding_;\n    };\n    /**\n     * Set the `overflow` property.\n     *\n     * @param {boolean} overflow Let text overflow the path that it follows.\n     * @api\n     */\n    Text.prototype.setOverflow = function (overflow) {\n        this.overflow_ = overflow;\n    };\n    /**\n     * Set the font.\n     *\n     * @param {string|undefined} font Font.\n     * @api\n     */\n    Text.prototype.setFont = function (font) {\n        this.font_ = font;\n    };\n    /**\n     * Set the maximum angle between adjacent characters.\n     *\n     * @param {number} maxAngle Angle in radians.\n     * @api\n     */\n    Text.prototype.setMaxAngle = function (maxAngle) {\n        this.maxAngle_ = maxAngle;\n    };\n    /**\n     * Set the x offset.\n     *\n     * @param {number} offsetX Horizontal text offset.\n     * @api\n     */\n    Text.prototype.setOffsetX = function (offsetX) {\n        this.offsetX_ = offsetX;\n    };\n    /**\n     * Set the y offset.\n     *\n     * @param {number} offsetY Vertical text offset.\n     * @api\n     */\n    Text.prototype.setOffsetY = function (offsetY) {\n        this.offsetY_ = offsetY;\n    };\n    /**\n     * Set the text placement.\n     *\n     * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n     * @api\n     */\n    Text.prototype.setPlacement = function (placement) {\n        this.placement_ = placement;\n    };\n    /**\n     * Set whether to rotate the text with the view.\n     *\n     * @param {boolean} rotateWithView Rotate with map.\n     * @api\n     */\n    Text.prototype.setRotateWithView = function (rotateWithView) {\n        this.rotateWithView_ = rotateWithView;\n    };\n    /**\n     * Set the fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    Text.prototype.setFill = function (fill) {\n        this.fill_ = fill;\n    };\n    /**\n     * Set the rotation.\n     *\n     * @param {number|undefined} rotation Rotation.\n     * @api\n     */\n    Text.prototype.setRotation = function (rotation) {\n        this.rotation_ = rotation;\n    };\n    /**\n     * Set the scale.\n     *\n     * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n     * @api\n     */\n    Text.prototype.setScale = function (scale) {\n        this.scale_ = scale;\n        this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n    };\n    /**\n     * Set the stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    Text.prototype.setStroke = function (stroke) {\n        this.stroke_ = stroke;\n    };\n    /**\n     * Set the text.\n     *\n     * @param {string|Array<string>|undefined} text Text.\n     * @api\n     */\n    Text.prototype.setText = function (text) {\n        this.text_ = text;\n    };\n    /**\n     * Set the text alignment.\n     *\n     * @param {string|undefined} textAlign Text align.\n     * @api\n     */\n    Text.prototype.setTextAlign = function (textAlign) {\n        this.textAlign_ = textAlign;\n    };\n    /**\n     * Set the justification.\n     *\n     * @param {string|undefined} justify Justification.\n     * @api\n     */\n    Text.prototype.setJustify = function (justify) {\n        this.justify_ = justify;\n    };\n    /**\n     * Set the text baseline.\n     *\n     * @param {string|undefined} textBaseline Text baseline.\n     * @api\n     */\n    Text.prototype.setTextBaseline = function (textBaseline) {\n        this.textBaseline_ = textBaseline;\n    };\n    /**\n     * Set the background fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n    Text.prototype.setBackgroundFill = function (fill) {\n        this.backgroundFill_ = fill;\n    };\n    /**\n     * Set the background stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n    Text.prototype.setBackgroundStroke = function (stroke) {\n        this.backgroundStroke_ = stroke;\n    };\n    /**\n     * Set the padding (`[top, right, bottom, left]`).\n     *\n     * @param {Array<number>|null} padding Padding.\n     * @api\n     */\n    Text.prototype.setPadding = function (padding) {\n        this.padding_ = padding;\n    };\n    return Text;\n}());\nexport default Text;\n//# sourceMappingURL=Text.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n/**\n * @enum {string}\n * @protected\n */\nvar Property = {\n    ELEMENT: 'element',\n    MAP: 'map',\n    OFFSET: 'offset',\n    POSITION: 'position',\n    POSITIONING: 'positioning',\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nvar Overlay = /** @class */ (function (_super) {\n    __extends(Overlay, _super);\n    /**\n     * @param {Options} options Overlay options.\n     */\n    function Overlay(options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {OverlayOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @protected\n         * @type {Options}\n         */\n        _this.options = options;\n        /**\n         * @protected\n         * @type {number|string|undefined}\n         */\n        _this.id = options.id;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.insertFirst =\n            options.insertFirst !== undefined ? options.insertFirst : true;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.element = document.createElement('div');\n        _this.element.className =\n            options.className !== undefined\n                ? options.className\n                : 'ol-overlay-container ' + CLASS_SELECTABLE;\n        _this.element.style.position = 'absolute';\n        _this.element.style.pointerEvents = 'auto';\n        var autoPan = options.autoPan;\n        if (autoPan && 'object' !== typeof autoPan) {\n            autoPan = {\n                animation: options.autoPanAnimation,\n                margin: options.autoPanMargin,\n            };\n        }\n        /**\n         * @protected\n         * @type {PanIntoViewOptions|false}\n         */\n        _this.autoPan = /** @type {PanIntoViewOptions} */ (autoPan) || false;\n        /**\n         * @protected\n         * @type {{transform_: string,\n         *         visible: boolean}}\n         */\n        _this.rendered = {\n            transform_: '',\n            visible: true,\n        };\n        /**\n         * @protected\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.mapPostrenderListenerKey = null;\n        _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);\n        _this.addChangeListener(Property.MAP, _this.handleMapChanged);\n        _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);\n        _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);\n        _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);\n        if (options.element !== undefined) {\n            _this.setElement(options.element);\n        }\n        _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n        _this.setPositioning(options.positioning || 'top-left');\n        if (options.position !== undefined) {\n            _this.setPosition(options.position);\n        }\n        return _this;\n    }\n    /**\n     * Get the DOM element of this overlay.\n     * @return {HTMLElement|undefined} The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getElement = function () {\n        return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n    };\n    /**\n     * Get the overlay identifier which is set on constructor.\n     * @return {number|string|undefined} Id.\n     * @api\n     */\n    Overlay.prototype.getId = function () {\n        return this.id;\n    };\n    /**\n     * Get the map associated with this overlay.\n     * @return {import(\"./PluggableMap.js\").default|null} The map that the\n     * overlay is part of.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getMap = function () {\n        return /** @type {import(\"./PluggableMap.js\").default|null} */ (this.get(Property.MAP) || null);\n    };\n    /**\n     * Get the offset of this overlay.\n     * @return {Array<number>} The offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getOffset = function () {\n        return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n    };\n    /**\n     * Get the current position of this overlay.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n     *     anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPosition = function () {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(Property.POSITION));\n    };\n    /**\n     * Get the current positioning of this overlay.\n     * @return {Positioning} How the overlay is positioned\n     *     relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPositioning = function () {\n        return /** @type {Positioning} */ (this.get(Property.POSITIONING));\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleElementChanged = function () {\n        removeChildren(this.element);\n        var element = this.getElement();\n        if (element) {\n            this.element.appendChild(element);\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleMapChanged = function () {\n        if (this.mapPostrenderListenerKey) {\n            removeNode(this.element);\n            unlistenByKey(this.mapPostrenderListenerKey);\n            this.mapPostrenderListenerKey = null;\n        }\n        var map = this.getMap();\n        if (map) {\n            this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n            this.updatePixelPosition();\n            var container = this.stopEvent\n                ? map.getOverlayContainerStopEvent()\n                : map.getOverlayContainer();\n            if (this.insertFirst) {\n                container.insertBefore(this.element, container.childNodes[0] || null);\n            }\n            else {\n                container.appendChild(this.element);\n            }\n            this.performAutoPan();\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.render = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleOffsetChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositionChanged = function () {\n        this.updatePixelPosition();\n        this.performAutoPan();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositioningChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * Set the DOM element to be associated with this overlay.\n     * @param {HTMLElement|undefined} element The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setElement = function (element) {\n        this.set(Property.ELEMENT, element);\n    };\n    /**\n     * Set the map to be associated with this overlay.\n     * @param {import(\"./PluggableMap.js\").default|null} map The map that the\n     * overlay is part of. Pass `null` to just remove the overlay from the current map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setMap = function (map) {\n        this.set(Property.MAP, map);\n    };\n    /**\n     * Set the offset for this overlay.\n     * @param {Array<number>} offset Offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setOffset = function (offset) {\n        this.set(Property.OFFSET, offset);\n    };\n    /**\n     * Set the position for this overlay. If the position is `undefined` the\n     * overlay is hidden.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n     *     is anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPosition = function (position) {\n        this.set(Property.POSITION, position);\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary) using the configured autoPan parameters\n     * @protected\n     */\n    Overlay.prototype.performAutoPan = function () {\n        if (this.autoPan) {\n            this.panIntoView(this.autoPan);\n        }\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary).\n     * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action\n     * @api\n     */\n    Overlay.prototype.panIntoView = function (opt_panIntoViewOptions) {\n        var map = this.getMap();\n        if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n            return;\n        }\n        var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n        var element = this.getElement();\n        var overlayRect = this.getRect(element, [\n            outerWidth(element),\n            outerHeight(element),\n        ]);\n        var panIntoViewOptions = opt_panIntoViewOptions || {};\n        var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n        if (!containsExtent(mapRect, overlayRect)) {\n            // the overlay is not completely inside the viewport, so pan the map\n            var offsetLeft = overlayRect[0] - mapRect[0];\n            var offsetRight = mapRect[2] - overlayRect[2];\n            var offsetTop = overlayRect[1] - mapRect[1];\n            var offsetBottom = mapRect[3] - overlayRect[3];\n            var delta = [0, 0];\n            if (offsetLeft < 0) {\n                // move map to the left\n                delta[0] = offsetLeft - myMargin;\n            }\n            else if (offsetRight < 0) {\n                // move map to the right\n                delta[0] = Math.abs(offsetRight) + myMargin;\n            }\n            if (offsetTop < 0) {\n                // move map up\n                delta[1] = offsetTop - myMargin;\n            }\n            else if (offsetBottom < 0) {\n                // move map down\n                delta[1] = Math.abs(offsetBottom) + myMargin;\n            }\n            if (delta[0] !== 0 || delta[1] !== 0) {\n                var center = /** @type {import(\"./coordinate.js\").Coordinate} */ (map.getView().getCenterInternal());\n                var centerPx = map.getPixelFromCoordinateInternal(center);\n                if (!centerPx) {\n                    return;\n                }\n                var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n                var panOptions = panIntoViewOptions.animation || {};\n                map.getView().animateInternal({\n                    center: map.getCoordinateFromPixelInternal(newCenterPx),\n                    duration: panOptions.duration,\n                    easing: panOptions.easing,\n                });\n            }\n        }\n    };\n    /**\n     * Get the extent of an element relative to the document\n     * @param {HTMLElement} element The element.\n     * @param {import(\"./size.js\").Size} size The size of the element.\n     * @return {import(\"./extent.js\").Extent} The extent.\n     * @protected\n     */\n    Overlay.prototype.getRect = function (element, size) {\n        var box = element.getBoundingClientRect();\n        var offsetX = box.left + window.pageXOffset;\n        var offsetY = box.top + window.pageYOffset;\n        return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n    };\n    /**\n     * Set the positioning for this overlay.\n     * @param {Positioning} positioning how the overlay is\n     *     positioned relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPositioning = function (positioning) {\n        this.set(Property.POSITIONING, positioning);\n    };\n    /**\n     * Modify the visibility of the element.\n     * @param {boolean} visible Element visibility.\n     * @protected\n     */\n    Overlay.prototype.setVisible = function (visible) {\n        if (this.rendered.visible !== visible) {\n            this.element.style.display = visible ? '' : 'none';\n            this.rendered.visible = visible;\n        }\n    };\n    /**\n     * Update pixel position.\n     * @protected\n     */\n    Overlay.prototype.updatePixelPosition = function () {\n        var map = this.getMap();\n        var position = this.getPosition();\n        if (!map || !map.isRendered() || !position) {\n            this.setVisible(false);\n            return;\n        }\n        var pixel = map.getPixelFromCoordinate(position);\n        var mapSize = map.getSize();\n        this.updateRenderedPosition(pixel, mapSize);\n    };\n    /**\n     * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n     * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n     * @protected\n     */\n    Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n        var style = this.element.style;\n        var offset = this.getOffset();\n        var positioning = this.getPositioning();\n        this.setVisible(true);\n        var x = Math.round(pixel[0] + offset[0]) + 'px';\n        var y = Math.round(pixel[1] + offset[1]) + 'px';\n        var posX = '0%';\n        var posY = '0%';\n        if (positioning == 'bottom-right' ||\n            positioning == 'center-right' ||\n            positioning == 'top-right') {\n            posX = '-100%';\n        }\n        else if (positioning == 'bottom-center' ||\n            positioning == 'center-center' ||\n            positioning == 'top-center') {\n            posX = '-50%';\n        }\n        if (positioning == 'bottom-left' ||\n            positioning == 'bottom-center' ||\n            positioning == 'bottom-right') {\n            posY = '-100%';\n        }\n        else if (positioning == 'center-left' ||\n            positioning == 'center-center' ||\n            positioning == 'center-right') {\n            posY = '-50%';\n        }\n        var transform = \"translate(\".concat(posX, \", \").concat(posY, \") translate(\").concat(x, \", \").concat(y, \")\");\n        if (this.rendered.transform_ != transform) {\n            this.rendered.transform_ = transform;\n            style.transform = transform;\n            // @ts-ignore IE9\n            style.msTransform = transform;\n        }\n    };\n    /**\n     * returns the options this Overlay has been created with\n     * @return {Options} overlay options\n     */\n    Overlay.prototype.getOptions = function () {\n        return this.options;\n    };\n    return Overlay;\n}(BaseObject));\nexport default Overlay;\n//# sourceMappingURL=Overlay.js.map"],"sourceRoot":""}