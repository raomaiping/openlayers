{"version":3,"sources":["webpack:///./src/hooks/updateMapSize.js","webpack:///./src/views/third-party-map-display/geo-json/index.vue?1a2e","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/geom/MultiPoint.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/geom/GeometryCollection.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/format/JSONFeature.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/format/GeoJSON.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/geom/Circle.js","webpack:///./src/views/third-party-map-display/geo-json/index.vue","webpack:///./src/views/third-party-map-display/geo-json/index.vue?917f","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/geom/flat/interpolate.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/geom/MultiPolygon.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/geom/flat/center.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/geom/MultiLineString.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/format/Feature.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/geom/LineString.js"],"names":["map","targetNode","document","querySelector","observer","MutationObserver","mutationsList","mutation","type","attributeName","i","length","updateSize","observe","attributes","childList","subtree","onBeforeUnmount","disconnect","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","MultiPoint","_super","coordinates","opt_layout","_this","isArray","setFlatCoordinates","setCoordinates","appendPoint","point","flatCoordinates","getFlatCoordinates","slice","changed","clone","multiPoint","layout","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","stride","ii","squaredDistance","j","getCoordinates","getPoint","index","n","getPoints","points","push","getType","intersectsExtent","extent","setLayout","GeometryCollection","opt_geometries","geometries_","changeEventsKeys_","listenGeometriesChange_","unlistenGeometriesChange_","forEach","CHANGE","geometryCollection","setGeometries","geometries","containsXY","computeExtent","getGeometries","cloneGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","concat","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometries","simplified","geometry","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","isEmpty","rotate","angle","anchor","scale","sx","opt_sy","opt_anchor","applyTransform","transformFn","translate","deltaX","deltaY","disposeInternal","clonedGeometries","getObject","source","object","JSON","parse","JSONFeature","readFeature","opt_options","readFeatureFromObject","getReadOptions","readFeatures","readFeaturesFromObject","readGeometry","readGeometryFromObject","readProjection","readProjectionFromObject","writeFeature","feature","stringify","writeFeatureObject","writeFeatures","features","writeFeaturesObject","writeGeometry","writeGeometryObject","GeoJSON","options","dataProjection","featureProjection","defaultFeatureProjection","geometryName_","geometryName","extractGeometryName_","extractGeometryName","supportedMediaTypes","geoJSONFeature","Feature","setGeometryName","undefined","setGeometry","setId","setProperties","geoJSONFeatures","projection","crs","adaptOptions","properties","id","getId","hasProperties","getProperties","getGeometry","getGeometryName","objects","Point","readPointGeometry","LineString","readLineStringGeometry","Polygon","readPolygonGeometry","readMultiPointGeometry","MultiLineString","readMultiLineStringGeometry","MultiPolygon","readMultiPolygonGeometry","readGeometryCollectionGeometry","Error","geoJSON","writePointGeometry","writeLineStringGeometry","right","rightHanded","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","writeGeometryCollectionGeometry","Circle","center","opt_radius","radius","setCenterAndRadius","circle","dx","dy","delta","getRadius","Math","sqrt","getRadiusSquared_","getCenter","circleExtent","intersectsCoordinate","bind","setCenter","offset","setRadius","getStride","transform","raster","TileLayer","XYZ","attributions","ATTRIBUTIONS","url","MAPURL","maxZoom","image","CircleStyle","fill","stroke","Stroke","color","width","styles","Style","Fill","lineDash","vectorSource","VectorSource","name","addFeature","vectorLayer","VectorLayer","style","onMounted","Map","layers","target","view","View","zoom","updateMapSize","__exports__","interpolatePoint","end","fraction","opt_dest","opt_dimension","o","t","x1","y1","length_1","cumulativeLengths","x2","y2","dimension","dest","NaN","lineStringCoordinateAtM","m","extrapolate","coordinate","lo","hi","mid","m0","lineStringsCoordinateAtM","ends","interpolate","opt_endss","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","getLayout","polygons","endss","polygon","getEnds","jj","appendPolygon","len","newEndss","multiPolygon","getOrientedFlatCoordinates","getArea","opt_right","orient","inflate","getEndss","getFlatInteriorPoints","flatCenters","linearRingss","getInteriorPoints","GeometryLayout","XYM","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","simplifiedEndss","XY","getPolygon","prevEnds","getPolygons","deflate","lastEnds","SimpleGeometry","opt_ends","ends_","lineStrings","lineString","appendLineString","multiLineString","getCoordinateAtM","opt_extrapolate","opt_interpolate","XYZM","getLineString","getLineStrings","getFlatMidpoints","midpoints","midpoint","simplifiedEnds","FeatureFormat","getUnits","TILE_PIXELS","setWorldExtent","transformGeometryWithOptions","write","transformed","decimals","power_1","pow","round","flatMidpoint_","flatMidpointRevision_","appendCoordinate","forEachSegment","callback","getCoordinateAt","getLength","getFlatMidpoint"],"mappings":"4GAAA,gBAMe,QAAIA,KAEjB,MAAMC,EAAaC,SAASC,cAC1B,uCAuBIC,EAAW,IAAIC,kBAlBJ,SAAUC,GAEzB,IAAK,IAAIC,KAAYD,EACnB,GAAsB,cAAlBC,EAASC,WAEN,GACa,eAAlBD,EAASC,MACkB,UAA3BD,EAASE,cAET,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAIW,OAAQD,IAC9BV,EAAIU,GAAGE,YAMf,IAKAR,EAASS,QAAQZ,EAvBF,CAAEa,YAAY,EAAMC,WAAW,EAAMC,SAAS,IA0B7DC,2BAAgB,KACdb,EAASc,YAAY,GAExB,C,+DCzCD,S,sCCAA,IACQC,EADR,oFAAIC,GACID,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgBI,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,GAAI,EAC7FR,EAAcE,EAAGC,EAC5B,EACO,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAE7D,SAASW,IAAOC,KAAKC,YAAcd,CAAG,CADtCF,EAAcE,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,EACnF,GAkBAI,EAA4B,SAAUC,GAOtC,SAASD,EAAWE,EAAaC,GAC7B,IAAIC,EAAQH,EAAOR,KAAKI,OAASA,KASjC,OARIM,IAAed,MAAMgB,QAAQH,EAAY,IACzCE,EAAME,mBAAmBH,EACI,GAG7BC,EAAMG,eACsD,EAAeJ,GAExEC,CACX,CAkIA,OAnJArB,EAAUiB,EAAYC,GAuBtBD,EAAWT,UAAUiB,YAAc,SAAUC,GACpCZ,KAAKa,gBAIN,YAAOb,KAAKa,gBAAiBD,EAAME,sBAHnCd,KAAKa,gBAAkBD,EAAME,qBAAqBC,QAKtDf,KAAKgB,SACT,EAMAb,EAAWT,UAAUuB,MAAQ,WACzB,IAAIC,EAAa,IAAIf,EAAWH,KAAKa,gBAAgBE,QAASf,KAAKmB,QAEnE,OADAD,EAAWE,gBAAgBpB,MACpBkB,CACX,EAQAf,EAAWT,UAAU2B,eAAiB,SAAUC,EAAGC,EAAGC,EAAcC,GAChE,GAAIA,EAAqB,YAAyBzB,KAAK0B,YAAaJ,EAAGC,GACnE,OAAOE,EAIX,IAFA,IAAIZ,EAAkBb,KAAKa,gBACvBc,EAAS3B,KAAK2B,OACTnD,EAAI,EAAGoD,EAAKf,EAAgBpC,OAAQD,EAAIoD,EAAIpD,GAAKmD,EAAQ,CAC9D,IAAIE,EAAkB,YAAUP,EAAGC,EAAGV,EAAgBrC,GAAIqC,EAAgBrC,EAAI,IAC9E,GAAIqD,EAAkBJ,EAAoB,CACtCA,EAAqBI,EACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,IAAUG,EAC1BN,EAAaM,GAAKjB,EAAgBrC,EAAIsD,GAE1CN,EAAa/C,OAASkD,CAC1B,CACJ,CACA,OAAOF,CACX,EAMAtB,EAAWT,UAAUqC,eAAiB,WAClC,OAAO,YAAmB/B,KAAKa,gBAAiB,EAAGb,KAAKa,gBAAgBpC,OAAQuB,KAAK2B,OACzF,EAOAxB,EAAWT,UAAUsC,SAAW,SAAUC,GACtC,IAAIC,EAAKlC,KAAKa,gBAERb,KAAKa,gBAAgBpC,OAASuB,KAAK2B,OADnC,EAEN,OAAIM,EAAQ,GAAKC,GAAKD,EACX,KAEJ,IAAI,IAAMjC,KAAKa,gBAAgBE,MAAMkB,EAAQjC,KAAK2B,QAASM,EAAQ,GAAKjC,KAAK2B,QAAS3B,KAAKmB,OACtG,EAMAhB,EAAWT,UAAUyC,UAAY,WAM7B,IALA,IAAItB,EAAkBb,KAAKa,gBACvBM,EAASnB,KAAKmB,OACdQ,EAAS3B,KAAK2B,OAEdS,EAAS,GACJ5D,EAAI,EAAGoD,EAAKf,EAAgBpC,OAAQD,EAAIoD,EAAIpD,GAAKmD,EAAQ,CAC9D,IAAIf,EAAQ,IAAI,IAAMC,EAAgBE,MAAMvC,EAAGA,EAAImD,GAASR,GAC5DiB,EAAOC,KAAKzB,EAChB,CACA,OAAOwB,CACX,EAMAjC,EAAWT,UAAU4C,QAAU,WAC3B,MAAO,YACX,EAOAnC,EAAWT,UAAU6C,iBAAmB,SAAUC,GAG9C,IAFA,IAAI3B,EAAkBb,KAAKa,gBACvBc,EAAS3B,KAAK2B,OACTnD,EAAI,EAAGoD,EAAKf,EAAgBpC,OAAQD,EAAIoD,EAAIpD,GAAKmD,EAAQ,CAC9D,IAAIL,EAAIT,EAAgBrC,GACpB+C,EAAIV,EAAgBrC,EAAI,GAC5B,GAAI,YAAWgE,EAAQlB,EAAGC,GACtB,OAAO,CAEf,CACA,OAAO,CACX,EAOApB,EAAWT,UAAUgB,eAAiB,SAAUL,EAAaC,GACzDN,KAAKyC,UAAUnC,EAAYD,EAAa,GACnCL,KAAKa,kBACNb,KAAKa,gBAAkB,IAE3Bb,KAAKa,gBAAgBpC,OAAS,YAAmBuB,KAAKa,gBAAiB,EAAGR,EAAaL,KAAK2B,QAC5F3B,KAAKgB,SACT,EACOb,CACX,CArJ+B,CAqJ7B,KACa,K,sCCrLf,IACQlB,EADR,gDAAIC,GACID,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgBI,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,GAAI,EAC7FR,EAAcE,EAAGC,EAC5B,EACO,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAE7D,SAASW,IAAOC,KAAKC,YAAcd,CAAG,CADtCF,EAAcE,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,EACnF,GAeA2C,EAAoC,SAAUtC,GAK9C,SAASsC,EAAmBC,GACxB,IAAIpC,EAAQH,EAAOR,KAAKI,OAASA,KAWjC,OANAO,EAAMqC,YAAcD,GAAkC,KAItDpC,EAAMsC,kBAAoB,GAC1BtC,EAAMuC,0BACCvC,CACX,CAoQA,OArRArB,EAAUwD,EAAoBtC,GAqB9BsC,EAAmBhD,UAAUqD,0BAA4B,WACrD/C,KAAK6C,kBAAkBG,QAAQ,KAC/BhD,KAAK6C,kBAAkBpE,OAAS,CACpC,EAIAiE,EAAmBhD,UAAUoD,wBAA0B,WACnD,GAAK9C,KAAK4C,YAGV,IAAK,IAAIpE,EAAI,EAAGoD,EAAK5B,KAAK4C,YAAYnE,OAAQD,EAAIoD,IAAMpD,EACpDwB,KAAK6C,kBAAkBR,KAAK,YAAOrC,KAAK4C,YAAYpE,GAAI,IAAUyE,OAAQjD,KAAKgB,QAAShB,MAEhG,EAMA0C,EAAmBhD,UAAUuB,MAAQ,WACjC,IAAIiC,EAAqB,IAAIR,EAAmB,MAGhD,OAFAQ,EAAmBC,cAAcnD,KAAK4C,aACtCM,EAAmB9B,gBAAgBpB,MAC5BkD,CACX,EAQAR,EAAmBhD,UAAU2B,eAAiB,SAAUC,EAAGC,EAAGC,EAAcC,GACxE,GAAIA,EAAqB,YAAyBzB,KAAK0B,YAAaJ,EAAGC,GACnE,OAAOE,EAGX,IADA,IAAI2B,EAAapD,KAAK4C,YACbpE,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAC9CiD,EAAqB2B,EAAW5E,GAAG6C,eAAeC,EAAGC,EAAGC,EAAcC,GAE1E,OAAOA,CACX,EAMAiB,EAAmBhD,UAAU2D,WAAa,SAAU/B,EAAGC,GAEnD,IADA,IAAI6B,EAAapD,KAAK4C,YACbpE,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAC9C,GAAI4E,EAAW5E,GAAG6E,WAAW/B,EAAGC,GAC5B,OAAO,EAGf,OAAO,CACX,EAMAmB,EAAmBhD,UAAU4D,cAAgB,SAAUd,GACnD,YAAoBA,GAEpB,IADA,IAAIY,EAAapD,KAAK4C,YACbpE,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAC9C,YAAOgE,EAAQY,EAAW5E,GAAGkD,aAEjC,OAAOc,CACX,EAMAE,EAAmBhD,UAAU6D,cAAgB,WACzC,OAAOC,EAAgBxD,KAAK4C,YAChC,EAIAF,EAAmBhD,UAAU+D,mBAAqB,WAC9C,OAAOzD,KAAK4C,WAChB,EAIAF,EAAmBhD,UAAUgE,4BAA8B,WAIvD,IAFA,IAAIC,EAAkB,GAClBP,EAAapD,KAAK4C,YACbpE,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAC1C4E,EAAW5E,GAAG8D,YAActC,KAAKsC,UACjCqB,EAAkBA,EAAgBC,OACCR,EAAW5E,GAAIkF,+BAGlDC,EAAgBtB,KAAKe,EAAW5E,IAGxC,OAAOmF,CACX,EAMAjB,EAAmBhD,UAAUmE,sBAAwB,SAAUC,GAK3D,GAJI9D,KAAK+D,6BAA+B/D,KAAKgE,gBACzChE,KAAKiE,yCAA2C,EAChDjE,KAAK+D,2BAA6B/D,KAAKgE,eAEvCF,EAAmB,GACgC,IAAlD9D,KAAKiE,0CACFH,EAAmB9D,KAAKiE,yCAC5B,OAAOjE,KAKX,IAHA,IAAIkE,EAAuB,GACvBd,EAAapD,KAAK4C,YAClBuB,GAAa,EACR3F,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAAG,CACjD,IAAI4F,EAAWhB,EAAW5E,GACtB6F,EAAqBD,EAASP,sBAAsBC,GACxDI,EAAqB7B,KAAKgC,GACtBA,IAAuBD,IACvBD,GAAa,EAErB,CACA,GAAIA,EAAY,CACZ,IAAIG,EAA+B,IAAI5B,EAAmB,MAE1D,OADA4B,EAA6BC,mBAAmBL,GACzCI,CACX,CAGI,OADAtE,KAAKiE,yCAA2CH,EACzC9D,IAEf,EAMA0C,EAAmBhD,UAAU4C,QAAU,WACnC,MAAO,oBACX,EAOAI,EAAmBhD,UAAU6C,iBAAmB,SAAUC,GAEtD,IADA,IAAIY,EAAapD,KAAK4C,YACbpE,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAC9C,GAAI4E,EAAW5E,GAAG+D,iBAAiBC,GAC/B,OAAO,EAGf,OAAO,CACX,EAIAE,EAAmBhD,UAAU8E,QAAU,WACnC,OAAmC,IAA5BxE,KAAK4C,YAAYnE,MAC5B,EAQAiE,EAAmBhD,UAAU+E,OAAS,SAAUC,EAAOC,GAEnD,IADA,IAAIvB,EAAapD,KAAK4C,YACbpE,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAC9C4E,EAAW5E,GAAGiG,OAAOC,EAAOC,GAEhC3E,KAAKgB,SACT,EAWA0B,EAAmBhD,UAAUkF,MAAQ,SAAUC,EAAIC,EAAQC,GACvD,IAAIJ,EAASI,EACRJ,IACDA,EAAS,YAAU3E,KAAK0B,cAG5B,IADA,IAAI0B,EAAapD,KAAK4C,YACbpE,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAC9C4E,EAAW5E,GAAGoG,MAAMC,EAAIC,EAAQH,GAEpC3E,KAAKgB,SACT,EAMA0B,EAAmBhD,UAAUyD,cAAgB,SAAUC,GACnDpD,KAAKuE,mBAAmBf,EAAgBJ,GAC5C,EAIAV,EAAmBhD,UAAU6E,mBAAqB,SAAUnB,GACxDpD,KAAK+C,4BACL/C,KAAK4C,YAAcQ,EACnBpD,KAAK8C,0BACL9C,KAAKgB,SACT,EAUA0B,EAAmBhD,UAAUsF,eAAiB,SAAUC,GAEpD,IADA,IAAI7B,EAAapD,KAAK4C,YACbpE,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAC9C4E,EAAW5E,GAAGwG,eAAeC,GAEjCjF,KAAKgB,SACT,EAQA0B,EAAmBhD,UAAUwF,UAAY,SAAUC,EAAQC,GAEvD,IADA,IAAIhC,EAAapD,KAAK4C,YACbpE,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAC9C4E,EAAW5E,GAAG0G,UAAUC,EAAQC,GAEpCpF,KAAKgB,SACT,EAIA0B,EAAmBhD,UAAU2F,gBAAkB,WAC3CrF,KAAK+C,4BACL3C,EAAOV,UAAU2F,gBAAgBzF,KAAKI,KAC1C,EACO0C,CACX,CAvRuC,CAuRrC,KAKF,SAASc,EAAgBJ,GAErB,IADA,IAAIkC,EAAmB,GACd9G,EAAI,EAAGoD,EAAKwB,EAAW3E,OAAQD,EAAIoD,IAAMpD,EAC9C8G,EAAiBjD,KAAKe,EAAW5E,GAAGyC,SAExC,OAAOqE,CACX,CACe,K,0CC9TPrG,E,gDADJC,GACID,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgBI,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,GAAI,EAC7FR,EAAcE,EAAGC,EAC5B,EACO,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAE7D,SAASW,IAAOC,KAAKC,YAAcd,CAAG,CADtCF,EAAcE,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,EACnF,GAgLJ,SAASwF,EAAUC,GACf,GAAsB,iBAAXA,EAAqB,CAC5B,IAAIC,EAASC,KAAKC,MAAMH,GACxB,OAAOC,GAA0C,IACrD,CACK,OAAe,OAAXD,EACEA,EAGA,IAEf,CACe,MA7KkB,SAAUpF,GAEvC,SAASwF,IACL,OAAOxF,EAAOR,KAAKI,OAASA,IAChC,CAuJA,OA1JAd,EAAU0G,EAAaxF,GAOvBwF,EAAYlG,UAAU4C,QAAU,WAC5B,MAAO,MACX,EAUAsD,EAAYlG,UAAUmG,YAAc,SAAUL,EAAQM,GAClD,OAAO9F,KAAK+F,sBAAsBR,EAAUC,GAASxF,KAAKgG,eAAeR,EAAQM,GACrF,EAUAF,EAAYlG,UAAUuG,aAAe,SAAUT,EAAQM,GACnD,OAAO9F,KAAKkG,uBAAuBX,EAAUC,GAASxF,KAAKgG,eAAeR,EAAQM,GACtF,EAQAF,EAAYlG,UAAUqG,sBAAwB,SAAUN,EAAQK,GAC5D,OAAO,aACX,EAQAF,EAAYlG,UAAUwG,uBAAyB,SAAUT,EAAQK,GAC7D,OAAO,aACX,EASAF,EAAYlG,UAAUyG,aAAe,SAAUX,EAAQM,GACnD,OAAO9F,KAAKoG,uBAAuBb,EAAUC,GAASxF,KAAKgG,eAAeR,EAAQM,GACtF,EAQAF,EAAYlG,UAAU0G,uBAAyB,SAAUX,EAAQK,GAC7D,OAAO,aACX,EAQAF,EAAYlG,UAAU2G,eAAiB,SAAUb,GAC7C,OAAOxF,KAAKsG,yBAAyBf,EAAUC,GACnD,EAOAI,EAAYlG,UAAU4G,yBAA2B,SAAUb,GACvD,OAAO,aACX,EASAG,EAAYlG,UAAU6G,aAAe,SAAUC,EAASV,GACpD,OAAOJ,KAAKe,UAAUzG,KAAK0G,mBAAmBF,EAASV,GAC3D,EAOAF,EAAYlG,UAAUgH,mBAAqB,SAAUF,EAASV,GAC1D,OAAO,aACX,EASAF,EAAYlG,UAAUiH,cAAgB,SAAUC,EAAUd,GACtD,OAAOJ,KAAKe,UAAUzG,KAAK6G,oBAAoBD,EAAUd,GAC7D,EAOAF,EAAYlG,UAAUmH,oBAAsB,SAAUD,EAAUd,GAC5D,OAAO,aACX,EASAF,EAAYlG,UAAUoH,cAAgB,SAAU1C,EAAU0B,GACtD,OAAOJ,KAAKe,UAAUzG,KAAK+G,oBAAoB3C,EAAU0B,GAC7D,EAOAF,EAAYlG,UAAUqH,oBAAsB,SAAU3C,EAAU0B,GAC5D,OAAO,aACX,EACOF,CACX,CA5JgC,CA4J9B,K,4GCrLE,EAAwC,WACxC,IAAI3G,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgBI,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,GAAI,EAC7FR,EAAcE,EAAGC,EAC5B,EACA,OAAO,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAE7D,SAASW,IAAOC,KAAKC,YAAcd,CAAG,CADtCF,EAAcE,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,EACnF,CACH,CAd2C,GA0DxC,EAAyB,SAAUK,GAKnC,SAAS4G,EAAQlB,GACb,IAAIvF,EAAQP,KACRiH,EAAUnB,GAA4B,CAAC,EA4B3C,OA3BAvF,EAAQH,EAAOR,KAAKI,OAASA,MAIvBkH,eAAiB,YAAcD,EAAQC,eAAiBD,EAAQC,eAAiB,aACnFD,EAAQE,oBAIR5G,EAAM6G,yBAA2B,YAAcH,EAAQE,oBAO3D5G,EAAM8G,cAAgBJ,EAAQK,aAM9B/G,EAAMgH,qBAAuBN,EAAQO,oBACrCjH,EAAMkH,oBAAsB,CACxB,uBACA,4BAEGlH,CACX,CAgKA,OAnMA,EAAUyG,EAAS5G,GA0CnB4G,EAAQtH,UAAUqG,sBAAwB,SAAUN,EAAQK,GAIxD,IAAI4B,EAAiB,KAWjBtD,EAAW+B,GATXuB,EADmB,YAAnBjC,EAAa,KACkC,EAG9B,CACb,KAAQ,UACR,SAA2C,EAC3C,WAAc,OAG+B,SAAGK,GACpDU,EAAU,IAAImB,EAAA,EAelB,OAdI3H,KAAKqH,cACLb,EAAQoB,gBAAgB5H,KAAKqH,eAExBrH,KAAKuH,sBACV,kBAAmBG,SAAmBG,GACtCrB,EAAQoB,gBAAgBF,EAA8B,eAE1DlB,EAAQsB,YAAY1D,GAChB,OAAQsD,GACRlB,EAAQuB,MAAML,EAAmB,IAEjCA,EAA2B,YAC3BlB,EAAQwB,cAAcN,EAA2B,YAAG,GAEjDlB,CACX,EAOAQ,EAAQtH,UAAUwG,uBAAyB,SAAUT,EAAQK,GACzD,IAEIc,EAAW,KACf,GAA8B,sBAHmB,EAGzB,KAA2B,CAE/CA,EAAW,GAEX,IADA,IAAIqB,EAFmE,EAEd,SAChDzJ,EAAI,EAAGoD,EAAKqG,EAAgBxJ,OAAQD,EAAIoD,IAAMpD,EACnDoI,EAASvE,KAAKrC,KAAK+F,sBAAsBkC,EAAgBzJ,GAAIsH,GAErE,MAEIc,EAAW,CAAC5G,KAAK+F,sBAAsBN,EAAQK,IAEnD,OAAOc,CACX,EAOAI,EAAQtH,UAAU0G,uBAAyB,SAAUX,EAAQK,GACzD,OAAOK,EAAaV,EAAQK,EAChC,EAMAkB,EAAQtH,UAAU4G,yBAA2B,SAAUb,GACnD,IACIyC,EADAC,EAAM1C,EAAY,IAgBtB,OAdI0C,EACmB,QAAfA,EAAU,KACVD,EAAa,YAAcC,EAAgB,WAAQ,MAE9B,SAAhBA,EAAU,KACfD,EAAa,YAAc,QAAUC,EAAgB,WAAQ,MAG7D,aAAO,EAAO,IAIlBD,EAAalI,KAAKkH,eAEwC,CAClE,EASAF,EAAQtH,UAAUgH,mBAAqB,SAAUF,EAASV,GACtDA,EAAc9F,KAAKoI,aAAatC,GAEhC,IAAIL,EAAS,CACT,KAAQ,UACRrB,SAAU,KACViE,WAAY,MAEZC,EAAK9B,EAAQ+B,QAIjB,QAHWV,IAAPS,IACA7C,EAAO6C,GAAKA,IAEX9B,EAAQgC,gBACT,OAAO/C,EAEX,IAAI4C,EAAa7B,EAAQiC,gBACrBrE,EAAWoC,EAAQkC,cAQvB,OAPItE,IACAqB,EAAOrB,SAAW0C,EAAc1C,EAAU0B,UACnCuC,EAAW7B,EAAQmC,oBAEzB,YAAQN,KACT5C,EAAO4C,WAAaA,GAEjB5C,CACX,EASAuB,EAAQtH,UAAUmH,oBAAsB,SAAUD,EAAUd,GACxDA,EAAc9F,KAAKoI,aAAatC,GAEhC,IADA,IAAI8C,EAAU,GACLpK,EAAI,EAAGoD,EAAKgF,EAASnI,OAAQD,EAAIoD,IAAMpD,EAC5CoK,EAAQvG,KAAKrC,KAAK0G,mBAAmBE,EAASpI,GAAIsH,IAEtD,MAAO,CACHxH,KAAM,oBACNsI,SAAUgC,EAElB,EASA5B,EAAQtH,UAAUqH,oBAAsB,SAAU3C,EAAU0B,GACxD,OAAOgB,EAAc1C,EAAUpE,KAAKoI,aAAatC,GACrD,EACOkB,CACX,CArM4B,CAqM1B,GAMF,SAASb,EAAaV,EAAQK,GAC1B,IAAKL,EACD,OAAO,KAKX,IAAIrB,EACJ,OAAQqB,EAAa,MACjB,IAAK,QACDrB,EA0DZ,SAA2BqB,GACvB,OAAO,IAAIoD,EAAA,EAAMpD,EAAoB,YACzC,CA5DuBqD,CAA8C,GACzD,MAEJ,IAAK,aACD1E,EA6DZ,SAAgCqB,GAC5B,OAAO,IAAIsD,EAAA,EAAWtD,EAAoB,YAC9C,CA/DuBuD,CACsB,GACjC,MAEJ,IAAK,UACD5E,EAoFZ,SAA6BqB,GACzB,OAAO,IAAIwD,EAAA,EAAQxD,EAAoB,YAC3C,CAtFuByD,CAAkD,GAC7D,MAEJ,IAAK,aACD9E,EAkEZ,SAAgCqB,GAC5B,OAAO,IAAItF,EAAA,EAAWsF,EAAoB,YAC9C,CApEuB0D,CACsB,GACjC,MAEJ,IAAK,kBACD/E,EAsDZ,SAAqCqB,GACjC,OAAO,IAAI2D,EAAA,EAAgB3D,EAAoB,YACnD,CAxDuB4D,CAC2B,GACtC,MAEJ,IAAK,eACDjF,EA+DZ,SAAkCqB,GAC9B,OAAO,IAAI6D,EAAA,EAAa7D,EAAoB,YAChD,CAjEuB8D,CACwB,GACnC,MAEJ,IAAK,qBACDnF,EAeZ,SAAwCqB,EAAQK,GAC5C,IAAI1C,EAAaqC,EAAmB,WAAE3H,KAKtC,SAAUsG,GACN,OAAO+B,EAAa/B,EAAU0B,EAClC,IACA,OAAO,IAAIpD,EAAA,EAAmBU,EAClC,CAzBuBoG,CAC8B,GACzC,MAEJ,QACI,MAAM,IAAIC,MAAM,6BAA+BhE,EAAa,MAGpE,OAAO,YAA6BrB,GAAU,EAAO0B,EACzD,CAgEA,SAASgB,EAAc1C,EAAU0B,GAE7B,IAEI4D,EAFApL,GADJ8F,EAAW,YAA6BA,GAAU,EAAM0B,IACpCxD,UAGpB,OAAQhE,GACJ,IAAK,QACDoL,EAoHZ,SAA4BtF,EAAU0B,GAClC,MAAO,CACHxH,KAAM,QACN+B,YAAa+D,EAASrC,iBAE9B,CAzHsB4H,CACW,GACrB,MAEJ,IAAK,aACDD,EA+DZ,SAAiCtF,EAAU0B,GACvC,MAAO,CACHxH,KAAM,aACN+B,YAAa+D,EAASrC,iBAE9B,CApEsB6H,CACgB,GAC1B,MAEJ,IAAK,UACDF,EAqHZ,SAA8BtF,EAAU0B,GACpC,IAAI+D,EACA/D,IACA+D,EAAQ/D,EAAYgE,aAExB,MAAO,CACHxL,KAAM,UACN+B,YAAa+D,EAASrC,eAAe8H,GAE7C,CA9HsBE,CACa,EAAYjE,GACnC,MAEJ,IAAK,aACD4D,EA2EZ,SAAiCtF,EAAU0B,GACvC,MAAO,CACHxH,KAAM,aACN+B,YAAa+D,EAASrC,iBAE9B,CAhFsBiI,CACgB,GAC1B,MAEJ,IAAK,kBACDN,EA2DZ,SAAsCtF,EAAU0B,GAC5C,MAAO,CACHxH,KAAM,kBACN+B,YAAa+D,EAASrC,iBAE9B,CAhEsBkI,CACqB,GAC/B,MAEJ,IAAK,eACDP,EA4EZ,SAAmCtF,EAAU0B,GACzC,IAAI+D,EACA/D,IACA+D,EAAQ/D,EAAYgE,aAExB,MAAO,CACHxL,KAAM,eACN+B,YAAa+D,EAASrC,eAAe8H,GAE7C,CArFsBK,CACkB,EAAYpE,GACxC,MAEJ,IAAK,qBACD4D,EAsBZ,SAAyCtF,EAAU0B,GAC/C,IAAI1C,EAAagB,EAASX,qBAAqB3F,KAAI,SAAUsG,GACzD,IAAI6C,EAAU,YAAO,CAAC,EAAGnB,GAEzB,cADOmB,EAAQE,kBACRL,EAAc1C,EAAU6C,EACnC,IACA,MAAO,CACH3I,KAAM,qBACN8E,WAAYA,EAEpB,CAhCsB+G,CACwB,EAAYrE,GAC9C,MAEJ,IAAK,SACD4D,EAAU,CACNpL,KAAM,qBACN8E,WAAY,IAEhB,MAEJ,QACI,MAAM,IAAIqG,MAAM,8BAAgCnL,GAGxD,OAAOoL,CACX,CA2Fe,K,oCCvgBf,IACQzK,EADR,gDAAIC,GACID,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgBI,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,GAAI,EAC7FR,EAAcE,EAAGC,EAC5B,EACO,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAE7D,SAASW,IAAOC,KAAKC,YAAcd,CAAG,CADtCF,EAAcE,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,EACnF,GAeAqK,EAAwB,SAAUhK,GASlC,SAASgK,EAAOC,EAAQC,EAAYhK,GAChC,IAAIC,EAAQH,EAAOR,KAAKI,OAASA,KACjC,QAAmB6H,IAAfvH,QAA2CuH,IAAfyC,EAC5B/J,EAAME,mBAAmBH,EAAY+J,OAEpC,CACD,IAAIE,EAASD,GAA0B,EACvC/J,EAAMiK,mBAAmBH,EAAQE,EAAQjK,EAC7C,CACA,OAAOC,CACX,CAoMA,OAtNArB,EAAUkL,EAAQhK,GAwBlBgK,EAAO1K,UAAUuB,MAAQ,WACrB,IAAIwJ,EAAS,IAAIL,EAAOpK,KAAKa,gBAAgBE,aAAS8G,EAAW7H,KAAKmB,QAEtE,OADAsJ,EAAOrJ,gBAAgBpB,MAChByK,CACX,EAQAL,EAAO1K,UAAU2B,eAAiB,SAAUC,EAAGC,EAAGC,EAAcC,GAC5D,IAAIZ,EAAkBb,KAAKa,gBACvB6J,EAAKpJ,EAAIT,EAAgB,GACzB8J,EAAKpJ,EAAIV,EAAgB,GACzBgB,EAAkB6I,EAAKA,EAAKC,EAAKA,EACrC,GAAI9I,EAAkBJ,EAAoB,CACtC,GAAwB,IAApBI,EACA,IAAK,IAAIrD,EAAI,EAAGA,EAAIwB,KAAK2B,SAAUnD,EAC/BgD,EAAahD,GAAKqC,EAAgBrC,OAGrC,CACD,IAAIoM,EAAQ5K,KAAK6K,YAAcC,KAAKC,KAAKlJ,GACzCL,EAAa,GAAKX,EAAgB,GAAK+J,EAAQF,EAC/ClJ,EAAa,GAAKX,EAAgB,GAAK+J,EAAQD,EAC/C,IAASnM,EAAI,EAAGA,EAAIwB,KAAK2B,SAAUnD,EAC/BgD,EAAahD,GAAKqC,EAAgBrC,EAE1C,CAEA,OADAgD,EAAa/C,OAASuB,KAAK2B,OACpBE,CACX,CAEI,OAAOJ,CAEf,EAMA2I,EAAO1K,UAAU2D,WAAa,SAAU/B,EAAGC,GACvC,IAAIV,EAAkBb,KAAKa,gBACvB6J,EAAKpJ,EAAIT,EAAgB,GACzB8J,EAAKpJ,EAAIV,EAAgB,GAC7B,OAAO6J,EAAKA,EAAKC,EAAKA,GAAM3K,KAAKgL,mBACrC,EAMAZ,EAAO1K,UAAUuL,UAAY,WACzB,OAAOjL,KAAKa,gBAAgBE,MAAM,EAAGf,KAAK2B,OAC9C,EAMAyI,EAAO1K,UAAU4D,cAAgB,SAAUd,GACvC,IAAI3B,EAAkBb,KAAKa,gBACvB0J,EAAS1J,EAAgBb,KAAK2B,QAAUd,EAAgB,GAC5D,OAAO,YAAeA,EAAgB,GAAK0J,EAAQ1J,EAAgB,GAAK0J,EAAQ1J,EAAgB,GAAK0J,EAAQ1J,EAAgB,GAAK0J,EAAQ/H,EAC9I,EAMA4H,EAAO1K,UAAUmL,UAAY,WACzB,OAAOC,KAAKC,KAAK/K,KAAKgL,oBAC1B,EAKAZ,EAAO1K,UAAUsL,kBAAoB,WACjC,IAAIN,EAAK1K,KAAKa,gBAAgBb,KAAK2B,QAAU3B,KAAKa,gBAAgB,GAC9D8J,EAAK3K,KAAKa,gBAAgBb,KAAK2B,OAAS,GAAK3B,KAAKa,gBAAgB,GACtE,OAAO6J,EAAKA,EAAKC,EAAKA,CAC1B,EAMAP,EAAO1K,UAAU4C,QAAU,WACvB,MAAO,QACX,EAOA8H,EAAO1K,UAAU6C,iBAAmB,SAAUC,GAC1C,IAAI0I,EAAelL,KAAK0B,YACxB,GAAI,YAAWc,EAAQ0I,GAAe,CAClC,IAAIb,EAASrK,KAAKiL,YAClB,OAAIzI,EAAO,IAAM6H,EAAO,IAAM7H,EAAO,IAAM6H,EAAO,KAG9C7H,EAAO,IAAM6H,EAAO,IAAM7H,EAAO,IAAM6H,EAAO,IAG3C,YAAc7H,EAAQxC,KAAKmL,qBAAqBC,KAAKpL,OAChE,CACA,OAAO,CACX,EAMAoK,EAAO1K,UAAU2L,UAAY,SAAUhB,GACnC,IAAI1I,EAAS3B,KAAK2B,OACd4I,EAASvK,KAAKa,gBAAgBc,GAAU3B,KAAKa,gBAAgB,GAC7DA,EAAkBwJ,EAAOtJ,QAC7BF,EAAgBc,GAAUd,EAAgB,GAAK0J,EAC/C,IAAK,IAAI/L,EAAI,EAAGA,EAAImD,IAAUnD,EAC1BqC,EAAgBc,EAASnD,GAAK6L,EAAO7L,GAEzCwB,KAAKS,mBAAmBT,KAAKmB,OAAQN,GACrCb,KAAKgB,SACT,EASAoJ,EAAO1K,UAAU8K,mBAAqB,SAAUH,EAAQE,EAAQjK,GAC5DN,KAAKyC,UAAUnC,EAAY+J,EAAQ,GAC9BrK,KAAKa,kBACNb,KAAKa,gBAAkB,IAG3B,IAAIA,EAAkBb,KAAKa,gBACvByK,EAAS,YAAkBzK,EAAiB,EAAGwJ,EAAQrK,KAAK2B,QAChEd,EAAgByK,KAAYzK,EAAgB,GAAK0J,EACjD,IAAK,IAAI/L,EAAI,EAAGoD,EAAK5B,KAAK2B,OAAQnD,EAAIoD,IAAMpD,EACxCqC,EAAgByK,KAAYzK,EAAgBrC,GAEhDqC,EAAgBpC,OAAS6M,EACzBtL,KAAKgB,SACT,EACAoJ,EAAO1K,UAAUqC,eAAiB,WAC9B,OAAO,IACX,EACAqI,EAAO1K,UAAUgB,eAAiB,SAAUL,EAAaC,GAAc,EAMvE8J,EAAO1K,UAAU6L,UAAY,SAAUhB,GACnCvK,KAAKa,gBAAgBb,KAAK2B,QAAU3B,KAAKa,gBAAgB,GAAK0J,EAC9DvK,KAAKgB,SACT,EAQAoJ,EAAO1K,UAAU+E,OAAS,SAAUC,EAAOC,GACvC,IAAI0F,EAASrK,KAAKiL,YACdtJ,EAAS3B,KAAKwL,YAClBxL,KAAKqL,UAAU,YAAOhB,EAAQ,EAAGA,EAAO5L,OAAQkD,EAAQ+C,EAAOC,EAAQ0F,IACvErK,KAAKgB,SACT,EAQAoJ,EAAO1K,UAAUwF,UAAY,SAAUC,EAAQC,GAC3C,IAAIiF,EAASrK,KAAKiL,YACdtJ,EAAS3B,KAAKwL,YAClBxL,KAAKqL,UAAU,YAAUhB,EAAQ,EAAGA,EAAO5L,OAAQkD,EAAQwD,EAAQC,EAAQiF,IAC3ErK,KAAKgB,SACT,EACOoJ,CACX,CAxN2B,CAwNzB,KAuBFA,EAAO1K,UAAU+L,UACF,K,+SC3Pb,MAAMC,EAAS,IAAIC,IAAU,CAC3BnG,OAAQ,IAAIoG,IAAI,CACdC,aAAcC,IACdC,IAAKC,IACLC,QAAS,OAIPC,EAAQ,IAAIC,IAAY,CAC5B5B,OAAQ,EACR6B,KAAM,KACNC,OAAQ,IAAIC,IAAO,CAAEC,MAAO,MAAOC,MAAO,MAGtCC,EAAS,CACb5D,MAAO,IAAI6D,IAAM,CACfR,MAAOA,IAETnD,WAAY,IAAI2D,IAAM,CACpBL,OAAQ,IAAIC,IAAO,CACjBC,MAAO,QACPC,MAAO,MAGXpD,gBAAiB,IAAIsD,IAAM,CACzBL,OAAQ,IAAIC,IAAO,CACjBC,MAAO,QACPC,MAAO,MAGXrM,WAAY,IAAIuM,IAAM,CACpBR,MAAOA,IAET5C,aAAc,IAAIoD,IAAM,CACtBL,OAAQ,IAAIC,IAAO,CACjBC,MAAO,SACPC,MAAO,IAETJ,KAAM,IAAIO,IAAK,CACbJ,MAAO,6BAGXtD,QAAS,IAAIyD,IAAM,CACjBL,OAAQ,IAAIC,IAAO,CACjBC,MAAO,OACPK,SAAU,CAAC,GACXJ,MAAO,IAETJ,KAAM,IAAIO,IAAK,CACbJ,MAAO,2BAGX7J,mBAAoB,IAAIgK,IAAM,CAC5BL,OAAQ,IAAIC,IAAO,CACjBC,MAAO,UACPC,MAAO,IAETJ,KAAM,IAAIO,IAAK,CACbJ,MAAO,YAETL,MAAO,IAAIC,IAAY,CACrB5B,OAAQ,GACR6B,KAAM,KACNC,OAAQ,IAAIC,IAAO,CACjBC,MAAO,gBAIbnC,OAAQ,IAAIsC,IAAM,CAChBL,OAAQ,IAAIC,IAAO,CACjBC,MAAO,MACPC,MAAO,IAETJ,KAAM,IAAIO,IAAK,CACbJ,MAAO,yBAuJPM,EAAe,IAAIC,IAAa,CACpClG,UAAU,IAAII,KAAUf,aA/IJ,CACpB3H,KAAM,oBACN6J,IAAK,CACH7J,KAAM,OACN+J,WAAY,CACV0E,KAAM,cAGVnG,SAAU,CACR,CACEtI,KAAM,UACN8F,SAAU,CACR9F,KAAM,QACN+B,YAAa,CAAC,EAAG,KAGrB,CACE/B,KAAM,UACN8F,SAAU,CACR9F,KAAM,aACN+B,YAAa,CACX,CAAC,KAAM,KACP,CAAC,IAAK,QAIZ,CACE/B,KAAM,UACN8F,SAAU,CACR9F,KAAM,aACN+B,YAAa,CACX,CAAC,IAAK,KACN,CAAC,KAAM,QAIb,CACE/B,KAAM,UACN8F,SAAU,CACR9F,KAAM,UACN+B,YAAa,CACX,CACE,EAAE,KAAM,KACR,EAAE,KAAM,KACR,EAAE,IAAK,KACP,EAAE,KAAM,SAKhB,CACE/B,KAAM,UACN8F,SAAU,CACR9F,KAAM,kBACN+B,YAAa,CACX,CACE,EAAE,KAAM,MACR,EAAE,IAAK,OAET,CACE,CAAC,KAAM,MACP,CAAC,IAAK,OAER,CACE,EAAE,MAAQ,KACV,CAAC,MAAQ,MAEX,CACE,EAAE,KAAO,KACT,CAAC,KAAO,SAKhB,CACE/B,KAAM,UACN8F,SAAU,CACR9F,KAAM,eACN+B,YAAa,CACX,CACE,CACE,EAAE,IAAK,KACP,EAAE,IAAK,KACP,EAAE,IAAK,KACP,EAAE,IAAK,KACP,EAAE,IAAK,OAGX,CACE,CACE,EAAE,IAAK,KACP,CAAC,EAAG,KACJ,CAAC,EAAG,KACJ,EAAE,IAAK,KACP,EAAE,IAAK,OAGX,CACE,CACE,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,UAMhB,CACE/B,KAAM,UACN8F,SAAU,CACR9F,KAAM,qBACN8E,WAAY,CACV,CACE9E,KAAM,aACN+B,YAAa,CACX,EAAE,KAAM,KACR,CAAC,GAAI,OAGT,CACE/B,KAAM,QACN+B,YAAa,CAAC,KAAM,MAEtB,CACE/B,KAAM,UACN+B,YAAa,CACX,CACE,CAAC,KAAM,KACP,CAAC,KAAM,KACP,CAAC,KAAM,KACP,CAAC,KAAM,gBAcvBwM,EAAaG,WAAW,IAAIrF,IAAQ,IAAIyC,IAAO,CAAC,IAAK,KAAM,OAE3D,MAAM6C,EAAc,IAAIC,IAAY,CAClC1H,OAAQqH,EACRM,MA1JoB,SAAU3G,GAC9B,OAAOiG,EAAOjG,EAAQkC,cAAcpG,UACtC,I,OA2JA8K,qBAAU,KACR,MAAMtP,EAAM,IAAIuP,IAAI,CAClBC,OAAQ,CAAC5B,EAAQuB,GACjBM,OAAQ,MACRC,KAAM,IAAIC,IAAK,CACbpD,OAAQ,CAAC,EAAG,GACZqD,KAAM,MAIVC,YAAc7P,EAAI,I,+FCjQtB,MAAM8P,E,MAA2B,GAAgB,EAAQ,CAAC,CAAC,YAAY,qBAExD,W,oCCRf,kIAeO,SAASC,EAAiBhN,EAAiByK,EAAQwC,EAAKnM,EAAQoM,EAAUC,EAAUC,GACvF,IAAIC,EAAGC,EACHjM,GAAK4L,EAAMxC,GAAU3J,EACzB,GAAU,IAANO,EACAgM,EAAI5C,OAEH,GAAU,IAANpJ,EACLgM,EAAI5C,EACJ6C,EAAIJ,OAEH,GAAU,IAAN7L,EAAS,CAKd,IAJA,IAAIkM,EAAKvN,EAAgByK,GACrB+C,EAAKxN,EAAgByK,EAAS,GAC9BgD,EAAW,EACXC,EAAoB,CAAC,GAChB/P,EAAI8M,EAAS3J,EAAQnD,EAAIsP,EAAKtP,GAAKmD,EAAQ,CAChD,IAAI6M,EAAK3N,EAAgBrC,GACrBiQ,EAAK5N,EAAgBrC,EAAI,GAC7B8P,GAAYxD,KAAKC,MAAMyD,EAAKJ,IAAOI,EAAKJ,IAAOK,EAAKJ,IAAOI,EAAKJ,IAChEE,EAAkBlM,KAAKiM,GACvBF,EAAKI,EACLH,EAAKI,CACT,CACA,IAAIlB,EAASQ,EAAWO,EACpBrM,EAAQ,YAAasM,EAAmBhB,GACxCtL,EAAQ,GACRkM,GACKZ,EAASgB,GAAmBtM,EAAQ,KAChCsM,GAAmBtM,EAAQ,GAAKsM,GAAmBtM,EAAQ,IACpEiM,EAAI5C,IAAWrJ,EAAQ,GAAKN,GAG5BuM,EAAI5C,EAASrJ,EAAQN,CAE7B,CACA,IAAI+M,EAAYT,EAAgB,EAAIA,EAAgB,EAChDU,EAAOX,GAAsB,IAAIxO,MAAMkP,GAC3C,IAASlQ,EAAI,EAAGA,EAAIkQ,IAAalQ,EAC7BmQ,EAAKnQ,QACKqJ,IAANqG,EACMU,SACM/G,IAANsG,EACItN,EAAgBqN,EAAI1P,GACpB,YAAKqC,EAAgBqN,EAAI1P,GAAIqC,EAAgBqN,EAAIvM,EAASnD,GAAI2P,GAEhF,OAAOQ,CACX,CAUO,SAASE,EAAwBhO,EAAiByK,EAAQwC,EAAKnM,EAAQmN,EAAGC,GAC7E,GAAIjB,GAAOxC,EACP,OAAO,KAEX,IAAI0D,EACJ,GAAIF,EAAIjO,EAAgByK,EAAS3J,EAAS,GACtC,OAAIoN,IACAC,EAAanO,EAAgBE,MAAMuK,EAAQA,EAAS3J,IACzCA,EAAS,GAAKmN,EAClBE,GAGA,KAGV,GAAInO,EAAgBiN,EAAM,GAAKgB,EAChC,OAAIC,IACAC,EAAanO,EAAgBE,MAAM+M,EAAMnM,EAAQmM,IACtCnM,EAAS,GAAKmN,EAClBE,GAGA,KAIf,GAAIF,GAAKjO,EAAgByK,EAAS3J,EAAS,GACvC,OAAOd,EAAgBE,MAAMuK,EAAQA,EAAS3J,GAIlD,IAFA,IAAIsN,EAAK3D,EAAS3J,EACduN,EAAKpB,EAAMnM,EACRsN,EAAKC,GAAI,CACZ,IAAIC,EAAOF,EAAKC,GAAO,EACnBJ,EAAIjO,GAAiBsO,EAAM,GAAKxN,EAAS,GACzCuN,EAAKC,EAGLF,EAAKE,EAAM,CAEnB,CACA,IAAIC,EAAKvO,EAAgBoO,EAAKtN,EAAS,GACvC,GAAImN,GAAKM,EACL,OAAOvO,EAAgBE,OAAOkO,EAAK,GAAKtN,GAASsN,EAAK,GAAKtN,EAASA,GAExE,IACIwM,GAAKW,EAAIM,IADJvO,GAAiBoO,EAAK,GAAKtN,EAAS,GACpByN,GACzBJ,EAAa,GACb,IAAK,IAAIxQ,EAAI,EAAGA,EAAImD,EAAS,IAAKnD,EAC9BwQ,EAAW3M,KAAK,YAAKxB,GAAiBoO,EAAK,GAAKtN,EAASnD,GAAIqC,EAAgBoO,EAAKtN,EAASnD,GAAI2P,IAGnG,OADAa,EAAW3M,KAAKyM,GACTE,CACX,CAWO,SAASK,EAAyBxO,EAAiByK,EAAQgE,EAAM3N,EAAQmN,EAAGC,EAAaQ,GAC5F,GAAIA,EACA,OAAOV,EAAwBhO,EAAiByK,EAAQgE,EAAKA,EAAK7Q,OAAS,GAAIkD,EAAQmN,EAAGC,GAE9F,IAAIC,EACJ,GAAIF,EAAIjO,EAAgBc,EAAS,GAC7B,OAAIoN,IACAC,EAAanO,EAAgBE,MAAM,EAAGY,IAC3BA,EAAS,GAAKmN,EAClBE,GAGA,KAGf,GAAInO,EAAgBA,EAAgBpC,OAAS,GAAKqQ,EAC9C,OAAIC,IACAC,EAAanO,EAAgBE,MAAMF,EAAgBpC,OAASkD,IACjDA,EAAS,GAAKmN,EAClBE,GAGA,KAGf,IAAK,IAAIxQ,EAAI,EAAGoD,EAAK0N,EAAK7Q,OAAQD,EAAIoD,IAAMpD,EAAG,CAC3C,IAAIsP,EAAMwB,EAAK9Q,GACf,GAAI8M,GAAUwC,EAAd,CAGA,GAAIgB,EAAIjO,EAAgByK,EAAS3J,EAAS,GACtC,OAAO,KAEN,GAAImN,GAAKjO,EAAgBiN,EAAM,GAChC,OAAOe,EAAwBhO,EAAiByK,EAAQwC,EAAKnM,EAAQmN,GAAG,GAE5ExD,EAASwC,CAPT,CAQJ,CACA,OAAO,IACX,C,wMC5KQ7O,E,wBADJC,GACID,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgBI,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,GAAI,EAC7FR,EAAcE,EAAGC,EAC5B,EACO,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAE7D,SAASW,IAAOC,KAAKC,YAAcd,CAAG,CADtCF,EAAcE,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,EACnF,GA2BA,EAA8B,SAAUK,GAQxC,SAASkJ,EAAajJ,EAAaC,EAAYkP,GAC3C,IAAIjP,EAAQH,EAAOR,KAAKI,OAASA,KAoCjC,GA/BAO,EAAMkP,OAAS,GAKflP,EAAMmP,6BAA+B,EAKrCnP,EAAMoP,oBAAsB,KAK5BpP,EAAMqP,WAAa,EAKnBrP,EAAMsP,mBAAqB,EAK3BtP,EAAMuP,mBAAqB,EAK3BvP,EAAMwP,yBAA2B,MAC5BP,IAAchQ,MAAMgB,QAAQH,EAAY,IAAK,CAK9C,IAJA,IAAIc,EAASZ,EAAMyP,YACfC,EAAyC,EACzCpP,EAAkB,GAClBqP,EAAQ,GACH1R,EAAI,EAAGoD,EAAKqO,EAASxR,OAAQD,EAAIoD,IAAMpD,EAAG,CAC/C,IAAI2R,EAAUF,EAASzR,GACb,IAANA,IACA2C,EAASgP,EAAQH,aAIrB,IAFA,IAAI1E,EAASzK,EAAgBpC,OACzB6Q,EAAOa,EAAQC,UACVtO,EAAI,EAAGuO,EAAKf,EAAK7Q,OAAQqD,EAAIuO,IAAMvO,EACxCwN,EAAKxN,IAAMwJ,EAEf,YAAOzK,EAAiBsP,EAAQrP,sBAChCoP,EAAM7N,KAAKiN,EACf,CACAhP,EAAaa,EACbd,EAAcQ,EACd2O,EAAYU,CAChB,CAUA,YATmBrI,IAAfvH,GAA4BkP,GAC5BjP,EAAME,mBAAmBH,EACI,GAC7BC,EAAMkP,OAASD,GAGfjP,EAAMG,eACoE,EAAeJ,GAEtFC,CACX,CAkPA,OA9TArB,EAAUoK,EAAclJ,GAkFxBkJ,EAAa5J,UAAU4Q,cAAgB,SAAUH,GAE7C,IAAIb,EACJ,GAAKtP,KAAKa,gBAKL,CACD,IAAIyK,EAAStL,KAAKa,gBAAgBpC,OAClC,YAAOuB,KAAKa,gBAAiBsP,EAAQrP,sBAErC,IAAK,IAAItC,EAAI,EAAGoD,GADhB0N,EAAOa,EAAQC,UAAUrP,SACCtC,OAAQD,EAAIoD,IAAMpD,EACxC8Q,EAAK9Q,IAAM8M,CAEnB,MAXItL,KAAKa,gBAAkBsP,EAAQrP,qBAAqBC,QACpDuO,EAAOa,EAAQC,UAAUrP,QACzBf,KAAKyP,OAAOpN,OAUhBrC,KAAKyP,OAAOpN,KAAKiN,GACjBtP,KAAKgB,SACT,EAMAsI,EAAa5J,UAAUuB,MAAQ,WAG3B,IAFA,IAAIsP,EAAMvQ,KAAKyP,OAAOhR,OAClB+R,EAAW,IAAIhR,MAAM+Q,GAChB/R,EAAI,EAAGA,EAAI+R,IAAO/R,EACvBgS,EAAShS,GAAKwB,KAAKyP,OAAOjR,GAAGuC,QAEjC,IAAI0P,EAAe,IAAInH,EAAatJ,KAAKa,gBAAgBE,QAASf,KAAKmB,OAAQqP,GAE/E,OADAC,EAAarP,gBAAgBpB,MACtByQ,CACX,EAQAnH,EAAa5J,UAAU2B,eAAiB,SAAUC,EAAGC,EAAGC,EAAcC,GAClE,OAAIA,EAAqB,YAAyBzB,KAAK0B,YAAaJ,EAAGC,GAC5DE,GAEPzB,KAAK6P,mBAAqB7P,KAAKgE,gBAC/BhE,KAAK4P,UAAY9E,KAAKC,KAAK,YAA0B/K,KAAKa,gBAAiB,EAAGb,KAAKyP,OAAQzP,KAAK2B,OAAQ,IACxG3B,KAAK6P,kBAAoB7P,KAAKgE,eAE3B,YAA6BhE,KAAK0Q,6BAA8B,EAAG1Q,KAAKyP,OAAQzP,KAAK2B,OAAQ3B,KAAK4P,WAAW,EAAMtO,EAAGC,EAAGC,EAAcC,GAClJ,EAMA6H,EAAa5J,UAAU2D,WAAa,SAAU/B,EAAGC,GAC7C,OAAO,YAAuBvB,KAAK0Q,6BAA8B,EAAG1Q,KAAKyP,OAAQzP,KAAK2B,OAAQL,EAAGC,EACrG,EAMA+H,EAAa5J,UAAUiR,QAAU,WAC7B,OAAO,YAAiB3Q,KAAK0Q,6BAA8B,EAAG1Q,KAAKyP,OAAQzP,KAAK2B,OACpF,EAcA2H,EAAa5J,UAAUqC,eAAiB,SAAU6O,GAC9C,IAAI/P,EAQJ,YAPkBgH,IAAd+I,GACA/P,EAAkBb,KAAK0Q,6BAA6B3P,QACpD,OAAA8P,EAAA,GAAuBhQ,EAAiB,EAAGb,KAAKyP,OAAQzP,KAAK2B,OAAQiP,IAGrE/P,EAAkBb,KAAKa,gBAEpB,OAAAiQ,EAAA,GAA6BjQ,EAAiB,EAAGb,KAAKyP,OAAQzP,KAAK2B,OAC9E,EAIA2H,EAAa5J,UAAUqR,SAAW,WAC9B,OAAO/Q,KAAKyP,MAChB,EAIAnG,EAAa5J,UAAUsR,sBAAwB,WAC3C,GAAIhR,KAAK0P,6BAA+B1P,KAAKgE,cAAe,CACxD,IAAIiN,ECtNT,SAAsBpQ,EAAiByK,EAAQ4E,EAAOvO,GAGzD,IAFA,IAAIsP,EAAc,GACdzO,EAAS,cACJhE,EAAI,EAAGoD,EAAKsO,EAAMzR,OAAQD,EAAIoD,IAAMpD,EAAG,CAC5C,IAAI8Q,EAAOY,EAAM1R,GACjBgE,EAAS,YAAkC3B,EAAiByK,EAAQgE,EAAK,GAAI3N,GAC7EsP,EAAY5O,MAAMG,EAAO,GAAKA,EAAO,IAAM,GAAIA,EAAO,GAAKA,EAAO,IAAM,GACxE8I,EAASgE,EAAKA,EAAK7Q,OAAS,EAChC,CACA,OAAOwS,CACX,CD4M8BC,CAAmBlR,KAAKa,gBAAiB,EAAGb,KAAKyP,OAAQzP,KAAK2B,QAChF3B,KAAK2P,oBAAsB,YAA8B3P,KAAK0Q,6BAA8B,EAAG1Q,KAAKyP,OAAQzP,KAAK2B,OAAQsP,GACzHjR,KAAK0P,4BAA8B1P,KAAKgE,aAC5C,CACA,OAAOhE,KAAK2P,mBAChB,EAOArG,EAAa5J,UAAUyR,kBAAoB,WACvC,OAAO,IAAIhR,EAAA,EAAWH,KAAKgR,wBAAwBjQ,QAASqQ,EAAA,EAAeC,IAC/E,EAIA/H,EAAa5J,UAAUgR,2BAA6B,WAChD,GAAI1Q,KAAK8P,mBAAqB9P,KAAKgE,cAAe,CAC9C,IAAInD,EAAkBb,KAAKa,gBACvB,YAAwBA,EAAiB,EAAGb,KAAKyP,OAAQzP,KAAK2B,QAC9D3B,KAAK+P,yBAA2BlP,GAGhCb,KAAK+P,yBAA2BlP,EAAgBE,QAChDf,KAAK+P,yBAAyBtR,OAAS,OAAAoS,EAAA,GAAuB7Q,KAAK+P,yBAA0B,EAAG/P,KAAKyP,OAAQzP,KAAK2B,SAEtH3B,KAAK8P,kBAAoB9P,KAAKgE,aAClC,CACA,OAAOhE,KAAK+P,wBAChB,EAMAzG,EAAa5J,UAAU4R,8BAAgC,SAAUxN,GAC7D,IAAIyN,EAA4B,GAC5BC,EAAkB,GAEtB,OADAD,EAA0B9S,OAAS,YAAmBuB,KAAKa,gBAAiB,EAAGb,KAAKyP,OAAQzP,KAAK2B,OAAQmJ,KAAKC,KAAKjH,GAAmByN,EAA2B,EAAGC,GAC7J,IAAIlI,EAAaiI,EAA2BH,EAAA,EAAeK,GAAID,EAC1E,EAOAlI,EAAa5J,UAAUgS,WAAa,SAAUzP,GAC1C,GAAIA,EAAQ,GAAKjC,KAAKyP,OAAOhR,QAAUwD,EACnC,OAAO,KAEX,IAAIqJ,EACJ,GAAc,IAAVrJ,EACAqJ,EAAS,MAER,CACD,IAAIqG,EAAW3R,KAAKyP,OAAOxN,EAAQ,GACnCqJ,EAASqG,EAASA,EAASlT,OAAS,EACxC,CACA,IAAI6Q,EAAOtP,KAAKyP,OAAOxN,GAAOlB,QAC1B+M,EAAMwB,EAAKA,EAAK7Q,OAAS,GAC7B,GAAe,IAAX6M,EACA,IAAK,IAAI9M,EAAI,EAAGoD,EAAK0N,EAAK7Q,OAAQD,EAAIoD,IAAMpD,EACxC8Q,EAAK9Q,IAAM8M,EAGnB,OAAO,IAAIrC,EAAA,EAAQjJ,KAAKa,gBAAgBE,MAAMuK,EAAQwC,GAAM9N,KAAKmB,OAAQmO,EAC7E,EAMAhG,EAAa5J,UAAUkS,YAAc,WAMjC,IALA,IAAIzQ,EAASnB,KAAKmB,OACdN,EAAkBb,KAAKa,gBACvBqP,EAAQlQ,KAAKyP,OACbQ,EAAW,GACX3E,EAAS,EACJ9M,EAAI,EAAGoD,EAAKsO,EAAMzR,OAAQD,EAAIoD,IAAMpD,EAAG,CAC5C,IAAI8Q,EAAOY,EAAM1R,GAAGuC,QAChB+M,EAAMwB,EAAKA,EAAK7Q,OAAS,GAC7B,GAAe,IAAX6M,EACA,IAAK,IAAIxJ,EAAI,EAAGuO,EAAKf,EAAK7Q,OAAQqD,EAAIuO,IAAMvO,EACxCwN,EAAKxN,IAAMwJ,EAGnB,IAAI6E,EAAU,IAAIlH,EAAA,EAAQpI,EAAgBE,MAAMuK,EAAQwC,GAAM3M,EAAQmO,GACtEW,EAAS5N,KAAK8N,GACd7E,EAASwC,CACb,CACA,OAAOmC,CACX,EAMA3G,EAAa5J,UAAU4C,QAAU,WAC7B,MAAO,cACX,EAOAgH,EAAa5J,UAAU6C,iBAAmB,SAAUC,GAChD,OAAO,YAA+BxC,KAAK0Q,6BAA8B,EAAG1Q,KAAKyP,OAAQzP,KAAK2B,OAAQa,EAC1G,EAOA8G,EAAa5J,UAAUgB,eAAiB,SAAUL,EAAaC,GAC3DN,KAAKyC,UAAUnC,EAAYD,EAAa,GACnCL,KAAKa,kBACNb,KAAKa,gBAAkB,IAE3B,IAAIqP,EAAQ,OAAA2B,EAAA,GAA6B7R,KAAKa,gBAAiB,EAAGR,EAAaL,KAAK2B,OAAQ3B,KAAKyP,QACjG,GAAqB,IAAjBS,EAAMzR,OACNuB,KAAKa,gBAAgBpC,OAAS,MAE7B,CACD,IAAIqT,EAAW5B,EAAMA,EAAMzR,OAAS,GACpCuB,KAAKa,gBAAgBpC,OACG,IAApBqT,EAASrT,OAAe,EAAIqT,EAASA,EAASrT,OAAS,EAC/D,CACAuB,KAAKgB,SACT,EACOsI,CACX,CAhUiC,CAgU/ByI,EAAA,GACa,K,oCEzWf,IACQ9S,EADR,oIAAIC,GACID,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgBI,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,GAAI,EAC7FR,EAAcE,EAAGC,EAC5B,EACO,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAE7D,SAASW,IAAOC,KAAKC,YAAcd,CAAG,CADtCF,EAAcE,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,EACnF,GAsBAqJ,EAAiC,SAAUhJ,GAS3C,SAASgJ,EAAgB/I,EAAaC,EAAY0R,GAC9C,IAAIzR,EAAQH,EAAOR,KAAKI,OAASA,KAgBjC,GAXAO,EAAM0R,MAAQ,GAKd1R,EAAMqP,WAAa,EAKnBrP,EAAMsP,mBAAqB,EACvBrQ,MAAMgB,QAAQH,EAAY,IAC1BE,EAAMG,eAC6D,EAAeJ,QAEjF,QAAmBuH,IAAfvH,GAA4B0R,EACjCzR,EAAME,mBAAmBH,EACI,GAC7BC,EAAM0R,MAAQD,MAEb,CAKD,IAJA,IAAI7Q,EAASZ,EAAMyP,YACfkC,EAA+C,EAC/CrR,EAAkB,GAClByO,EAAO,GACF9Q,EAAI,EAAGoD,EAAKsQ,EAAYzT,OAAQD,EAAIoD,IAAMpD,EAAG,CAClD,IAAI2T,EAAaD,EAAY1T,GACnB,IAANA,IACA2C,EAASgR,EAAWnC,aAExB,YAAOnP,EAAiBsR,EAAWrR,sBACnCwO,EAAKjN,KAAKxB,EAAgBpC,OAC9B,CACA8B,EAAME,mBAAmBU,EAAQN,GACjCN,EAAM0R,MAAQ3C,CAClB,CACA,OAAO/O,CACX,CAqLA,OAxOArB,EAAUkK,EAAiBhJ,GAyD3BgJ,EAAgB1J,UAAU0S,iBAAmB,SAAUD,GAC9CnS,KAAKa,gBAIN,YAAOb,KAAKa,gBAAiBsR,EAAWrR,qBAAqBC,SAH7Df,KAAKa,gBAAkBsR,EAAWrR,qBAAqBC,QAK3Df,KAAKiS,MAAM5P,KAAKrC,KAAKa,gBAAgBpC,QACrCuB,KAAKgB,SACT,EAMAoI,EAAgB1J,UAAUuB,MAAQ,WAC9B,IAAIoR,EAAkB,IAAIjJ,EAAgBpJ,KAAKa,gBAAgBE,QAASf,KAAKmB,OAAQnB,KAAKiS,MAAMlR,SAEhG,OADAsR,EAAgBjR,gBAAgBpB,MACzBqS,CACX,EAQAjJ,EAAgB1J,UAAU2B,eAAiB,SAAUC,EAAGC,EAAGC,EAAcC,GACrE,OAAIA,EAAqB,YAAyBzB,KAAK0B,YAAaJ,EAAGC,GAC5DE,GAEPzB,KAAK6P,mBAAqB7P,KAAKgE,gBAC/BhE,KAAK4P,UAAY9E,KAAKC,KAAK,YAAqB/K,KAAKa,gBAAiB,EAAGb,KAAKiS,MAAOjS,KAAK2B,OAAQ,IAClG3B,KAAK6P,kBAAoB7P,KAAKgE,eAE3B,YAAwBhE,KAAKa,gBAAiB,EAAGb,KAAKiS,MAAOjS,KAAK2B,OAAQ3B,KAAK4P,WAAW,EAAOtO,EAAGC,EAAGC,EAAcC,GAChI,EAuBA2H,EAAgB1J,UAAU4S,iBAAmB,SAAUxD,EAAGyD,EAAiBC,GACvE,GAAKxS,KAAKmB,QAAU,IAAekQ,KAC/BrR,KAAKmB,QAAU,IAAesR,MACE,IAAhCzS,KAAKa,gBAAgBpC,OACrB,OAAO,KAEX,IAAIsQ,OAAkClH,IAApB0K,GAAgCA,EAC9ChD,OAAkC1H,IAApB2K,GAAgCA,EAClD,OAAO,YAAyBxS,KAAKa,gBAAiB,EAAGb,KAAKiS,MAAOjS,KAAK2B,OAAQmN,EAAGC,EAAaQ,EACtG,EAMAnG,EAAgB1J,UAAUqC,eAAiB,WACvC,OAAO,YAAwB/B,KAAKa,gBAAiB,EAAGb,KAAKiS,MAAOjS,KAAK2B,OAC7E,EAIAyH,EAAgB1J,UAAU0Q,QAAU,WAChC,OAAOpQ,KAAKiS,KAChB,EAOA7I,EAAgB1J,UAAUgT,cAAgB,SAAUzQ,GAChD,OAAIA,EAAQ,GAAKjC,KAAKiS,MAAMxT,QAAUwD,EAC3B,KAEJ,IAAI,IAAWjC,KAAKa,gBAAgBE,MAAgB,IAAVkB,EAAc,EAAIjC,KAAKiS,MAAMhQ,EAAQ,GAAIjC,KAAKiS,MAAMhQ,IAASjC,KAAKmB,OACvH,EAMAiI,EAAgB1J,UAAUiT,eAAiB,WAOvC,IANA,IAAI9R,EAAkBb,KAAKa,gBACvByO,EAAOtP,KAAKiS,MACZ9Q,EAASnB,KAAKmB,OAEd+Q,EAAc,GACd5G,EAAS,EACJ9M,EAAI,EAAGoD,EAAK0N,EAAK7Q,OAAQD,EAAIoD,IAAMpD,EAAG,CAC3C,IAAIsP,EAAMwB,EAAK9Q,GACX2T,EAAa,IAAI,IAAWtR,EAAgBE,MAAMuK,EAAQwC,GAAM3M,GACpE+Q,EAAY7P,KAAK8P,GACjB7G,EAASwC,CACb,CACA,OAAOoE,CACX,EAIA9I,EAAgB1J,UAAUkT,iBAAmB,WAMzC,IALA,IAAIC,EAAY,GACZhS,EAAkBb,KAAKa,gBACvByK,EAAS,EACTgE,EAAOtP,KAAKiS,MACZtQ,EAAS3B,KAAK2B,OACTnD,EAAI,EAAGoD,EAAK0N,EAAK7Q,OAAQD,EAAIoD,IAAMpD,EAAG,CAC3C,IAAIsP,EAAMwB,EAAK9Q,GACXsU,EAAW,YAAiBjS,EAAiByK,EAAQwC,EAAKnM,EAAQ,IACtE,YAAOkR,EAAWC,GAClBxH,EAASwC,CACb,CACA,OAAO+E,CACX,EAMAzJ,EAAgB1J,UAAU4R,8BAAgC,SAAUxN,GAChE,IAAIyN,EAA4B,GAC5BwB,EAAiB,GAErB,OADAxB,EAA0B9S,OAAS,YAAoBuB,KAAKa,gBAAiB,EAAGb,KAAKiS,MAAOjS,KAAK2B,OAAQmC,EAAkByN,EAA2B,EAAGwB,GAClJ,IAAI3J,EAAgBmI,EAA2B,IAAeE,GAAIsB,EAC7E,EAMA3J,EAAgB1J,UAAU4C,QAAU,WAChC,MAAO,iBACX,EAOA8G,EAAgB1J,UAAU6C,iBAAmB,SAAUC,GACnD,OAAO,YAA0BxC,KAAKa,gBAAiB,EAAGb,KAAKiS,MAAOjS,KAAK2B,OAAQa,EACvF,EAOA4G,EAAgB1J,UAAUgB,eAAiB,SAAUL,EAAaC,GAC9DN,KAAKyC,UAAUnC,EAAYD,EAAa,GACnCL,KAAKa,kBACNb,KAAKa,gBAAkB,IAE3B,IAAIyO,EAAO,YAAwBtP,KAAKa,gBAAiB,EAAGR,EAAaL,KAAK2B,OAAQ3B,KAAKiS,OAC3FjS,KAAKa,gBAAgBpC,OAAyB,IAAhB6Q,EAAK7Q,OAAe,EAAI6Q,EAAKA,EAAK7Q,OAAS,GACzEuB,KAAKgB,SACT,EACOoI,CACX,CA1OoC,CA0OlC,KACa,K,oCC9Qf,sFA6DI4J,EAA+B,WAC/B,SAASA,IAKLhT,KAAKkH,oBAAiBW,EAKtB7H,KAAKoH,8BAA2BS,EAKhC7H,KAAKyH,oBAAsB,IAC/B,CA6HA,OArHAuL,EAActT,UAAUsG,eAAiB,SAAUR,EAAQM,GACvD,IAAImB,EACJ,GAAInB,EAAa,CACb,IAAIoB,EAAiBpB,EAAYoB,eAC3B,YAAcpB,EAAYoB,gBAC1BlH,KAAKqG,eAAeb,GACtBM,EAAYtD,QACZ0E,GACAA,EAAe+L,aAAe,IAAMC,cACpChM,EAAiB,YAAcA,IAChBiM,eAAerN,EAAYtD,QAE9CyE,EAAU,CACNC,eAAgBA,EAChBC,kBAAmBrB,EAAYqB,kBAEvC,CACA,OAAOnH,KAAKoI,aAAanB,EAC7B,EAUA+L,EAActT,UAAU0I,aAAe,SAAUnB,GAC7C,OAAO,YAAO,CACVC,eAAgBlH,KAAKkH,eACrBC,kBAAmBnH,KAAKoH,0BACzBH,EACP,EAKA+L,EAActT,UAAU4C,QAAU,WAC9B,OAAO,aACX,EASA0Q,EAActT,UAAUmG,YAAc,SAAUL,EAAQM,GACpD,OAAO,aACX,EASAkN,EAActT,UAAUuG,aAAe,SAAUT,EAAQM,GACrD,OAAO,aACX,EASAkN,EAActT,UAAUyG,aAAe,SAAUX,EAAQM,GACrD,OAAO,aACX,EAQAkN,EAActT,UAAU2G,eAAiB,SAAUb,GAC/C,OAAO,aACX,EASAwN,EAActT,UAAU6G,aAAe,SAAUC,EAASV,GACtD,OAAO,aACX,EASAkN,EAActT,UAAUiH,cAAgB,SAAUC,EAAUd,GACxD,OAAO,aACX,EASAkN,EAActT,UAAUoH,cAAgB,SAAU1C,EAAU0B,GACxD,OAAO,aACX,EACOkN,CACX,CA/IkC,GAuJ3B,SAASI,EAA6BhP,EAAUiP,EAAOvN,GAC1D,IAMIwN,EANAnM,EAAoBrB,EAClB,YAAcA,EAAYqB,mBAC1B,KACFD,EAAiBpB,EACf,YAAcA,EAAYoB,gBAC1B,KAUN,GALIoM,EAHAnM,GACAD,IACC,YAAqBC,EAAmBD,IAC1BmM,EAAQjP,EAASnD,QAAUmD,GAAUqH,UAAU4H,EAAQlM,EAAoBD,EAAgBmM,EAAQnM,EAAiBC,GAGrH/C,EAEdiP,GACAvN,QACuD+B,IAA3B,EAAc0L,SAAwB,CAClE,IAAIC,EAAU1I,KAAK2I,IAAI,GACK,EAAcF,UAYtCD,IAAgBlP,IAChBkP,EAAclP,EAASnD,SAE3BqS,EAAYtO,gBATI,SAAU3E,GACtB,IAAK,IAAI7B,EAAI,EAAGoD,EAAKvB,EAAY5B,OAAQD,EAAIoD,IAAMpD,EAC/C6B,EAAY7B,GAAKsM,KAAK4I,MAAMrT,EAAY7B,GAAKgV,GAAWA,EAE5D,OAAOnT,CACX,GAKJ,CACA,OAAOiT,CACX,CA7Ce,K,oCC7Mf,IACQrU,EADR,gJAAIC,GACID,EAAgB,SAAUE,EAAGC,GAI7B,OAHAH,EAAgBI,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,CAAG,GAC1E,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,GAAI,EAC7FR,EAAcE,EAAGC,EAC5B,EACO,SAAUD,EAAGC,GAChB,GAAiB,mBAANA,GAA0B,OAANA,EAC3B,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAE7D,SAASW,IAAOC,KAAKC,YAAcd,CAAG,CADtCF,EAAcE,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,EACnF,GAuBAgJ,EAA4B,SAAU3I,GAOtC,SAAS2I,EAAW1I,EAAaC,GAC7B,IAAIC,EAAQH,EAAOR,KAAKI,OAASA,KA6BjC,OAxBAO,EAAMoT,cAAgB,KAKtBpT,EAAMqT,uBAAyB,EAK/BrT,EAAMqP,WAAa,EAKnBrP,EAAMsP,mBAAqB,OACRhI,IAAfvH,GAA6Bd,MAAMgB,QAAQH,EAAY,IAKvDE,EAAMG,eACsD,EAAeJ,GAL3EC,EAAME,mBAAmBH,EACI,GAM1BC,CACX,CA8JA,OAnMArB,EAAU6J,EAAY3I,GA2CtB2I,EAAWrJ,UAAUmU,iBAAmB,SAAU7E,GACzChP,KAAKa,gBAIN,YAAOb,KAAKa,gBAAiBmO,GAH7BhP,KAAKa,gBAAkBmO,EAAWjO,QAKtCf,KAAKgB,SACT,EAMA+H,EAAWrJ,UAAUuB,MAAQ,WACzB,IAAIkR,EAAa,IAAIpJ,EAAW/I,KAAKa,gBAAgBE,QAASf,KAAKmB,QAEnE,OADAgR,EAAW/Q,gBAAgBpB,MACpBmS,CACX,EAQApJ,EAAWrJ,UAAU2B,eAAiB,SAAUC,EAAGC,EAAGC,EAAcC,GAChE,OAAIA,EAAqB,YAAyBzB,KAAK0B,YAAaJ,EAAGC,GAC5DE,GAEPzB,KAAK6P,mBAAqB7P,KAAKgE,gBAC/BhE,KAAK4P,UAAY9E,KAAKC,KAAK,YAAgB/K,KAAKa,gBAAiB,EAAGb,KAAKa,gBAAgBpC,OAAQuB,KAAK2B,OAAQ,IAC9G3B,KAAK6P,kBAAoB7P,KAAKgE,eAE3B,YAAmBhE,KAAKa,gBAAiB,EAAGb,KAAKa,gBAAgBpC,OAAQuB,KAAK2B,OAAQ3B,KAAK4P,WAAW,EAAOtO,EAAGC,EAAGC,EAAcC,GAC5I,EAYAsH,EAAWrJ,UAAUoU,eAAiB,SAAUC,GAC5C,OAAO,YAAe/T,KAAKa,gBAAiB,EAAGb,KAAKa,gBAAgBpC,OAAQuB,KAAK2B,OAAQoS,EAC7F,EAeAhL,EAAWrJ,UAAU4S,iBAAmB,SAAUxD,EAAGyD,GACjD,GAAIvS,KAAKmB,QAAU,IAAekQ,KAC9BrR,KAAKmB,QAAU,IAAesR,KAC9B,OAAO,KAEX,IAAI1D,OAAkClH,IAApB0K,GAAgCA,EAClD,OAAO,YAAwBvS,KAAKa,gBAAiB,EAAGb,KAAKa,gBAAgBpC,OAAQuB,KAAK2B,OAAQmN,EAAGC,EACzG,EAMAhG,EAAWrJ,UAAUqC,eAAiB,WAClC,OAAO,YAAmB/B,KAAKa,gBAAiB,EAAGb,KAAKa,gBAAgBpC,OAAQuB,KAAK2B,OACzF,EAWAoH,EAAWrJ,UAAUsU,gBAAkB,SAAUjG,EAAUC,GACvD,OAAO,YAAiBhO,KAAKa,gBAAiB,EAAGb,KAAKa,gBAAgBpC,OAAQuB,KAAK2B,OAAQoM,EAAUC,EAAUhO,KAAK2B,OACxH,EAMAoH,EAAWrJ,UAAUuU,UAAY,WAC7B,OAAO,YAAiBjU,KAAKa,gBAAiB,EAAGb,KAAKa,gBAAgBpC,OAAQuB,KAAK2B,OACvF,EAIAoH,EAAWrJ,UAAUwU,gBAAkB,WAKnC,OAJIlU,KAAK4T,uBAAyB5T,KAAKgE,gBACnChE,KAAK2T,cAAgB3T,KAAKgU,gBAAgB,GAAKhU,KAAK2T,eACpD3T,KAAK4T,sBAAwB5T,KAAKgE,eAE/BhE,KAAK2T,aAChB,EAMA5K,EAAWrJ,UAAU4R,8BAAgC,SAAUxN,GAC3D,IAAIyN,EAA4B,GAEhC,OADAA,EAA0B9S,OAAS,YAAeuB,KAAKa,gBAAiB,EAAGb,KAAKa,gBAAgBpC,OAAQuB,KAAK2B,OAAQmC,EAAkByN,EAA2B,GAC3J,IAAIxI,EAAWwI,EAA2B,IAAeE,GACpE,EAMA1I,EAAWrJ,UAAU4C,QAAU,WAC3B,MAAO,YACX,EAOAyG,EAAWrJ,UAAU6C,iBAAmB,SAAUC,GAC9C,OAAO,YAAqBxC,KAAKa,gBAAiB,EAAGb,KAAKa,gBAAgBpC,OAAQuB,KAAK2B,OAAQa,EACnG,EAOAuG,EAAWrJ,UAAUgB,eAAiB,SAAUL,EAAaC,GACzDN,KAAKyC,UAAUnC,EAAYD,EAAa,GACnCL,KAAKa,kBACNb,KAAKa,gBAAkB,IAE3Bb,KAAKa,gBAAgBpC,OAAS,YAAmBuB,KAAKa,gBAAiB,EAAGR,EAAaL,KAAK2B,QAC5F3B,KAAKgB,SACT,EACO+H,CACX,CArM+B,CAqM7B,KACa,K","file":"js/chunk-c2aa2234.08f84148.js","sourcesContent":["import { onBeforeUnmount } from \"vue\";\n\n/**\n * 监听侧边栏，侧边栏发生变化更新地图\n * @param {ol.Map} map 地图实例\n */\nexport default (...map) => {\n  // 选择需要观察变动的节点\n  const targetNode = document.querySelector(\n    \".el-aside .menu .el-scrollbar__view\"\n  );\n  // 观察器的配置（需要观察什么变动）\n  const config = { attributes: true, childList: true, subtree: true };\n  // 当观察到变动时执行的回调函数\n  const callback = function (mutationsList) {\n    // Use traditional 'for loops' for IE 11\n    for (let mutation of mutationsList) {\n      if (mutation.type === \"childList\") {\n        // console.log(\"已添加或删除子节点。\");\n      } else if (\n        mutation.type === \"attributes\" &&\n        mutation.attributeName === \"style\"\n      ) {\n        for (let i = 0; i < map.length; i++) {\n          map[i].updateSize();\n        }\n\n        // console.log(\"这个 \" + mutation.attributeName + \" 属性被修改。\");\n      }\n    }\n  };\n  // 创建一个观察器实例并传入回调函数\n  const observer = new MutationObserver(callback);\n\n  // 以上述配置开始观察目标节点\n  observer.observe(targetNode, config);\n\n  //卸载前\n  onBeforeUnmount(() => {\n    observer.disconnect();\n  });\n};\n","export * from \"-!../../../../node_modules/.pnpm/mini-css-extract-plugin@0.9.0_webpack@4.47.0/node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../../node_modules/.pnpm/css-loader@3.6.0_webpack@4.47.0/node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../../node_modules/.pnpm/vue-loader@16.8.3_@vue+compiler-sfc@3.4.6_vue@3.4.6_webpack@4.47.0/node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/.pnpm/postcss-loader@3.0.0/node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../../node_modules/.pnpm/cache-loader@4.1.0_webpack@4.47.0/node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/.pnpm/vue-loader@16.8.3_@vue+compiler-sfc@3.4.6_vue@3.4.6_webpack@4.47.0/node_modules/vue-loader/dist/index.js??ref--1-1!./index.vue?vue&type=style&index=0&id=e0eb4728&scoped=true&lang=css\"","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nvar MultiPoint = /** @class */ (function (_super) {\n    __extends(MultiPoint, _super);\n    /**\n     * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function MultiPoint(coordinates, opt_layout) {\n        var _this = _super.call(this) || this;\n        if (opt_layout && !Array.isArray(coordinates[0])) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed point to this multipoint.\n     * @param {Point} point Point.\n     * @api\n     */\n    MultiPoint.prototype.appendPoint = function (point) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = point.getFlatCoordinates().slice();\n        }\n        else {\n            extend(this.flatCoordinates, point.getFlatCoordinates());\n        }\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!MultiPoint} Clone.\n     * @api\n     */\n    MultiPoint.prototype.clone = function () {\n        var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n        multiPoint.applyProperties(this);\n        return multiPoint;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    MultiPoint.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        var flatCoordinates = this.flatCoordinates;\n        var stride = this.stride;\n        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n            var squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n            if (squaredDistance < minSquaredDistance) {\n                minSquaredDistance = squaredDistance;\n                for (var j = 0; j < stride; ++j) {\n                    closestPoint[j] = flatCoordinates[i + j];\n                }\n                closestPoint.length = stride;\n            }\n        }\n        return minSquaredDistance;\n    };\n    /**\n     * Return the coordinates of the multipoint.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n    MultiPoint.prototype.getCoordinates = function () {\n        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * Return the point at the specified index.\n     * @param {number} index Index.\n     * @return {Point} Point.\n     * @api\n     */\n    MultiPoint.prototype.getPoint = function (index) {\n        var n = !this.flatCoordinates\n            ? 0\n            : this.flatCoordinates.length / this.stride;\n        if (index < 0 || n <= index) {\n            return null;\n        }\n        return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n    };\n    /**\n     * Return the points of this multipoint.\n     * @return {Array<Point>} Points.\n     * @api\n     */\n    MultiPoint.prototype.getPoints = function () {\n        var flatCoordinates = this.flatCoordinates;\n        var layout = this.layout;\n        var stride = this.stride;\n        /** @type {Array<Point>} */\n        var points = [];\n        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n            var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n            points.push(point);\n        }\n        return points;\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    MultiPoint.prototype.getType = function () {\n        return 'MultiPoint';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    MultiPoint.prototype.intersectsExtent = function (extent) {\n        var flatCoordinates = this.flatCoordinates;\n        var stride = this.stride;\n        for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n            var x = flatCoordinates[i];\n            var y = flatCoordinates[i + 1];\n            if (containsXY(extent, x, y)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Set the coordinates of the multipoint.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    MultiPoint.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 1);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    };\n    return MultiPoint;\n}(SimpleGeometry));\nexport default MultiPoint;\n//# sourceMappingURL=MultiPoint.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport { closestSquaredDistanceXY, createOrUpdateEmpty, extend, getCenter, } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nvar GeometryCollection = /** @class */ (function (_super) {\n    __extends(GeometryCollection, _super);\n    /**\n     * @param {Array<Geometry>} [opt_geometries] Geometries.\n     */\n    function GeometryCollection(opt_geometries) {\n        var _this = _super.call(this) || this;\n        /**\n         * @private\n         * @type {Array<Geometry>}\n         */\n        _this.geometries_ = opt_geometries ? opt_geometries : null;\n        /**\n         * @type {Array<import(\"../events.js\").EventsKey>}\n         */\n        _this.changeEventsKeys_ = [];\n        _this.listenGeometriesChange_();\n        return _this;\n    }\n    /**\n     * @private\n     */\n    GeometryCollection.prototype.unlistenGeometriesChange_ = function () {\n        this.changeEventsKeys_.forEach(unlistenByKey);\n        this.changeEventsKeys_.length = 0;\n    };\n    /**\n     * @private\n     */\n    GeometryCollection.prototype.listenGeometriesChange_ = function () {\n        if (!this.geometries_) {\n            return;\n        }\n        for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n            this.changeEventsKeys_.push(listen(this.geometries_[i], EventType.CHANGE, this.changed, this));\n        }\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!GeometryCollection} Clone.\n     * @api\n     */\n    GeometryCollection.prototype.clone = function () {\n        var geometryCollection = new GeometryCollection(null);\n        geometryCollection.setGeometries(this.geometries_);\n        geometryCollection.applyProperties(this);\n        return geometryCollection;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    GeometryCollection.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n        }\n        return minSquaredDistance;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n    GeometryCollection.prototype.containsXY = function (x, y) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            if (geometries[i].containsXY(x, y)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n    GeometryCollection.prototype.computeExtent = function (extent) {\n        createOrUpdateEmpty(extent);\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            extend(extent, geometries[i].getExtent());\n        }\n        return extent;\n    };\n    /**\n     * Return the geometries that make up this geometry collection.\n     * @return {Array<Geometry>} Geometries.\n     * @api\n     */\n    GeometryCollection.prototype.getGeometries = function () {\n        return cloneGeometries(this.geometries_);\n    };\n    /**\n     * @return {Array<Geometry>} Geometries.\n     */\n    GeometryCollection.prototype.getGeometriesArray = function () {\n        return this.geometries_;\n    };\n    /**\n     * @return {Array<Geometry>} Geometries.\n     */\n    GeometryCollection.prototype.getGeometriesArrayRecursive = function () {\n        /** @type {Array<Geometry>} */\n        var geometriesArray = [];\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            if (geometries[i].getType() === this.getType()) {\n                geometriesArray = geometriesArray.concat(\n                /** @type {GeometryCollection} */ (geometries[i]).getGeometriesArrayRecursive());\n            }\n            else {\n                geometriesArray.push(geometries[i]);\n            }\n        }\n        return geometriesArray;\n    };\n    /**\n     * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {GeometryCollection} Simplified GeometryCollection.\n     */\n    GeometryCollection.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        if (squaredTolerance < 0 ||\n            (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n                squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {\n            return this;\n        }\n        var simplifiedGeometries = [];\n        var geometries = this.geometries_;\n        var simplified = false;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            var geometry = geometries[i];\n            var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n            simplifiedGeometries.push(simplifiedGeometry);\n            if (simplifiedGeometry !== geometry) {\n                simplified = true;\n            }\n        }\n        if (simplified) {\n            var simplifiedGeometryCollection = new GeometryCollection(null);\n            simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n            return simplifiedGeometryCollection;\n        }\n        else {\n            this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n            return this;\n        }\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    GeometryCollection.prototype.getType = function () {\n        return 'GeometryCollection';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    GeometryCollection.prototype.intersectsExtent = function (extent) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            if (geometries[i].intersectsExtent(extent)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    GeometryCollection.prototype.isEmpty = function () {\n        return this.geometries_.length === 0;\n    };\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @param {number} angle Rotation angle in radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n    GeometryCollection.prototype.rotate = function (angle, anchor) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].rotate(angle, anchor);\n        }\n        this.changed();\n    };\n    /**\n     * Scale the geometry (with an optional origin).  This modifies the geometry\n     * coordinates in place.\n     * @abstract\n     * @param {number} sx The scaling factor in the x-direction.\n     * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n     *     of the geometry extent).\n     * @api\n     */\n    GeometryCollection.prototype.scale = function (sx, opt_sy, opt_anchor) {\n        var anchor = opt_anchor;\n        if (!anchor) {\n            anchor = getCenter(this.getExtent());\n        }\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].scale(sx, opt_sy, anchor);\n        }\n        this.changed();\n    };\n    /**\n     * Set the geometries that make up this geometry collection.\n     * @param {Array<Geometry>} geometries Geometries.\n     * @api\n     */\n    GeometryCollection.prototype.setGeometries = function (geometries) {\n        this.setGeometriesArray(cloneGeometries(geometries));\n    };\n    /**\n     * @param {Array<Geometry>} geometries Geometries.\n     */\n    GeometryCollection.prototype.setGeometriesArray = function (geometries) {\n        this.unlistenGeometriesChange_();\n        this.geometries_ = geometries;\n        this.listenGeometriesChange_();\n        this.changed();\n    };\n    /**\n     * Apply a transform function to the coordinates of the geometry.\n     * The geometry is modified in place.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n     * Called with a flat array of geometry coordinates.\n     * @api\n     */\n    GeometryCollection.prototype.applyTransform = function (transformFn) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].applyTransform(transformFn);\n        }\n        this.changed();\n    };\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n    GeometryCollection.prototype.translate = function (deltaX, deltaY) {\n        var geometries = this.geometries_;\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            geometries[i].translate(deltaX, deltaY);\n        }\n        this.changed();\n    };\n    /**\n     * Clean up.\n     */\n    GeometryCollection.prototype.disposeInternal = function () {\n        this.unlistenGeometriesChange_();\n        _super.prototype.disposeInternal.call(this);\n    };\n    return GeometryCollection;\n}(Geometry));\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n    var clonedGeometries = [];\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n        clonedGeometries.push(geometries[i].clone());\n    }\n    return clonedGeometries;\n}\nexport default GeometryCollection;\n//# sourceMappingURL=GeometryCollection.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport { abstract } from '../util.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nvar JSONFeature = /** @class */ (function (_super) {\n    __extends(JSONFeature, _super);\n    function JSONFeature() {\n        return _super.call(this) || this;\n    }\n    /**\n     * @return {import(\"./Feature.js\").Type} Format.\n     */\n    JSONFeature.prototype.getType = function () {\n        return 'json';\n    };\n    /**\n     * Read a feature.  Only works for a single feature. Use `readFeatures` to\n     * read a feature collection.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {import(\"../Feature.js\").default} Feature.\n     * @api\n     */\n    JSONFeature.prototype.readFeature = function (source, opt_options) {\n        return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, opt_options));\n    };\n    /**\n     * Read all features.  Works with both a single feature and a feature\n     * collection.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     * @api\n     */\n    JSONFeature.prototype.readFeatures = function (source, opt_options) {\n        return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, opt_options));\n    };\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    JSONFeature.prototype.readFeatureFromObject = function (object, opt_options) {\n        return abstract();\n    };\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {Array<import(\"../Feature.js\").default>} Features.\n     */\n    JSONFeature.prototype.readFeaturesFromObject = function (object, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read a geometry.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     * @api\n     */\n    JSONFeature.prototype.readGeometry = function (source, opt_options) {\n        return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, opt_options));\n    };\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    JSONFeature.prototype.readGeometryFromObject = function (object, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read the projection.\n     *\n     * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     * @api\n     */\n    JSONFeature.prototype.readProjection = function (source) {\n        return this.readProjectionFromObject(getObject(source));\n    };\n    /**\n     * @abstract\n     * @param {Object} object Object.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n    JSONFeature.prototype.readProjectionFromObject = function (object) {\n        return abstract();\n    };\n    /**\n     * Encode a feature as string.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Encoded feature.\n     * @api\n     */\n    JSONFeature.prototype.writeFeature = function (feature, opt_options) {\n        return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n    };\n    /**\n     * @abstract\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {Object} Object.\n     */\n    JSONFeature.prototype.writeFeatureObject = function (feature, opt_options) {\n        return abstract();\n    };\n    /**\n     * Encode an array of features as string.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Encoded features.\n     * @api\n     */\n    JSONFeature.prototype.writeFeatures = function (features, opt_options) {\n        return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n    };\n    /**\n     * @abstract\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {Object} Object.\n     */\n    JSONFeature.prototype.writeFeaturesObject = function (features, opt_options) {\n        return abstract();\n    };\n    /**\n     * Encode a geometry as string.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {string} Encoded geometry.\n     * @api\n     */\n    JSONFeature.prototype.writeGeometry = function (geometry, opt_options) {\n        return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n    };\n    /**\n     * @abstract\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {Object} Object.\n     */\n    JSONFeature.prototype.writeGeometryObject = function (geometry, opt_options) {\n        return abstract();\n    };\n    return JSONFeature;\n}(FeatureFormat));\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n    if (typeof source === 'string') {\n        var object = JSON.parse(source);\n        return object ? /** @type {Object} */ (object) : null;\n    }\n    else if (source !== null) {\n        return source;\n    }\n    else {\n        return null;\n    }\n}\nexport default JSONFeature;\n//# sourceMappingURL=JSONFeature.js.map","/**\n * @module ol/format/GeoJSON\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nvar GeoJSON = /** @class */ (function (_super) {\n    __extends(GeoJSON, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function GeoJSON(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this) || this;\n        /**\n         * @type {import(\"../proj/Projection.js\").default}\n         */\n        _this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n        if (options.featureProjection) {\n            /**\n             * @type {import(\"../proj/Projection.js\").default}\n             */\n            _this.defaultFeatureProjection = getProjection(options.featureProjection);\n        }\n        /**\n         * Name of the geometry attribute for features.\n         * @type {string|undefined}\n         * @private\n         */\n        _this.geometryName_ = options.geometryName;\n        /**\n         * Look for the geometry name in the feature GeoJSON\n         * @type {boolean|undefined}\n         * @private\n         */\n        _this.extractGeometryName_ = options.extractGeometryName;\n        _this.supportedMediaTypes = [\n            'application/geo+json',\n            'application/vnd.geo+json',\n        ];\n        return _this;\n    }\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../Feature.js\").default} Feature.\n     */\n    GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n        /**\n         * @type {GeoJSONFeature}\n         */\n        var geoJSONFeature = null;\n        if (object['type'] === 'Feature') {\n            geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n        }\n        else {\n            geoJSONFeature = {\n                'type': 'Feature',\n                'geometry': /** @type {GeoJSONGeometry} */ (object),\n                'properties': null,\n            };\n        }\n        var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n        var feature = new Feature();\n        if (this.geometryName_) {\n            feature.setGeometryName(this.geometryName_);\n        }\n        else if (this.extractGeometryName_ &&\n            'geometry_name' in geoJSONFeature !== undefined) {\n            feature.setGeometryName(geoJSONFeature['geometry_name']);\n        }\n        feature.setGeometry(geometry);\n        if ('id' in geoJSONFeature) {\n            feature.setId(geoJSONFeature['id']);\n        }\n        if (geoJSONFeature['properties']) {\n            feature.setProperties(geoJSONFeature['properties'], true);\n        }\n        return feature;\n    };\n    /**\n     * @param {Object} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {Array<Feature>} Features.\n     */\n    GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n        var geoJSONObject = /** @type {GeoJSONObject} */ (object);\n        /** @type {Array<import(\"../Feature.js\").default>} */\n        var features = null;\n        if (geoJSONObject['type'] === 'FeatureCollection') {\n            var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);\n            features = [];\n            var geoJSONFeatures = geoJSONFeatureCollection['features'];\n            for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n                features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n            }\n        }\n        else {\n            features = [this.readFeatureFromObject(object, opt_options)];\n        }\n        return features;\n    };\n    /**\n     * @param {GeoJSONGeometry} object Object.\n     * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n     * @protected\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n        return readGeometry(object, opt_options);\n    };\n    /**\n     * @param {Object} object Object.\n     * @protected\n     * @return {import(\"../proj/Projection.js\").default} Projection.\n     */\n    GeoJSON.prototype.readProjectionFromObject = function (object) {\n        var crs = object['crs'];\n        var projection;\n        if (crs) {\n            if (crs['type'] == 'name') {\n                projection = getProjection(crs['properties']['name']);\n            }\n            else if (crs['type'] === 'EPSG') {\n                projection = getProjection('EPSG:' + crs['properties']['code']);\n            }\n            else {\n                assert(false, 36); // Unknown SRS type\n            }\n        }\n        else {\n            projection = this.dataProjection;\n        }\n        return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n    };\n    /**\n     * Encode a feature as a GeoJSON Feature object.\n     *\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONFeature} Object.\n     * @api\n     */\n    GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        /** @type {GeoJSONFeature} */\n        var object = {\n            'type': 'Feature',\n            geometry: null,\n            properties: null,\n        };\n        var id = feature.getId();\n        if (id !== undefined) {\n            object.id = id;\n        }\n        if (!feature.hasProperties()) {\n            return object;\n        }\n        var properties = feature.getProperties();\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            object.geometry = writeGeometry(geometry, opt_options);\n            delete properties[feature.getGeometryName()];\n        }\n        if (!isEmpty(properties)) {\n            object.properties = properties;\n        }\n        return object;\n    };\n    /**\n     * Encode an array of features as a GeoJSON object.\n     *\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONFeatureCollection} GeoJSON Object.\n     * @api\n     */\n    GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n        opt_options = this.adaptOptions(opt_options);\n        var objects = [];\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            objects.push(this.writeFeatureObject(features[i], opt_options));\n        }\n        return {\n            type: 'FeatureCollection',\n            features: objects,\n        };\n    };\n    /**\n     * Encode a geometry as a GeoJSON object.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n     * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n     * @api\n     */\n    GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n        return writeGeometry(geometry, this.adaptOptions(opt_options));\n    };\n    return GeoJSON;\n}(JSONFeature));\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n    if (!object) {\n        return null;\n    }\n    /**\n     * @type {import(\"../geom/Geometry.js\").default}\n     */\n    var geometry;\n    switch (object['type']) {\n        case 'Point': {\n            geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n            break;\n        }\n        case 'LineString': {\n            geometry = readLineStringGeometry(\n            /** @type {GeoJSONLineString} */ (object));\n            break;\n        }\n        case 'Polygon': {\n            geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n            break;\n        }\n        case 'MultiPoint': {\n            geometry = readMultiPointGeometry(\n            /** @type {GeoJSONMultiPoint} */ (object));\n            break;\n        }\n        case 'MultiLineString': {\n            geometry = readMultiLineStringGeometry(\n            /** @type {GeoJSONMultiLineString} */ (object));\n            break;\n        }\n        case 'MultiPolygon': {\n            geometry = readMultiPolygonGeometry(\n            /** @type {GeoJSONMultiPolygon} */ (object));\n            break;\n        }\n        case 'GeometryCollection': {\n            geometry = readGeometryCollectionGeometry(\n            /** @type {GeoJSONGeometryCollection} */ (object));\n            break;\n        }\n        default: {\n            throw new Error('Unsupported GeoJSON type: ' + object['type']);\n        }\n    }\n    return transformGeometryWithOptions(geometry, false, opt_options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n    var geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function (geometry) {\n        return readGeometry(geometry, opt_options);\n    });\n    return new GeometryCollection(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n    return new Point(object['coordinates']);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n    return new LineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n    return new MultiLineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n    return new MultiPoint(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n    return new MultiPolygon(object['coordinates']);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n    return new Polygon(object['coordinates']);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n    geometry = transformGeometryWithOptions(geometry, true, opt_options);\n    var type = geometry.getType();\n    /** @type {GeoJSONGeometry} */\n    var geoJSON;\n    switch (type) {\n        case 'Point': {\n            geoJSON = writePointGeometry(\n            /** @type {Point} */ (geometry), opt_options);\n            break;\n        }\n        case 'LineString': {\n            geoJSON = writeLineStringGeometry(\n            /** @type {LineString} */ (geometry), opt_options);\n            break;\n        }\n        case 'Polygon': {\n            geoJSON = writePolygonGeometry(\n            /** @type {Polygon} */ (geometry), opt_options);\n            break;\n        }\n        case 'MultiPoint': {\n            geoJSON = writeMultiPointGeometry(\n            /** @type {MultiPoint} */ (geometry), opt_options);\n            break;\n        }\n        case 'MultiLineString': {\n            geoJSON = writeMultiLineStringGeometry(\n            /** @type {MultiLineString} */ (geometry), opt_options);\n            break;\n        }\n        case 'MultiPolygon': {\n            geoJSON = writeMultiPolygonGeometry(\n            /** @type {MultiPolygon} */ (geometry), opt_options);\n            break;\n        }\n        case 'GeometryCollection': {\n            geoJSON = writeGeometryCollectionGeometry(\n            /** @type {GeometryCollection} */ (geometry), opt_options);\n            break;\n        }\n        case 'Circle': {\n            geoJSON = {\n                type: 'GeometryCollection',\n                geometries: [],\n            };\n            break;\n        }\n        default: {\n            throw new Error('Unsupported geometry type: ' + type);\n        }\n    }\n    return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n    var geometries = geometry.getGeometriesArray().map(function (geometry) {\n        var options = assign({}, opt_options);\n        delete options.featureProjection;\n        return writeGeometry(geometry, options);\n    });\n    return {\n        type: 'GeometryCollection',\n        geometries: geometries,\n    };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n    return {\n        type: 'LineString',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n    return {\n        type: 'MultiLineString',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n    return {\n        type: 'MultiPoint',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n    var right;\n    if (opt_options) {\n        right = opt_options.rightHanded;\n    }\n    return {\n        type: 'MultiPolygon',\n        coordinates: geometry.getCoordinates(right),\n    };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n    return {\n        type: 'Point',\n        coordinates: geometry.getCoordinates(),\n    };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n    var right;\n    if (opt_options) {\n        right = opt_options.rightHanded;\n    }\n    return {\n        type: 'Polygon',\n        coordinates: geometry.getCoordinates(right),\n    };\n}\nexport default GeoJSON;\n//# sourceMappingURL=GeoJSON.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/Circle\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { createOrUpdate, forEachCorner, intersects } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { rotate, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nvar Circle = /** @class */ (function (_super) {\n    __extends(Circle, _super);\n    /**\n     * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n     *     For internal use, flat coordinates in combination with `opt_layout` and no\n     *     `opt_radius` are also accepted.\n     * @param {number} [opt_radius] Radius.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function Circle(center, opt_radius, opt_layout) {\n        var _this = _super.call(this) || this;\n        if (opt_layout !== undefined && opt_radius === undefined) {\n            _this.setFlatCoordinates(opt_layout, center);\n        }\n        else {\n            var radius = opt_radius ? opt_radius : 0;\n            _this.setCenterAndRadius(center, radius, opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!Circle} Clone.\n     * @api\n     */\n    Circle.prototype.clone = function () {\n        var circle = new Circle(this.flatCoordinates.slice(), undefined, this.layout);\n        circle.applyProperties(this);\n        return circle;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    Circle.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        var flatCoordinates = this.flatCoordinates;\n        var dx = x - flatCoordinates[0];\n        var dy = y - flatCoordinates[1];\n        var squaredDistance = dx * dx + dy * dy;\n        if (squaredDistance < minSquaredDistance) {\n            if (squaredDistance === 0) {\n                for (var i = 0; i < this.stride; ++i) {\n                    closestPoint[i] = flatCoordinates[i];\n                }\n            }\n            else {\n                var delta = this.getRadius() / Math.sqrt(squaredDistance);\n                closestPoint[0] = flatCoordinates[0] + delta * dx;\n                closestPoint[1] = flatCoordinates[1] + delta * dy;\n                for (var i = 2; i < this.stride; ++i) {\n                    closestPoint[i] = flatCoordinates[i];\n                }\n            }\n            closestPoint.length = this.stride;\n            return squaredDistance;\n        }\n        else {\n            return minSquaredDistance;\n        }\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n    Circle.prototype.containsXY = function (x, y) {\n        var flatCoordinates = this.flatCoordinates;\n        var dx = x - flatCoordinates[0];\n        var dy = y - flatCoordinates[1];\n        return dx * dx + dy * dy <= this.getRadiusSquared_();\n    };\n    /**\n     * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n     * @return {import(\"../coordinate.js\").Coordinate} Center.\n     * @api\n     */\n    Circle.prototype.getCenter = function () {\n        return this.flatCoordinates.slice(0, this.stride);\n    };\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n    Circle.prototype.computeExtent = function (extent) {\n        var flatCoordinates = this.flatCoordinates;\n        var radius = flatCoordinates[this.stride] - flatCoordinates[0];\n        return createOrUpdate(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);\n    };\n    /**\n     * Return the radius of the circle.\n     * @return {number} Radius.\n     * @api\n     */\n    Circle.prototype.getRadius = function () {\n        return Math.sqrt(this.getRadiusSquared_());\n    };\n    /**\n     * @private\n     * @return {number} Radius squared.\n     */\n    Circle.prototype.getRadiusSquared_ = function () {\n        var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n        var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n        return dx * dx + dy * dy;\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    Circle.prototype.getType = function () {\n        return 'Circle';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    Circle.prototype.intersectsExtent = function (extent) {\n        var circleExtent = this.getExtent();\n        if (intersects(extent, circleExtent)) {\n            var center = this.getCenter();\n            if (extent[0] <= center[0] && extent[2] >= center[0]) {\n                return true;\n            }\n            if (extent[1] <= center[1] && extent[3] >= center[1]) {\n                return true;\n            }\n            return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n        }\n        return false;\n    };\n    /**\n     * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n     * @param {import(\"../coordinate.js\").Coordinate} center Center.\n     * @api\n     */\n    Circle.prototype.setCenter = function (center) {\n        var stride = this.stride;\n        var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n        var flatCoordinates = center.slice();\n        flatCoordinates[stride] = flatCoordinates[0] + radius;\n        for (var i = 1; i < stride; ++i) {\n            flatCoordinates[stride + i] = center[i];\n        }\n        this.setFlatCoordinates(this.layout, flatCoordinates);\n        this.changed();\n    };\n    /**\n     * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n     * number) of the circle.\n     * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n     * @param {number} radius Radius.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    Circle.prototype.setCenterAndRadius = function (center, radius, opt_layout) {\n        this.setLayout(opt_layout, center, 0);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        /** @type {Array<number>} */\n        var flatCoordinates = this.flatCoordinates;\n        var offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n        flatCoordinates[offset++] = flatCoordinates[0] + radius;\n        for (var i = 1, ii = this.stride; i < ii; ++i) {\n            flatCoordinates[offset++] = flatCoordinates[i];\n        }\n        flatCoordinates.length = offset;\n        this.changed();\n    };\n    Circle.prototype.getCoordinates = function () {\n        return null;\n    };\n    Circle.prototype.setCoordinates = function (coordinates, opt_layout) { };\n    /**\n     * Set the radius of the circle. The radius is in the units of the projection.\n     * @param {number} radius Radius.\n     * @api\n     */\n    Circle.prototype.setRadius = function (radius) {\n        this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n        this.changed();\n    };\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @param {number} angle Rotation angle in counter-clockwise radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n    Circle.prototype.rotate = function (angle, anchor) {\n        var center = this.getCenter();\n        var stride = this.getStride();\n        this.setCenter(rotate(center, 0, center.length, stride, angle, anchor, center));\n        this.changed();\n    };\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n    Circle.prototype.translate = function (deltaX, deltaY) {\n        var center = this.getCenter();\n        var stride = this.getStride();\n        this.setCenter(translate(center, 0, center.length, stride, deltaX, deltaY, center));\n        this.changed();\n    };\n    return Circle;\n}(SimpleGeometry));\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;\n//# sourceMappingURL=Circle.js.map","<template>\n  <div id=\"map\"></div>\n</template>\n<script setup>\n  import { onMounted } from \"vue\";\n  import \"ol/ol.css\";\n  import Circle from \"ol/geom/Circle\";\n  import Feature from \"ol/Feature\";\n  import GeoJSON from \"ol/format/GeoJSON\";\n  import Map from \"ol/Map\";\n  import View from \"ol/View\";\n  import { Circle as CircleStyle, Fill, Stroke, Style } from \"ol/style\";\n  import { XYZ, Vector as VectorSource } from \"ol/source\";\n  import { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\n  import { MAPURL, ATTRIBUTIONS } from \"@/constants\";\n  import updateMapSize from \"@/hooks/updateMapSize\";\n\n  const raster = new TileLayer({\n    source: new XYZ({\n      attributions: ATTRIBUTIONS,\n      url: MAPURL,\n      maxZoom: 20,\n    }),\n  });\n\n  const image = new CircleStyle({\n    radius: 5,\n    fill: null,\n    stroke: new Stroke({ color: \"red\", width: 1 }),\n  });\n\n  const styles = {\n    Point: new Style({\n      image: image,\n    }),\n    LineString: new Style({\n      stroke: new Stroke({\n        color: \"green\",\n        width: 1,\n      }),\n    }),\n    MultiLineString: new Style({\n      stroke: new Stroke({\n        color: \"green\",\n        width: 1,\n      }),\n    }),\n    MultiPoint: new Style({\n      image: image,\n    }),\n    MultiPolygon: new Style({\n      stroke: new Stroke({\n        color: \"yellow\",\n        width: 1,\n      }),\n      fill: new Fill({\n        color: \"rgba(255, 255, 0, 0.1)\",\n      }),\n    }),\n    Polygon: new Style({\n      stroke: new Stroke({\n        color: \"blue\",\n        lineDash: [4],\n        width: 3,\n      }),\n      fill: new Fill({\n        color: \"rgba(0, 0, 255, 0.1)\",\n      }),\n    }),\n    GeometryCollection: new Style({\n      stroke: new Stroke({\n        color: \"magenta\",\n        width: 2,\n      }),\n      fill: new Fill({\n        color: \"magenta\",\n      }),\n      image: new CircleStyle({\n        radius: 10,\n        fill: null,\n        stroke: new Stroke({\n          color: \"magenta\",\n        }),\n      }),\n    }),\n    Circle: new Style({\n      stroke: new Stroke({\n        color: \"red\",\n        width: 2,\n      }),\n      fill: new Fill({\n        color: \"rgba(255,0,0,0.2)\",\n      }),\n    }),\n  };\n\n  const styleFunction = function (feature) {\n    return styles[feature.getGeometry().getType()];\n  };\n\n  const geojsonObject = {\n    type: \"FeatureCollection\",\n    crs: {\n      type: \"name\",\n      properties: {\n        name: \"EPSG:3857\",\n      },\n    },\n    features: [\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [0, 0],\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"LineString\",\n          coordinates: [\n            [4e6, -2e6],\n            [8e6, 2e6],\n          ],\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"LineString\",\n          coordinates: [\n            [4e6, 2e6],\n            [8e6, -2e6],\n          ],\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"Polygon\",\n          coordinates: [\n            [\n              [-5e6, -1e6],\n              [-3e6, -1e6],\n              [-4e6, 1e6],\n              [-5e6, -1e6],\n            ],\n          ],\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"MultiLineString\",\n          coordinates: [\n            [\n              [-1e6, -7.5e5],\n              [-1e6, 7.5e5],\n            ],\n            [\n              [1e6, -7.5e5],\n              [1e6, 7.5e5],\n            ],\n            [\n              [-7.5e5, -1e6],\n              [7.5e5, -1e6],\n            ],\n            [\n              [-7.5e5, 1e6],\n              [7.5e5, 1e6],\n            ],\n          ],\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"MultiPolygon\",\n          coordinates: [\n            [\n              [\n                [-5e6, 6e6],\n                [-3e6, 6e6],\n                [-3e6, 8e6],\n                [-5e6, 8e6],\n                [-5e6, 6e6],\n              ],\n            ],\n            [\n              [\n                [-2e6, 6e6],\n                [0, 6e6],\n                [0, 8e6],\n                [-2e6, 8e6],\n                [-2e6, 6e6],\n              ],\n            ],\n            [\n              [\n                [1e6, 6e6],\n                [3e6, 6e6],\n                [3e6, 8e6],\n                [1e6, 8e6],\n                [1e6, 6e6],\n              ],\n            ],\n          ],\n        },\n      },\n      {\n        type: \"Feature\",\n        geometry: {\n          type: \"GeometryCollection\",\n          geometries: [\n            {\n              type: \"LineString\",\n              coordinates: [\n                [-5e6, -5e6],\n                [0, -5e6],\n              ],\n            },\n            {\n              type: \"Point\",\n              coordinates: [4e6, -5e6],\n            },\n            {\n              type: \"Polygon\",\n              coordinates: [\n                [\n                  [1e6, -6e6],\n                  [3e6, -6e6],\n                  [2e6, -4e6],\n                  [1e6, -6e6],\n                ],\n              ],\n            },\n          ],\n        },\n      },\n    ],\n  };\n\n  const vectorSource = new VectorSource({\n    features: new GeoJSON().readFeatures(geojsonObject),\n  });\n\n  vectorSource.addFeature(new Feature(new Circle([5e6, 7e6], 1e6)));\n\n  const vectorLayer = new VectorLayer({\n    source: vectorSource,\n    style: styleFunction,\n  });\n\n  onMounted(() => {\n    const map = new Map({\n      layers: [raster, vectorLayer],\n      target: \"map\",\n      view: new View({\n        center: [0, 0],\n        zoom: 2,\n      }),\n    });\n    // 侧边栏变化更新地图\n    updateMapSize(map);\n  });\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n  #map {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n</style>\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=e0eb4728&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/openlayers/openlayers/node_modules/.pnpm/vue-loader@16.8.3_@vue+compiler-sfc@3.4.6_vue@3.4.6_webpack@4.47.0/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-e0eb4728\"]])\n\nexport default __exports__","/**\n * @module ol/geom/flat/interpolate\n */\nimport { binarySearch } from '../../array.js';\nimport { lerp } from '../../math.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>} [opt_dest] Destination.\n * @param {number} [opt_dimension] Destination dimension (default is `2`)\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest, opt_dimension) {\n    var o, t;\n    var n = (end - offset) / stride;\n    if (n === 1) {\n        o = offset;\n    }\n    else if (n === 2) {\n        o = offset;\n        t = fraction;\n    }\n    else if (n !== 0) {\n        var x1 = flatCoordinates[offset];\n        var y1 = flatCoordinates[offset + 1];\n        var length_1 = 0;\n        var cumulativeLengths = [0];\n        for (var i = offset + stride; i < end; i += stride) {\n            var x2 = flatCoordinates[i];\n            var y2 = flatCoordinates[i + 1];\n            length_1 += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n            cumulativeLengths.push(length_1);\n            x1 = x2;\n            y1 = y2;\n        }\n        var target = fraction * length_1;\n        var index = binarySearch(cumulativeLengths, target);\n        if (index < 0) {\n            t =\n                (target - cumulativeLengths[-index - 2]) /\n                    (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n            o = offset + (-index - 2) * stride;\n        }\n        else {\n            o = offset + index * stride;\n        }\n    }\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var dest = opt_dest ? opt_dest : new Array(dimension);\n    for (var i = 0; i < dimension; ++i) {\n        dest[i] =\n            o === undefined\n                ? NaN\n                : t === undefined\n                    ? flatCoordinates[o + i]\n                    : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n    }\n    return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {\n    if (end == offset) {\n        return null;\n    }\n    var coordinate;\n    if (m < flatCoordinates[offset + stride - 1]) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(offset, offset + stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    else if (flatCoordinates[end - 1] < m) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(end - stride, end);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    // FIXME use O(1) search\n    if (m == flatCoordinates[offset + stride - 1]) {\n        return flatCoordinates.slice(offset, offset + stride);\n    }\n    var lo = offset / stride;\n    var hi = end / stride;\n    while (lo < hi) {\n        var mid = (lo + hi) >> 1;\n        if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n            hi = mid;\n        }\n        else {\n            lo = mid + 1;\n        }\n    }\n    var m0 = flatCoordinates[lo * stride - 1];\n    if (m == m0) {\n        return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n    }\n    var m1 = flatCoordinates[(lo + 1) * stride - 1];\n    var t = (m - m0) / (m1 - m0);\n    coordinate = [];\n    for (var i = 0; i < stride - 1; ++i) {\n        coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));\n    }\n    coordinate.push(m);\n    return coordinate;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n    if (interpolate) {\n        return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n    }\n    var coordinate;\n    if (m < flatCoordinates[stride - 1]) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(0, stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    if (flatCoordinates[flatCoordinates.length - 1] < m) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        if (offset == end) {\n            continue;\n        }\n        if (m < flatCoordinates[offset + stride - 1]) {\n            return null;\n        }\n        else if (m <= flatCoordinates[end - 1]) {\n            return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);\n        }\n        offset = end;\n    }\n    return null;\n}\n//# sourceMappingURL=interpolate.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/MultiPolygon\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport MultiPoint from './MultiPoint.js';\nimport Polygon from './Polygon.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestMultiArrayPoint, multiArrayMaxSquaredDelta, } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateMultiCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointsOfMultiArray } from './flat/interiorpoint.js';\nimport { inflateMultiCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingMultiArray } from './flat/intersectsextent.js';\nimport { linearRingssAreOriented, orientLinearRingsArray, } from './flat/orient.js';\nimport { linearRingss as linearRingssArea } from './flat/area.js';\nimport { linearRingss as linearRingssCenter } from './flat/center.js';\nimport { linearRingssContainsXY } from './flat/contains.js';\nimport { quantizeMultiArray } from './flat/simplify.js';\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\nvar MultiPolygon = /** @class */ (function (_super) {\n    __extends(MultiPolygon, _super);\n    /**\n     * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @param {Array<Array<number>>} [opt_endss] Array of ends for internal use with flat coordinates.\n     */\n    function MultiPolygon(coordinates, opt_layout, opt_endss) {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {Array<Array<number>>}\n         * @private\n         */\n        _this.endss_ = [];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.flatInteriorPointsRevision_ = -1;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.flatInteriorPoints_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.orientedRevision_ = -1;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.orientedFlatCoordinates_ = null;\n        if (!opt_endss && !Array.isArray(coordinates[0])) {\n            var layout = _this.getLayout();\n            var polygons = /** @type {Array<Polygon>} */ (coordinates);\n            var flatCoordinates = [];\n            var endss = [];\n            for (var i = 0, ii = polygons.length; i < ii; ++i) {\n                var polygon = polygons[i];\n                if (i === 0) {\n                    layout = polygon.getLayout();\n                }\n                var offset = flatCoordinates.length;\n                var ends = polygon.getEnds();\n                for (var j = 0, jj = ends.length; j < jj; ++j) {\n                    ends[j] += offset;\n                }\n                extend(flatCoordinates, polygon.getFlatCoordinates());\n                endss.push(ends);\n            }\n            opt_layout = layout;\n            coordinates = flatCoordinates;\n            opt_endss = endss;\n        }\n        if (opt_layout !== undefined && opt_endss) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n            _this.endss_ = opt_endss;\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed polygon to this multipolygon.\n     * @param {Polygon} polygon Polygon.\n     * @api\n     */\n    MultiPolygon.prototype.appendPolygon = function (polygon) {\n        /** @type {Array<number>} */\n        var ends;\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = polygon.getFlatCoordinates().slice();\n            ends = polygon.getEnds().slice();\n            this.endss_.push();\n        }\n        else {\n            var offset = this.flatCoordinates.length;\n            extend(this.flatCoordinates, polygon.getFlatCoordinates());\n            ends = polygon.getEnds().slice();\n            for (var i = 0, ii = ends.length; i < ii; ++i) {\n                ends[i] += offset;\n            }\n        }\n        this.endss_.push(ends);\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!MultiPolygon} Clone.\n     * @api\n     */\n    MultiPolygon.prototype.clone = function () {\n        var len = this.endss_.length;\n        var newEndss = new Array(len);\n        for (var i = 0; i < len; ++i) {\n            newEndss[i] = this.endss_[i].slice();\n        }\n        var multiPolygon = new MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);\n        multiPolygon.applyProperties(this);\n        return multiPolygon;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    MultiPolygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(multiArrayMaxSquaredDelta(this.flatCoordinates, 0, this.endss_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestMultiArrayPoint(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @return {boolean} Contains (x, y).\n     */\n    MultiPolygon.prototype.containsXY = function (x, y) {\n        return linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n    };\n    /**\n     * Return the area of the multipolygon on projected plane.\n     * @return {number} Area (on projected plane).\n     * @api\n     */\n    MultiPolygon.prototype.getArea = function () {\n        return linearRingssArea(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n    };\n    /**\n     * Get the coordinate array for this geometry.  This array has the structure\n     * of a GeoJSON coordinate array for multi-polygons.\n     *\n     * @param {boolean} [opt_right] Orient coordinates according to the right-hand\n     *     rule (counter-clockwise for exterior and clockwise for interior rings).\n     *     If `false`, coordinates will be oriented according to the left-hand rule\n     *     (clockwise for exterior and counter-clockwise for interior rings).\n     *     By default, coordinate orientation will depend on how the geometry was\n     *     constructed.\n     * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\n     * @api\n     */\n    MultiPolygon.prototype.getCoordinates = function (opt_right) {\n        var flatCoordinates;\n        if (opt_right !== undefined) {\n            flatCoordinates = this.getOrientedFlatCoordinates().slice();\n            orientLinearRingsArray(flatCoordinates, 0, this.endss_, this.stride, opt_right);\n        }\n        else {\n            flatCoordinates = this.flatCoordinates;\n        }\n        return inflateMultiCoordinatesArray(flatCoordinates, 0, this.endss_, this.stride);\n    };\n    /**\n     * @return {Array<Array<number>>} Endss.\n     */\n    MultiPolygon.prototype.getEndss = function () {\n        return this.endss_;\n    };\n    /**\n     * @return {Array<number>} Flat interior points.\n     */\n    MultiPolygon.prototype.getFlatInteriorPoints = function () {\n        if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n            var flatCenters = linearRingssCenter(this.flatCoordinates, 0, this.endss_, this.stride);\n            this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);\n            this.flatInteriorPointsRevision_ = this.getRevision();\n        }\n        return this.flatInteriorPoints_;\n    };\n    /**\n     * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\n     * @return {MultiPoint} Interior points as XYM coordinates, where M is\n     * the length of the horizontal intersection that the point belongs to.\n     * @api\n     */\n    MultiPolygon.prototype.getInteriorPoints = function () {\n        return new MultiPoint(this.getFlatInteriorPoints().slice(), GeometryLayout.XYM);\n    };\n    /**\n     * @return {Array<number>} Oriented flat coordinates.\n     */\n    MultiPolygon.prototype.getOrientedFlatCoordinates = function () {\n        if (this.orientedRevision_ != this.getRevision()) {\n            var flatCoordinates = this.flatCoordinates;\n            if (linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)) {\n                this.orientedFlatCoordinates_ = flatCoordinates;\n            }\n            else {\n                this.orientedFlatCoordinates_ = flatCoordinates.slice();\n                this.orientedFlatCoordinates_.length = orientLinearRingsArray(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n            }\n            this.orientedRevision_ = this.getRevision();\n        }\n        return this.orientedFlatCoordinates_;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {MultiPolygon} Simplified MultiPolygon.\n     * @protected\n     */\n    MultiPolygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        var simplifiedEndss = [];\n        simplifiedFlatCoordinates.length = quantizeMultiArray(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);\n        return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEndss);\n    };\n    /**\n     * Return the polygon at the specified index.\n     * @param {number} index Index.\n     * @return {Polygon} Polygon.\n     * @api\n     */\n    MultiPolygon.prototype.getPolygon = function (index) {\n        if (index < 0 || this.endss_.length <= index) {\n            return null;\n        }\n        var offset;\n        if (index === 0) {\n            offset = 0;\n        }\n        else {\n            var prevEnds = this.endss_[index - 1];\n            offset = prevEnds[prevEnds.length - 1];\n        }\n        var ends = this.endss_[index].slice();\n        var end = ends[ends.length - 1];\n        if (offset !== 0) {\n            for (var i = 0, ii = ends.length; i < ii; ++i) {\n                ends[i] -= offset;\n            }\n        }\n        return new Polygon(this.flatCoordinates.slice(offset, end), this.layout, ends);\n    };\n    /**\n     * Return the polygons of this multipolygon.\n     * @return {Array<Polygon>} Polygons.\n     * @api\n     */\n    MultiPolygon.prototype.getPolygons = function () {\n        var layout = this.layout;\n        var flatCoordinates = this.flatCoordinates;\n        var endss = this.endss_;\n        var polygons = [];\n        var offset = 0;\n        for (var i = 0, ii = endss.length; i < ii; ++i) {\n            var ends = endss[i].slice();\n            var end = ends[ends.length - 1];\n            if (offset !== 0) {\n                for (var j = 0, jj = ends.length; j < jj; ++j) {\n                    ends[j] -= offset;\n                }\n            }\n            var polygon = new Polygon(flatCoordinates.slice(offset, end), layout, ends);\n            polygons.push(polygon);\n            offset = end;\n        }\n        return polygons;\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    MultiPolygon.prototype.getType = function () {\n        return 'MultiPolygon';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    MultiPolygon.prototype.intersectsExtent = function (extent) {\n        return intersectsLinearRingMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the multipolygon.\n     * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    MultiPolygon.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 3);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        var endss = deflateMultiCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n        if (endss.length === 0) {\n            this.flatCoordinates.length = 0;\n        }\n        else {\n            var lastEnds = endss[endss.length - 1];\n            this.flatCoordinates.length =\n                lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n        }\n        this.changed();\n    };\n    return MultiPolygon;\n}(SimpleGeometry));\nexport default MultiPolygon;\n//# sourceMappingURL=MultiPolygon.js.map","/**\n * @module ol/geom/flat/center\n */\nimport { createEmpty, createOrUpdateFromFlatCoordinates } from '../../extent.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {Array<number>} Flat centers.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n    var flatCenters = [];\n    var extent = createEmpty();\n    for (var i = 0, ii = endss.length; i < ii; ++i) {\n        var ends = endss[i];\n        extent = createOrUpdateFromFlatCoordinates(flatCoordinates, offset, ends[0], stride);\n        flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);\n        offset = ends[ends.length - 1];\n    }\n    return flatCenters;\n}\n//# sourceMappingURL=center.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/MultiLineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { douglasPeuckerArray } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { interpolatePoint, lineStringsCoordinateAtM, } from './flat/interpolate.js';\nimport { intersectsLineStringArray } from './flat/intersectsextent.js';\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nvar MultiLineString = /** @class */ (function (_super) {\n    __extends(MultiLineString, _super);\n    /**\n     * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n     *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n     *     combination with `opt_layout` and `opt_ends` are also accepted.)\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @param {Array<number>} [opt_ends] Flat coordinate ends for internal use.\n     */\n    function MultiLineString(coordinates, opt_layout, opt_ends) {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        _this.ends_ = [];\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        if (Array.isArray(coordinates[0])) {\n            _this.setCoordinates(\n            /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (coordinates), opt_layout);\n        }\n        else if (opt_layout !== undefined && opt_ends) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n            _this.ends_ = opt_ends;\n        }\n        else {\n            var layout = _this.getLayout();\n            var lineStrings = /** @type {Array<LineString>} */ (coordinates);\n            var flatCoordinates = [];\n            var ends = [];\n            for (var i = 0, ii = lineStrings.length; i < ii; ++i) {\n                var lineString = lineStrings[i];\n                if (i === 0) {\n                    layout = lineString.getLayout();\n                }\n                extend(flatCoordinates, lineString.getFlatCoordinates());\n                ends.push(flatCoordinates.length);\n            }\n            _this.setFlatCoordinates(layout, flatCoordinates);\n            _this.ends_ = ends;\n        }\n        return _this;\n    }\n    /**\n     * Append the passed linestring to the multilinestring.\n     * @param {LineString} lineString LineString.\n     * @api\n     */\n    MultiLineString.prototype.appendLineString = function (lineString) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = lineString.getFlatCoordinates().slice();\n        }\n        else {\n            extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n        }\n        this.ends_.push(this.flatCoordinates.length);\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!MultiLineString} Clone.\n     * @api\n     */\n    MultiLineString.prototype.clone = function () {\n        var multiLineString = new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n        multiLineString.applyProperties(this);\n        return multiLineString;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    MultiLineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * Returns the coordinate at `m` using linear interpolation, or `null` if no\n     * such coordinate exists.\n     *\n     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n     * M will return the first coordinate and Ms greater than the last M will\n     * return the last coordinate.\n     *\n     * `opt_interpolate` controls interpolation between consecutive LineStrings\n     * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n     * will be linearly interpolated between the last coordinate of one LineString\n     * and the first coordinate of the next LineString.  If `opt_interpolate` is\n     * `false` then the function will return `null` for Ms falling between\n     * LineStrings.\n     *\n     * @param {number} m M.\n     * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n     * @param {boolean} [opt_interpolate] Interpolate. Default is `false`.\n     * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n     * @api\n     */\n    MultiLineString.prototype.getCoordinateAtM = function (m, opt_extrapolate, opt_interpolate) {\n        if ((this.layout != GeometryLayout.XYM &&\n            this.layout != GeometryLayout.XYZM) ||\n            this.flatCoordinates.length === 0) {\n            return null;\n        }\n        var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n        var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n        return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);\n    };\n    /**\n     * Return the coordinates of the multilinestring.\n     * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n     * @api\n     */\n    MultiLineString.prototype.getCoordinates = function () {\n        return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);\n    };\n    /**\n     * @return {Array<number>} Ends.\n     */\n    MultiLineString.prototype.getEnds = function () {\n        return this.ends_;\n    };\n    /**\n     * Return the linestring at the specified index.\n     * @param {number} index Index.\n     * @return {LineString} LineString.\n     * @api\n     */\n    MultiLineString.prototype.getLineString = function (index) {\n        if (index < 0 || this.ends_.length <= index) {\n            return null;\n        }\n        return new LineString(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n    };\n    /**\n     * Return the linestrings of this multilinestring.\n     * @return {Array<LineString>} LineStrings.\n     * @api\n     */\n    MultiLineString.prototype.getLineStrings = function () {\n        var flatCoordinates = this.flatCoordinates;\n        var ends = this.ends_;\n        var layout = this.layout;\n        /** @type {Array<LineString>} */\n        var lineStrings = [];\n        var offset = 0;\n        for (var i = 0, ii = ends.length; i < ii; ++i) {\n            var end = ends[i];\n            var lineString = new LineString(flatCoordinates.slice(offset, end), layout);\n            lineStrings.push(lineString);\n            offset = end;\n        }\n        return lineStrings;\n    };\n    /**\n     * @return {Array<number>} Flat midpoints.\n     */\n    MultiLineString.prototype.getFlatMidpoints = function () {\n        var midpoints = [];\n        var flatCoordinates = this.flatCoordinates;\n        var offset = 0;\n        var ends = this.ends_;\n        var stride = this.stride;\n        for (var i = 0, ii = ends.length; i < ii; ++i) {\n            var end = ends[i];\n            var midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);\n            extend(midpoints, midpoint);\n            offset = end;\n        }\n        return midpoints;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {MultiLineString} Simplified MultiLineString.\n     * @protected\n     */\n    MultiLineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        var simplifiedEnds = [];\n        simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n        return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    MultiLineString.prototype.getType = function () {\n        return 'MultiLineString';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    MultiLineString.prototype.intersectsExtent = function (extent) {\n        return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the multilinestring.\n     * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n     * @param {GeometryLayout} [opt_layout] Layout.\n     * @api\n     */\n    MultiLineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 2);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n        this.changed();\n    };\n    return MultiLineString;\n}(SimpleGeometry));\nexport default MultiLineString;\n//# sourceMappingURL=MultiLineString.js.map","/**\n * @module ol/format/Feature\n */\nimport Units from '../proj/Units.js';\nimport { abstract } from '../util.js';\nimport { assign } from '../obj.js';\nimport { equivalent as equivalentProjection, get as getProjection, transformExtent, } from '../proj.js';\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\n * This is only required when reading data with tile pixels as geometry units. When configured,\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\n * provided.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */\n/**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */\n/**\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */\nvar FeatureFormat = /** @class */ (function () {\n    function FeatureFormat() {\n        /**\n         * @protected\n         * @type {import(\"../proj/Projection.js\").default|undefined}\n         */\n        this.dataProjection = undefined;\n        /**\n         * @protected\n         * @type {import(\"../proj/Projection.js\").default|undefined}\n         */\n        this.defaultFeatureProjection = undefined;\n        /**\n         * A list media types supported by the format in descending order of preference.\n         * @type {Array<string>}\n         */\n        this.supportedMediaTypes = null;\n    }\n    /**\n     * Adds the data projection to the read options.\n     * @param {Document|Element|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Options.\n     * @return {ReadOptions|undefined} Options.\n     * @protected\n     */\n    FeatureFormat.prototype.getReadOptions = function (source, opt_options) {\n        var options;\n        if (opt_options) {\n            var dataProjection = opt_options.dataProjection\n                ? getProjection(opt_options.dataProjection)\n                : this.readProjection(source);\n            if (opt_options.extent &&\n                dataProjection &&\n                dataProjection.getUnits() === Units.TILE_PIXELS) {\n                dataProjection = getProjection(dataProjection);\n                dataProjection.setWorldExtent(opt_options.extent);\n            }\n            options = {\n                dataProjection: dataProjection,\n                featureProjection: opt_options.featureProjection,\n            };\n        }\n        return this.adaptOptions(options);\n    };\n    /**\n     * Sets the `dataProjection` on the options, if no `dataProjection`\n     * is set.\n     * @param {WriteOptions|ReadOptions|undefined} options\n     *     Options.\n     * @protected\n     * @return {WriteOptions|ReadOptions|undefined}\n     *     Updated options.\n     */\n    FeatureFormat.prototype.adaptOptions = function (options) {\n        return assign({\n            dataProjection: this.dataProjection,\n            featureProjection: this.defaultFeatureProjection,\n        }, options);\n    };\n    /**\n     * @abstract\n     * @return {Type} The format type.\n     */\n    FeatureFormat.prototype.getType = function () {\n        return abstract();\n    };\n    /**\n     * Read a single feature from a source.\n     *\n     * @abstract\n     * @param {Document|Element|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Read options.\n     * @return {import(\"../Feature.js\").FeatureLike} Feature.\n     */\n    FeatureFormat.prototype.readFeature = function (source, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read all features from a source.\n     *\n     * @abstract\n     * @param {Document|Element|ArrayBuffer|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Read options.\n     * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n     */\n    FeatureFormat.prototype.readFeatures = function (source, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read a single geometry from a source.\n     *\n     * @abstract\n     * @param {Document|Element|Object|string} source Source.\n     * @param {ReadOptions} [opt_options] Read options.\n     * @return {import(\"../geom/Geometry.js\").default} Geometry.\n     */\n    FeatureFormat.prototype.readGeometry = function (source, opt_options) {\n        return abstract();\n    };\n    /**\n     * Read the projection from a source.\n     *\n     * @abstract\n     * @param {Document|Element|Object|string} source Source.\n     * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n     */\n    FeatureFormat.prototype.readProjection = function (source) {\n        return abstract();\n    };\n    /**\n     * Encode a feature in this format.\n     *\n     * @abstract\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {WriteOptions} [opt_options] Write options.\n     * @return {string|ArrayBuffer} Result.\n     */\n    FeatureFormat.prototype.writeFeature = function (feature, opt_options) {\n        return abstract();\n    };\n    /**\n     * Encode an array of features in this format.\n     *\n     * @abstract\n     * @param {Array<import(\"../Feature.js\").default>} features Features.\n     * @param {WriteOptions} [opt_options] Write options.\n     * @return {string|ArrayBuffer} Result.\n     */\n    FeatureFormat.prototype.writeFeatures = function (features, opt_options) {\n        return abstract();\n    };\n    /**\n     * Write a single geometry in this format.\n     *\n     * @abstract\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @param {WriteOptions} [opt_options] Write options.\n     * @return {string|ArrayBuffer} Result.\n     */\n    FeatureFormat.prototype.writeGeometry = function (geometry, opt_options) {\n        return abstract();\n    };\n    return FeatureFormat;\n}());\nexport default FeatureFormat;\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {boolean} write Set to true for writing, false for reading.\n * @param {WriteOptions|ReadOptions} [opt_options] Options.\n * @return {import(\"../geom/Geometry.js\").default} Transformed geometry.\n */\nexport function transformGeometryWithOptions(geometry, write, opt_options) {\n    var featureProjection = opt_options\n        ? getProjection(opt_options.featureProjection)\n        : null;\n    var dataProjection = opt_options\n        ? getProjection(opt_options.dataProjection)\n        : null;\n    var transformed;\n    if (featureProjection &&\n        dataProjection &&\n        !equivalentProjection(featureProjection, dataProjection)) {\n        transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);\n    }\n    else {\n        transformed = geometry;\n    }\n    if (write &&\n        opt_options &&\n        /** @type {WriteOptions} */ (opt_options).decimals !== undefined) {\n        var power_1 = Math.pow(10, \n        /** @type {WriteOptions} */ (opt_options).decimals);\n        // if decimals option on write, round each coordinate appropriately\n        /**\n         * @param {Array<number>} coordinates Coordinates.\n         * @return {Array<number>} Transformed coordinates.\n         */\n        var transform = function (coordinates) {\n            for (var i = 0, ii = coordinates.length; i < ii; ++i) {\n                coordinates[i] = Math.round(coordinates[i] * power_1) / power_1;\n            }\n            return coordinates;\n        };\n        if (transformed === geometry) {\n            transformed = geometry.clone();\n        }\n        transformed.applyTransform(transform);\n    }\n    return transformed;\n}\n/**\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {ReadOptions} [opt_options] Read options.\n * @return {import(\"../extent.js\").Extent} Transformed extent.\n */\nexport function transformExtentWithOptions(extent, opt_options) {\n    var featureProjection = opt_options\n        ? getProjection(opt_options.featureProjection)\n        : null;\n    var dataProjection = opt_options\n        ? getProjection(opt_options.dataProjection)\n        : null;\n    if (featureProjection &&\n        dataProjection &&\n        !equivalentProjection(featureProjection, dataProjection)) {\n        return transformExtent(extent, dataProjection, featureProjection);\n    }\n    else {\n        return extent;\n    }\n}\n//# sourceMappingURL=Feature.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/LineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { forEach as forEachSegment } from './flat/segments.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nvar LineString = /** @class */ (function (_super) {\n    __extends(LineString, _super);\n    /**\n     * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function LineString(coordinates, opt_layout) {\n        var _this = _super.call(this) || this;\n        /**\n         * @private\n         * @type {import(\"../coordinate.js\").Coordinate}\n         */\n        _this.flatMidpoint_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.flatMidpointRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed coordinate to the coordinates of the linestring.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @api\n     */\n    LineString.prototype.appendCoordinate = function (coordinate) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = coordinate.slice();\n        }\n        else {\n            extend(this.flatCoordinates, coordinate);\n        }\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!LineString} Clone.\n     * @api\n     */\n    LineString.prototype.clone = function () {\n        var lineString = new LineString(this.flatCoordinates.slice(), this.layout);\n        lineString.applyProperties(this);\n        return lineString;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    LineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * Iterate over each segment, calling the provided callback.\n     * If the callback returns a truthy value the function returns that\n     * value immediately. Otherwise the function returns `false`.\n     *\n     * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n     *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n     * @return {T|boolean} Value.\n     * @template T,S\n     * @api\n     */\n    LineString.prototype.forEachSegment = function (callback) {\n        return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n    };\n    /**\n     * Returns the coordinate at `m` using linear interpolation, or `null` if no\n     * such coordinate exists.\n     *\n     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n     * M will return the first coordinate and Ms greater than the last M will\n     * return the last coordinate.\n     *\n     * @param {number} m M.\n     * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n     * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n     * @api\n     */\n    LineString.prototype.getCoordinateAtM = function (m, opt_extrapolate) {\n        if (this.layout != GeometryLayout.XYM &&\n            this.layout != GeometryLayout.XYZM) {\n            return null;\n        }\n        var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n        return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n    };\n    /**\n     * Return the coordinates of the linestring.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n    LineString.prototype.getCoordinates = function () {\n        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * Return the coordinate at the provided fraction along the linestring.\n     * The `fraction` is a number between 0 and 1, where 0 is the start of the\n     * linestring and 1 is the end.\n     * @param {number} fraction Fraction.\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_dest] Optional coordinate whose values will\n     *     be modified. If not provided, a new coordinate will be returned.\n     * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n     * @api\n     */\n    LineString.prototype.getCoordinateAt = function (fraction, opt_dest) {\n        return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest, this.stride);\n    };\n    /**\n     * Return the length of the linestring on projected plane.\n     * @return {number} Length (on projected plane).\n     * @api\n     */\n    LineString.prototype.getLength = function () {\n        return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * @return {Array<number>} Flat midpoint.\n     */\n    LineString.prototype.getFlatMidpoint = function () {\n        if (this.flatMidpointRevision_ != this.getRevision()) {\n            this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n            this.flatMidpointRevision_ = this.getRevision();\n        }\n        return this.flatMidpoint_;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {LineString} Simplified LineString.\n     * @protected\n     */\n    LineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    LineString.prototype.getType = function () {\n        return 'LineString';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    LineString.prototype.intersectsExtent = function (extent) {\n        return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the linestring.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    LineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 1);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    };\n    return LineString;\n}(SimpleGeometry));\nexport default LineString;\n//# sourceMappingURL=LineString.js.map"],"sourceRoot":""}