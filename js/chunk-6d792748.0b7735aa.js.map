{"version":3,"sources":["webpack:///./src/hooks/updateMapSize.js","webpack:///./src/views/drawing/modify-features/index.vue","webpack:///./src/views/drawing/modify-features/index.vue?c82e","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/interaction/Modify.js","webpack:///./src/views/drawing/modify-features/index.vue?a364","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/geom/flat/interpolate.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/interaction/Select.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/geom/LineString.js"],"names":["map","targetNode","document","querySelector","observer","MutationObserver","mutationsList","mutation","type","attributeName","i","length","updateSize","observe","attributes","childList","subtree","onBeforeUnmount","disconnect","pointFeature","Feature","Point","lineFeature","LineString","polygonFeature","Polygon","source","VectorSource","features","vector","VectorLayer","style","Style","fill","Fill","color","stroke","Stroke","width","image","Circle","radius","raster","TileLayer","XYZ","attributions","ATTRIBUTIONS","url","MAPURL","maxZoom","Modify","init","this","select","Select","addInteraction","modify","ModifyInteraction","getFeatures","setEvents","selectedFeatures","on","forEach","remove","setActive","active","onMounted","Map","target","layers","view","View","projection","center","zoom","updateMapSize","addLayer","__exports__","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","tempExtent","tempSegment","ModifyEventType","ModifyEvent","_super","mapBrowserEvent","_this","options","once","un","boundHandleFeatureChange_","handleFeatureChange_","bind","condition_","condition","defaultDeleteCondition_","deleteCondition_","deleteCondition","insertVertexCondition_","insertVertexCondition","vertexFeature_","vertexSegments_","lastPixel_","ignoreNextSingleClick_","featuresBeingModified_","rBush_","pixelTolerance_","undefined","pixelTolerance","snappedToVertex_","changingFeature_","dragSegments_","overlay_","useSpatialIndex","wrapX","feature","resolution","updateWhileAnimating","updateWhileInteracting","SEGMENT_WRITERS_","writePointGeometry_","writeLineStringGeometry_","writePolygonGeometry_","writeMultiPointGeometry_","writeMultiLineStringGeometry_","writeMultiPolygonGeometry_","writeCircleGeometry_","writeGeometryCollectionGeometry_","source_","hitDetection_","addEventListener","ADDFEATURE","handleSourceAdd_","REMOVEFEATURE","handleSourceRemove_","Error","hitDetection","features_","addFeature_","ADD","handleFeatureAdd_","REMOVE","handleFeatureRemove_","lastPointerEvent_","delta_","snapToPointer_","snapToPointer","geometry","getGeometry","writer","getType","getMap","isRendered","getActive","handlePointerAtPixel_","CHANGE","willModifyFeatures_","evt","segments","getArray","ii","segment","s","ss","indexOf","push","getLength","dispatchEvent","removeFeature_","removeFeatureSegmentData_","getSource","removeFeature","removeEventListener","rBush","nodesToRemove","node","nodeToRemove","j","splice","setMap","getOverlay","event","coordinates","getCoordinates","segmentData","insert","getExtent","points","depth","index","slice","lines","jj","rings","polygons","k","kk","getCenter","centerSegmentData","circumferenceSegmentData","featureSegments","circleGeometry","userProjection","getView","getProjection","clone","transform","geometries","getGeometriesArray","geometry_1","createOrUpdateVertexFeature_","vertexFeature","setCoordinates","addFeature","set","handleEvent","originalEvent","getInteracting","POINTERMOVE","handlingDownUpSequence","handlePointerMove_","handled","SINGLECLICK","removePoint","handleDragEvent","vertex","coordinate","dragSegment","getStride","setCenter","setRadius","getRadius","setGeometryCoordinates_","handleDownEvent","pixelCoordinate","pixel","insertVertices","vertexExtent","segmentDataMatches","getInExtent","componentSegments","sort","compareIndexes","segmentDataMatch","uid","join","closestVertex","closestOnSegmentData","insertVertex_","handleUpEvent","update","opt_coordinate","nodes","hitPointGeometry","getCoordinateFromPixel","layerFilter","layer","forEachFeatureAtPixel","getFlatCoordinates","viewExtent","buffer","getResolution","box","a","projectedDistanceToSegmentDataSquared","closestSegment","vertexPixel","getPixelFromCoordinate","dist","vertexSegments","pixel1","pixel2","squaredDist1","squaredDist2","Math","sqrt","min","geometryUid","rTree","updateSegmentIndices_","newSegmentData","newSegmentData2","POINTERDRAG","removed","removeVertex_","component","left","newIndex","right","dragSegments","segmentsByFeature","deleted","pop","delta","forEachInExtent","pointCoordinates","distanceToCenterSquared","distanceToCircumference","getClosestPoint","interpolatePoint","flatCoordinates","offset","end","stride","fraction","opt_dest","opt_dimension","o","t","n","x1","y1","length_1","cumulativeLengths","x2","y2","dimension","dest","NaN","lineStringCoordinateAtM","m","extrapolate","lo","hi","mid","m0","lineStringsCoordinateAtM","ends","interpolate","SelectEventType","SelectEvent","selected","deselected","originalFeatureStyles","opt_options","styles","boundAddFeature_","boundRemoveFeature_","addCondition_","addCondition","removeCondition_","removeCondition","toggleCondition_","toggleCondition","multi_","multi","filter_","filter","hitTolerance_","hitTolerance","style_","layers_1","layerFilter_","featureLayerAssociation_","addFeatureLayerAssociation_","getHitTolerance","getLayer","setHitTolerance","restorePreviousStyle_","applySelectedStyle_","element","getAllLayers","find","hasFeature","getStyle","key","setStyle","interactions","getInteractions","interaction","lastIndexOf","removeFeatureLayerAssociation_","add","toggle","item","extend","opt_layout","flatMidpoint_","flatMidpointRevision_","maxDelta_","maxDeltaRevision_","isArray","setFlatCoordinates","appendCoordinate","changed","lineString","layout","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getRevision","forEachSegment","callback","getCoordinateAtM","opt_extrapolate","XYM","XYZM","getCoordinateAt","getFlatMidpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","XY","intersectsExtent","extent","setLayout"],"mappings":"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","file":"js/chunk-6d792748.0b7735aa.js","sourcesContent":["import { onBeforeUnmount } from \"vue\";\n\n/**\n * 监听侧边栏，侧边栏发生变化更新地图\n * @param {ol.Map} map 地图实例\n */\nexport default (...map) => {\n  // 选择需要观察变动的节点\n  const targetNode = document.querySelector(\n    \".el-aside .menu .el-scrollbar__view\"\n  );\n  // 观察器的配置（需要观察什么变动）\n  const config = { attributes: true, childList: true, subtree: true };\n  // 当观察到变动时执行的回调函数\n  const callback = function (mutationsList) {\n    // Use traditional 'for loops' for IE 11\n    for (let mutation of mutationsList) {\n      if (mutation.type === \"childList\") {\n        // console.log(\"已添加或删除子节点。\");\n      } else if (\n        mutation.type === \"attributes\" &&\n        mutation.attributeName === \"style\"\n      ) {\n        for (let i = 0; i < map.length; i++) {\n          map[i].updateSize();\n        }\n\n        // console.log(\"这个 \" + mutation.attributeName + \" 属性被修改。\");\n      }\n    }\n  };\n  // 创建一个观察器实例并传入回调函数\n  const observer = new MutationObserver(callback);\n\n  // 以上述配置开始观察目标节点\n  observer.observe(targetNode, config);\n\n  //卸载前\n  onBeforeUnmount(() => {\n    observer.disconnect();\n  });\n};\n","<template>\n  <div id=\"menu\">\n    修改几何图形：请用鼠标选择修改要素，选中后再修改其几何信息\n  </div>\n  <div id=\"map\"></div>\n</template>\n\n<script setup>\n  import \"ol/ol.css\";\n  import { onMounted } from \"vue\";\n  import { Map, View, Feature } from \"ol\";\n  import { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\n  import { XYZ, Vector as VectorSource } from \"ol/source\";\n  import { Style, Fill, Stroke, Circle } from \"ol/style\";\n  import { Select, Modify as ModifyInteraction } from \"ol/interaction\";\n  import { Polygon, Point, LineString } from \"ol/geom\";\n  import { MAPURL, ATTRIBUTIONS } from \"@/constants\";\n  import updateMapSize from \"@/hooks/updateMapSize\";\n\n  //绘制的几何图形要素\n  const pointFeature = new Feature(new Point([114.1947, 30.5255]));\n  const lineFeature = new Feature(\n    new LineString([\n      [114.2218, 30.5695],\n      [114.2829, 30.4912],\n    ])\n  );\n  const polygonFeature = new Feature(\n    new Polygon([\n      [\n        [114.2757, 30.5822],\n        [114.3526, 30.5879],\n        [114.3608, 30.5367],\n        [114.3234, 30.5187],\n        [114.2826, 30.553],\n      ],\n    ])\n  );\n  //实例化一个矢量图层Vector作为绘制层\n  const source = new VectorSource({\n    features: [pointFeature, lineFeature, polygonFeature],\n  });\n  const vector = new VectorLayer({\n    source: source,\n    style: new Style({\n      fill: new Fill({\n        color: \"rgba(255, 255, 255, 0.2)\",\n      }),\n      stroke: new Stroke({\n        color: \"#ff0000\",\n        width: 2,\n      }),\n      image: new Circle({\n        radius: 7,\n        fill: new Fill({\n          color: \"#ff0000\",\n        }),\n      }),\n    }),\n  });\n  let map = null;\n  const raster = new TileLayer({\n    source: new XYZ({\n      attributions: ATTRIBUTIONS,\n      url: MAPURL,\n      maxZoom: 20,\n    }),\n  });\n\n  const initMap = () => {\n    map = new Map({\n      //初始化map\n      target: \"map\",\n      //地图容器中加载的图层\n      layers: [\n        //加载瓦片图层数据\n        raster,\n      ],\n      view: new View({\n        projection: \"EPSG:4326\", // 坐标系，有EPSG:4326和EPSG:3 857\n        center: [114.2905, 30.5607],\n        //地图初始显示级别\n        zoom: 12,\n      }),\n    });\n    // 侧边栏变化更新地图\n    updateMapSize(map);\n  };\n\n  //定义修改几何图形功能控件\n  const Modify = {\n    init: function () {\n      //初始化一个交互选择控件,并添加到地图容器中\n      this.select = new Select();\n      map.addInteraction(this.select);\n      //初始化一个交互编辑控件，并添加到地图容器中\n      this.modify = new ModifyInteraction({\n        //选中的要素\n        features: this.select.getFeatures(),\n      });\n      map.addInteraction(this.modify);\n      //设置几何图形变更的处理\n      this.setEvents();\n    },\n    setEvents: function () {\n      //选中的要素\n      const selectedFeatures = this.select.getFeatures();\n      //添加选中要素变更事件\n      this.select.on(\"change:active\", () => {\n        selectedFeatures.forEach(selectedFeatures.remove, selectedFeatures);\n      });\n    },\n    setActive: function (active) {\n      //激活选择要素控件\n      this.select.setActive(active);\n      //激活修改要素控件\n      this.modify.setActive(active);\n    },\n  };\n\n  onMounted(() => {\n    initMap();\n    //将绘制层添加到地图容器中\n    map.addLayer(vector);\n    //初始化几何图形修改控件\n    Modify.init();\n    //激活几何图形修改控件;\n    Modify.setActive(true);\n  });\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n  #map {\n    position: absolute;\n    top: 50px;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n  #menu {\n    height: 50px;\n    line-height: 50px;\n    text-align: center;\n  }\n  .mobile #menu {\n    font-size: 12px;\n  }\n</style>\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=471ab784&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/openlayers/openlayers/node_modules/.pnpm/vue-loader@16.8.3_@vue+compiler-sfc@3.4.6_vue@3.4.6_webpack@4.47.0/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-471ab784\"]])\n\nexport default __exports__","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick, } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent, } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals, includes } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent, } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n    /**\n     * Triggered upon feature modification start\n     * @event ModifyEvent#modifystart\n     * @api\n     */\n    MODIFYSTART: 'modifystart',\n    /**\n     * Triggered upon feature modification end\n     * @event ModifyEvent#modifyend\n     * @api\n     */\n    MODIFYEND: 'modifyend',\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nvar ModifyEvent = /** @class */ (function (_super) {\n    __extends(ModifyEvent, _super);\n    /**\n     * @param {ModifyEventType} type Type.\n     * @param {Collection<import(\"../Feature\").FeatureLike>} features\n     * The features modified.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     */\n    function ModifyEvent(type, features, mapBrowserEvent) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The features being modified.\n         * @type {Collection<import(\"../Feature\").FeatureLike>}\n         * @api\n         */\n        _this.features = features;\n        /**\n         * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @api\n         */\n        _this.mapBrowserEvent = mapBrowserEvent;\n        return _this;\n    }\n    return ModifyEvent;\n}(Event));\nexport { ModifyEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /** @class */ (function (_super) {\n    __extends(Modify, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function Modify(options) {\n        var _this = _super.call(this, /** @type {import(\"./Pointer.js\").Options} */ (options)) || this;\n        /***\n         * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {ModifyOnSignature<void>}\n         */\n        _this.un;\n        /** @private */\n        _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : primaryAction;\n        /**\n         * @private\n         * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n         * @return {boolean} Combined condition result.\n         */\n        _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n            return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n        };\n        /**\n         * @type {import(\"../events/condition.js\").Condition}\n         * @private\n         */\n        _this.deleteCondition_ = options.deleteCondition\n            ? options.deleteCondition\n            : _this.defaultDeleteCondition_;\n        /**\n         * @type {import(\"../events/condition.js\").Condition}\n         * @private\n         */\n        _this.insertVertexCondition_ = options.insertVertexCondition\n            ? options.insertVertexCondition\n            : always;\n        /**\n         * Editing vertex.\n         * @type {Feature<Point>}\n         * @private\n         */\n        _this.vertexFeature_ = null;\n        /**\n         * Segments intersecting {@link this.vertexFeature_} by segment uid.\n         * @type {Object<string, boolean>}\n         * @private\n         */\n        _this.vertexSegments_ = null;\n        /**\n         * @type {import(\"../pixel.js\").Pixel}\n         * @private\n         */\n        _this.lastPixel_ = [0, 0];\n        /**\n         * Tracks if the next `singleclick` event should be ignored to prevent\n         * accidental deletion right after vertex creation.\n         * @type {boolean}\n         * @private\n         */\n        _this.ignoreNextSingleClick_ = false;\n        /**\n         * @type {Collection<import(\"../Feature\").FeatureLike>}\n         * @private\n         */\n        _this.featuresBeingModified_ = null;\n        /**\n         * Segment RTree for each layer\n         * @type {RBush<SegmentData>}\n         * @private\n         */\n        _this.rBush_ = new RBush();\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.pixelTolerance_ =\n            options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.snappedToVertex_ = false;\n        /**\n         * Indicate whether the interaction is currently changing a feature's\n         * coordinates.\n         * @type {boolean}\n         * @private\n         */\n        _this.changingFeature_ = false;\n        /**\n         * @type {Array}\n         * @private\n         */\n        _this.dragSegments_ = [];\n        /**\n         * Draw overlay where sketch features are drawn.\n         * @type {VectorLayer}\n         * @private\n         */\n        _this.overlay_ = new VectorLayer({\n            source: new VectorSource({\n                useSpatialIndex: false,\n                wrapX: !!options.wrapX,\n            }),\n            style: options.style ? options.style : getDefaultStyleFunction(),\n            updateWhileAnimating: true,\n            updateWhileInteracting: true,\n        });\n        /**\n         * @const\n         * @private\n         * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n         */\n        _this.SEGMENT_WRITERS_ = {\n            'Point': _this.writePointGeometry_.bind(_this),\n            'LineString': _this.writeLineStringGeometry_.bind(_this),\n            'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n            'Polygon': _this.writePolygonGeometry_.bind(_this),\n            'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n            'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n            'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n            'Circle': _this.writeCircleGeometry_.bind(_this),\n            'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this),\n        };\n        /**\n         * @type {VectorSource}\n         * @private\n         */\n        _this.source_ = null;\n        /**\n         * @type {boolean|import(\"../layer/BaseVector\").default}\n         */\n        _this.hitDetection_ = null;\n        var features;\n        if (options.features) {\n            features = options.features;\n        }\n        else if (options.source) {\n            _this.source_ = options.source;\n            features = new Collection(_this.source_.getFeatures());\n            _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n            _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n        }\n        if (!features) {\n            throw new Error('The modify interaction requires features, a source or a layer');\n        }\n        if (options.hitDetection) {\n            _this.hitDetection_ = options.hitDetection;\n        }\n        /**\n         * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n         * @private\n         */\n        _this.features_ = features;\n        _this.features_.forEach(_this.addFeature_.bind(_this));\n        _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n        _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n        /**\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @private\n         */\n        _this.lastPointerEvent_ = null;\n        /**\n         * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n         * @type {Array<number>}\n         */\n        _this.delta_ = [0, 0];\n        /**\n         * @private\n         */\n        _this.snapToPointer_ =\n            options.snapToPointer === undefined\n                ? !_this.hitDetection_\n                : options.snapToPointer;\n        return _this;\n    }\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.addFeature_ = function (feature) {\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n            if (writer) {\n                writer(feature, geometry);\n            }\n        }\n        var map = this.getMap();\n        if (map && map.isRendered() && this.getActive()) {\n            this.handlePointerAtPixel_(this.lastPixel_, map);\n        }\n        feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n     * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n     * @private\n     */\n    Modify.prototype.willModifyFeatures_ = function (evt, segments) {\n        if (!this.featuresBeingModified_) {\n            this.featuresBeingModified_ = new Collection();\n            var features = this.featuresBeingModified_.getArray();\n            for (var i = 0, ii = segments.length; i < ii; ++i) {\n                var segment = segments[i];\n                for (var s = 0, ss = segment.length; s < ss; ++s) {\n                    var feature = segment[s].feature;\n                    if (feature && features.indexOf(feature) === -1) {\n                        this.featuresBeingModified_.push(feature);\n                    }\n                }\n            }\n            if (this.featuresBeingModified_.getLength() === 0) {\n                this.featuresBeingModified_ = null;\n            }\n            else {\n                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.removeFeature_ = function (feature) {\n        this.removeFeatureSegmentData_(feature);\n        // Remove the vertex feature if the collection of candidate features is empty.\n        if (this.vertexFeature_ && this.features_.getLength() === 0) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n        feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    };\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n        var rBush = this.rBush_;\n        /** @type {Array<SegmentData>} */\n        var nodesToRemove = [];\n        rBush.forEach(\n        /**\n         * @param {SegmentData} node RTree node.\n         */\n        function (node) {\n            if (feature === node.feature) {\n                nodesToRemove.push(node);\n            }\n        });\n        for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n            var nodeToRemove = nodesToRemove[i];\n            for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n                if (this.dragSegments_[j][0] === nodeToRemove) {\n                    this.dragSegments_.splice(j, 1);\n                }\n            }\n            rBush.remove(nodeToRemove);\n        }\n    };\n    /**\n     * Activate or deactivate the interaction.\n     * @param {boolean} active Active.\n     * @observable\n     * @api\n     */\n    Modify.prototype.setActive = function (active) {\n        if (this.vertexFeature_ && !active) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n        _super.prototype.setActive.call(this, active);\n    };\n    /**\n     * Remove the interaction from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    Modify.prototype.setMap = function (map) {\n        this.overlay_.setMap(map);\n        _super.prototype.setMap.call(this, map);\n    };\n    /**\n     * Get the overlay layer that this interaction renders the modification point or vertex to.\n     * @return {VectorLayer} Overlay layer.\n     * @api\n     */\n    Modify.prototype.getOverlay = function () {\n        return this.overlay_;\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    Modify.prototype.handleSourceAdd_ = function (event) {\n        if (event.feature) {\n            this.features_.push(event.feature);\n        }\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    Modify.prototype.handleSourceRemove_ = function (event) {\n        if (event.feature) {\n            this.features_.remove(event.feature);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureAdd_ = function (evt) {\n        this.addFeature_(/** @type {Feature} */ (evt.element));\n    };\n    /**\n     * @param {import(\"../events/Event.js\").default} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureChange_ = function (evt) {\n        if (!this.changingFeature_) {\n            var feature = /** @type {Feature} */ (evt.target);\n            this.removeFeature_(feature);\n            this.addFeature_(feature);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureRemove_ = function (evt) {\n        var feature = /** @type {Feature} */ (evt.element);\n        this.removeFeature_(feature);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {Point} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        /** @type {SegmentData} */\n        var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            segment: [coordinates, coordinates],\n        };\n        this.rBush_.insert(geometry.getExtent(), segmentData);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n        var points = geometry.getCoordinates();\n        for (var i = 0, ii = points.length; i < ii; ++i) {\n            var coordinates = points[i];\n            /** @type {SegmentData} */\n            var segmentData = {\n                feature: feature,\n                geometry: geometry,\n                depth: [i],\n                index: i,\n                segment: [coordinates, coordinates],\n            };\n            this.rBush_.insert(geometry.getExtent(), segmentData);\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n            var segment = coordinates.slice(i, i + 2);\n            /** @type {SegmentData} */\n            var segmentData = {\n                feature: feature,\n                geometry: geometry,\n                index: i,\n                segment: segment,\n            };\n            this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n        var lines = geometry.getCoordinates();\n        for (var j = 0, jj = lines.length; j < jj; ++j) {\n            var coordinates = lines[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                /** @type {SegmentData} */\n                var segmentData = {\n                    feature: feature,\n                    geometry: geometry,\n                    depth: [j],\n                    index: i,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n        var rings = geometry.getCoordinates();\n        for (var j = 0, jj = rings.length; j < jj; ++j) {\n            var coordinates = rings[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                /** @type {SegmentData} */\n                var segmentData = {\n                    feature: feature,\n                    geometry: geometry,\n                    depth: [j],\n                    index: i,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n        var polygons = geometry.getCoordinates();\n        for (var k = 0, kk = polygons.length; k < kk; ++k) {\n            var rings = polygons[k];\n            for (var j = 0, jj = rings.length; j < jj; ++j) {\n                var coordinates = rings[j];\n                for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                    var segment = coordinates.slice(i, i + 2);\n                    /** @type {SegmentData} */\n                    var segmentData = {\n                        feature: feature,\n                        geometry: geometry,\n                        depth: [j, k],\n                        index: i,\n                        segment: segment,\n                    };\n                    this.rBush_.insert(boundingExtent(segment), segmentData);\n                }\n            }\n        }\n    };\n    /**\n     * We convert a circle into two segments.  The segment at index\n     * {@link CIRCLE_CENTER_INDEX} is the\n     * circle's center (a point).  The segment at index\n     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n     * the circumference, and is not a line segment.\n     *\n     * @param {Feature} feature Feature.\n     * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCenter();\n        /** @type {SegmentData} */\n        var centerSegmentData = {\n            feature: feature,\n            geometry: geometry,\n            index: CIRCLE_CENTER_INDEX,\n            segment: [coordinates, coordinates],\n        };\n        /** @type {SegmentData} */\n        var circumferenceSegmentData = {\n            feature: feature,\n            geometry: geometry,\n            index: CIRCLE_CIRCUMFERENCE_INDEX,\n            segment: [coordinates, coordinates],\n        };\n        var featureSegments = [centerSegmentData, circumferenceSegmentData];\n        centerSegmentData.featureSegments = featureSegments;\n        circumferenceSegmentData.featureSegments = featureSegments;\n        this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n        var circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n        var userProjection = getUserProjection();\n        if (userProjection && this.getMap()) {\n            var projection = this.getMap().getView().getProjection();\n            circleGeometry = circleGeometry\n                .clone()\n                .transform(userProjection, projection);\n            circleGeometry = fromCircle(\n            /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry)).transform(projection, userProjection);\n        }\n        this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n        var geometries = geometry.getGeometriesArray();\n        for (var i = 0; i < geometries.length; ++i) {\n            var geometry_1 = geometries[i];\n            var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n            writer(feature, geometry_1);\n        }\n    };\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n     * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n     * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n     * @return {Feature} Vertex feature.\n     * @private\n     */\n    Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates, features, geometries) {\n        var vertexFeature = this.vertexFeature_;\n        if (!vertexFeature) {\n            vertexFeature = new Feature(new Point(coordinates));\n            this.vertexFeature_ = vertexFeature;\n            this.overlay_.getSource().addFeature(vertexFeature);\n        }\n        else {\n            var geometry = vertexFeature.getGeometry();\n            geometry.setCoordinates(coordinates);\n        }\n        vertexFeature.set('features', features);\n        vertexFeature.set('geometries', geometries);\n        return vertexFeature;\n    };\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     */\n    Modify.prototype.handleEvent = function (mapBrowserEvent) {\n        if (!mapBrowserEvent.originalEvent) {\n            return true;\n        }\n        this.lastPointerEvent_ = mapBrowserEvent;\n        var handled;\n        if (!mapBrowserEvent.map.getView().getInteracting() &&\n            mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n            !this.handlingDownUpSequence) {\n            this.handlePointerMove_(mapBrowserEvent);\n        }\n        if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n            if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||\n                !this.ignoreNextSingleClick_) {\n                handled = this.removePoint();\n            }\n            else {\n                handled = true;\n            }\n        }\n        if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n            this.ignoreNextSingleClick_ = false;\n        }\n        return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n    };\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     */\n    Modify.prototype.handleDragEvent = function (evt) {\n        this.ignoreNextSingleClick_ = false;\n        this.willModifyFeatures_(evt, this.dragSegments_);\n        var vertex = [\n            evt.coordinate[0] + this.delta_[0],\n            evt.coordinate[1] + this.delta_[1],\n        ];\n        var features = [];\n        var geometries = [];\n        for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n            var dragSegment = this.dragSegments_[i];\n            var segmentData = dragSegment[0];\n            var feature = segmentData.feature;\n            if (features.indexOf(feature) === -1) {\n                features.push(feature);\n            }\n            var geometry = segmentData.geometry;\n            if (geometries.indexOf(geometry) === -1) {\n                geometries.push(geometry);\n            }\n            var depth = segmentData.depth;\n            var coordinates = void 0;\n            var segment = segmentData.segment;\n            var index = dragSegment[1];\n            while (vertex.length < geometry.getStride()) {\n                vertex.push(segment[index][vertex.length]);\n            }\n            switch (geometry.getType()) {\n                case 'Point':\n                    coordinates = vertex;\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    break;\n                case 'MultiPoint':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[segmentData.index] = vertex;\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    break;\n                case 'LineString':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'MultiLineString':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'Polygon':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'MultiPolygon':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'Circle':\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    if (segmentData.index === CIRCLE_CENTER_INDEX) {\n                        this.changingFeature_ = true;\n                        geometry.setCenter(vertex);\n                        this.changingFeature_ = false;\n                    }\n                    else {\n                        // We're dragging the circle's circumference:\n                        this.changingFeature_ = true;\n                        var projection = evt.map.getView().getProjection();\n                        var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n                        var userProjection = getUserProjection();\n                        if (userProjection) {\n                            var circleGeometry = geometry\n                                .clone()\n                                .transform(userProjection, projection);\n                            circleGeometry.setRadius(radius);\n                            radius = circleGeometry\n                                .transform(projection, userProjection)\n                                .getRadius();\n                        }\n                        geometry.setRadius(radius);\n                        this.changingFeature_ = false;\n                    }\n                    break;\n                default:\n                // pass\n            }\n            if (coordinates) {\n                this.setGeometryCoordinates_(geometry, coordinates);\n            }\n        }\n        this.createOrUpdateVertexFeature_(vertex, features, geometries);\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Modify.prototype.handleDownEvent = function (evt) {\n        if (!this.condition_(evt)) {\n            return false;\n        }\n        var pixelCoordinate = evt.coordinate;\n        this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n        this.dragSegments_.length = 0;\n        this.featuresBeingModified_ = null;\n        var vertexFeature = this.vertexFeature_;\n        if (vertexFeature) {\n            var projection = evt.map.getView().getProjection();\n            var insertVertices = [];\n            var vertex = vertexFeature.getGeometry().getCoordinates();\n            var vertexExtent = boundingExtent([vertex]);\n            var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n            var componentSegments = {};\n            segmentDataMatches.sort(compareIndexes);\n            for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n                var segmentDataMatch = segmentDataMatches[i];\n                var segment = segmentDataMatch.segment;\n                var uid = getUid(segmentDataMatch.geometry);\n                var depth = segmentDataMatch.depth;\n                if (depth) {\n                    uid += '-' + depth.join('-'); // separate feature components\n                }\n                if (!componentSegments[uid]) {\n                    componentSegments[uid] = new Array(2);\n                }\n                if (segmentDataMatch.geometry.getType() === 'Circle' &&\n                    segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n                    var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n                    if (coordinatesEqual(closestVertex, vertex) &&\n                        !componentSegments[uid][0]) {\n                        this.dragSegments_.push([segmentDataMatch, 0]);\n                        componentSegments[uid][0] = segmentDataMatch;\n                    }\n                    continue;\n                }\n                if (coordinatesEqual(segment[0], vertex) &&\n                    !componentSegments[uid][0]) {\n                    this.dragSegments_.push([segmentDataMatch, 0]);\n                    componentSegments[uid][0] = segmentDataMatch;\n                    continue;\n                }\n                if (coordinatesEqual(segment[1], vertex) &&\n                    !componentSegments[uid][1]) {\n                    if (componentSegments[uid][0] &&\n                        componentSegments[uid][0].index === 0) {\n                        var coordinates = segmentDataMatch.geometry.getCoordinates();\n                        switch (segmentDataMatch.geometry.getType()) {\n                            // prevent dragging closed linestrings by the connecting node\n                            case 'LineString':\n                            case 'MultiLineString':\n                                continue;\n                            // if dragging the first vertex of a polygon, ensure the other segment\n                            // belongs to the closing vertex of the linear ring\n                            case 'MultiPolygon':\n                                coordinates = coordinates[depth[1]];\n                            /* falls through */\n                            case 'Polygon':\n                                if (segmentDataMatch.index !==\n                                    coordinates[depth[0]].length - 2) {\n                                    continue;\n                                }\n                                break;\n                            default:\n                            // pass\n                        }\n                    }\n                    this.dragSegments_.push([segmentDataMatch, 1]);\n                    componentSegments[uid][1] = segmentDataMatch;\n                    continue;\n                }\n                if (getUid(segment) in this.vertexSegments_ &&\n                    !componentSegments[uid][0] &&\n                    !componentSegments[uid][1] &&\n                    this.insertVertexCondition_(evt)) {\n                    insertVertices.push(segmentDataMatch);\n                }\n            }\n            if (insertVertices.length) {\n                this.willModifyFeatures_(evt, [insertVertices]);\n            }\n            for (var j = insertVertices.length - 1; j >= 0; --j) {\n                this.insertVertex_(insertVertices[j], vertex);\n            }\n        }\n        return !!this.vertexFeature_;\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Modify.prototype.handleUpEvent = function (evt) {\n        for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n            var segmentData = this.dragSegments_[i][0];\n            var geometry = segmentData.geometry;\n            if (geometry.getType() === 'Circle') {\n                // Update a circle object in the R* bush:\n                var coordinates = geometry.getCenter();\n                var centerSegmentData = segmentData.featureSegments[0];\n                var circumferenceSegmentData = segmentData.featureSegments[1];\n                centerSegmentData.segment[0] = coordinates;\n                centerSegmentData.segment[1] = coordinates;\n                circumferenceSegmentData.segment[0] = coordinates;\n                circumferenceSegmentData.segment[1] = coordinates;\n                this.rBush_.update(createExtent(coordinates), centerSegmentData);\n                var circleGeometry = geometry;\n                var userProjection = getUserProjection();\n                if (userProjection) {\n                    var projection = evt.map.getView().getProjection();\n                    circleGeometry = circleGeometry\n                        .clone()\n                        .transform(userProjection, projection);\n                    circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n                }\n                this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n            }\n            else {\n                this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n            }\n        }\n        if (this.featuresBeingModified_) {\n            this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n            this.featuresBeingModified_ = null;\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @private\n     */\n    Modify.prototype.handlePointerMove_ = function (evt) {\n        this.lastPixel_ = evt.pixel;\n        this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n    };\n    /**\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_coordinate] The pixel Coordinate.\n     * @private\n     */\n    Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n        var _this = this;\n        var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n        var projection = map.getView().getProjection();\n        var sortByDistance = function (a, b) {\n            return (projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -\n                projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection));\n        };\n        /** @type {Array<SegmentData>|undefined} */\n        var nodes;\n        var hitPointGeometry;\n        if (this.hitDetection_) {\n            var layerFilter = typeof this.hitDetection_ === 'object'\n                ? function (layer) { return layer === _this.hitDetection_; }\n                : undefined;\n            map.forEachFeatureAtPixel(pixel, function (feature, layer, geometry) {\n                geometry =\n                    geometry ||\n                        /** @type {import(\"../geom/SimpleGeometry\").default} */ (feature.getGeometry());\n                if (geometry.getType() === 'Point' &&\n                    includes(_this.features_.getArray(), feature)) {\n                    hitPointGeometry = geometry;\n                    var coordinate = geometry.getFlatCoordinates().slice(0, 2);\n                    nodes = [\n                        {\n                            feature: feature,\n                            geometry: geometry,\n                            segment: [coordinate, coordinate],\n                        },\n                    ];\n                }\n                return true;\n            }, { layerFilter: layerFilter });\n        }\n        if (!nodes) {\n            var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n            var buffer = map.getView().getResolution() * this.pixelTolerance_;\n            var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n            nodes = this.rBush_.getInExtent(box);\n        }\n        if (nodes && nodes.length > 0) {\n            var node = nodes.sort(sortByDistance)[0];\n            var closestSegment = node.segment;\n            var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n            var vertexPixel = map.getPixelFromCoordinate(vertex);\n            var dist = coordinateDistance(pixel, vertexPixel);\n            if (hitPointGeometry || dist <= this.pixelTolerance_) {\n                /** @type {Object<string, boolean>} */\n                var vertexSegments = {};\n                vertexSegments[getUid(closestSegment)] = true;\n                if (!this.snapToPointer_) {\n                    this.delta_[0] = vertex[0] - pixelCoordinate[0];\n                    this.delta_[1] = vertex[1] - pixelCoordinate[1];\n                }\n                if (node.geometry.getType() === 'Circle' &&\n                    node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n                    this.snappedToVertex_ = true;\n                    this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n                }\n                else {\n                    var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n                    var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n                    var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n                    var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n                    dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n                    this.snappedToVertex_ = dist <= this.pixelTolerance_;\n                    if (this.snappedToVertex_) {\n                        vertex =\n                            squaredDist1 > squaredDist2\n                                ? closestSegment[1]\n                                : closestSegment[0];\n                    }\n                    this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n                    var geometries = {};\n                    geometries[getUid(node.geometry)] = true;\n                    for (var i = 1, ii = nodes.length; i < ii; ++i) {\n                        var segment = nodes[i].segment;\n                        if ((coordinatesEqual(closestSegment[0], segment[0]) &&\n                            coordinatesEqual(closestSegment[1], segment[1])) ||\n                            (coordinatesEqual(closestSegment[0], segment[1]) &&\n                                coordinatesEqual(closestSegment[1], segment[0]))) {\n                            var geometryUid = getUid(nodes[i].geometry);\n                            if (!(geometryUid in geometries)) {\n                                geometries[geometryUid] = true;\n                                vertexSegments[getUid(segment)] = true;\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n                this.vertexSegments_ = vertexSegments;\n                return;\n            }\n        }\n        if (this.vertexFeature_) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n    };\n    /**\n     * @param {SegmentData} segmentData Segment data.\n     * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n     * @private\n     */\n    Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n        var segment = segmentData.segment;\n        var feature = segmentData.feature;\n        var geometry = segmentData.geometry;\n        var depth = segmentData.depth;\n        var index = segmentData.index;\n        var coordinates;\n        while (vertex.length < geometry.getStride()) {\n            vertex.push(0);\n        }\n        switch (geometry.getType()) {\n            case 'MultiLineString':\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case 'Polygon':\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case 'MultiPolygon':\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case 'LineString':\n                coordinates = geometry.getCoordinates();\n                coordinates.splice(index + 1, 0, vertex);\n                break;\n            default:\n                return;\n        }\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var rTree = this.rBush_;\n        rTree.remove(segmentData);\n        this.updateSegmentIndices_(geometry, index, depth, 1);\n        /** @type {SegmentData} */\n        var newSegmentData = {\n            segment: [segment[0], vertex],\n            feature: feature,\n            geometry: geometry,\n            depth: depth,\n            index: index,\n        };\n        rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        this.dragSegments_.push([newSegmentData, 1]);\n        /** @type {SegmentData} */\n        var newSegmentData2 = {\n            segment: [vertex, segment[1]],\n            feature: feature,\n            geometry: geometry,\n            depth: depth,\n            index: index + 1,\n        };\n        rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n        this.dragSegments_.push([newSegmentData2, 0]);\n        this.ignoreNextSingleClick_ = true;\n    };\n    /**\n     * Removes the vertex currently being pointed.\n     * @return {boolean} True when a vertex was removed.\n     * @api\n     */\n    Modify.prototype.removePoint = function () {\n        if (this.lastPointerEvent_ &&\n            this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n            var evt = this.lastPointerEvent_;\n            this.willModifyFeatures_(evt, this.dragSegments_);\n            var removed = this.removeVertex_();\n            if (this.featuresBeingModified_) {\n                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n            }\n            this.featuresBeingModified_ = null;\n            return removed;\n        }\n        return false;\n    };\n    /**\n     * Removes a vertex from all matching features.\n     * @return {boolean} True when a vertex was removed.\n     * @private\n     */\n    Modify.prototype.removeVertex_ = function () {\n        var dragSegments = this.dragSegments_;\n        var segmentsByFeature = {};\n        var deleted = false;\n        var component, coordinates, dragSegment, geometry, i, index, left;\n        var newIndex, right, segmentData, uid;\n        for (i = dragSegments.length - 1; i >= 0; --i) {\n            dragSegment = dragSegments[i];\n            segmentData = dragSegment[0];\n            uid = getUid(segmentData.feature);\n            if (segmentData.depth) {\n                // separate feature components\n                uid += '-' + segmentData.depth.join('-');\n            }\n            if (!(uid in segmentsByFeature)) {\n                segmentsByFeature[uid] = {};\n            }\n            if (dragSegment[1] === 0) {\n                segmentsByFeature[uid].right = segmentData;\n                segmentsByFeature[uid].index = segmentData.index;\n            }\n            else if (dragSegment[1] == 1) {\n                segmentsByFeature[uid].left = segmentData;\n                segmentsByFeature[uid].index = segmentData.index + 1;\n            }\n        }\n        for (uid in segmentsByFeature) {\n            right = segmentsByFeature[uid].right;\n            left = segmentsByFeature[uid].left;\n            index = segmentsByFeature[uid].index;\n            newIndex = index - 1;\n            if (left !== undefined) {\n                segmentData = left;\n            }\n            else {\n                segmentData = right;\n            }\n            if (newIndex < 0) {\n                newIndex = 0;\n            }\n            geometry = segmentData.geometry;\n            coordinates = geometry.getCoordinates();\n            component = coordinates;\n            deleted = false;\n            switch (geometry.getType()) {\n                case 'MultiLineString':\n                    if (coordinates[segmentData.depth[0]].length > 2) {\n                        coordinates[segmentData.depth[0]].splice(index, 1);\n                        deleted = true;\n                    }\n                    break;\n                case 'LineString':\n                    if (coordinates.length > 2) {\n                        coordinates.splice(index, 1);\n                        deleted = true;\n                    }\n                    break;\n                case 'MultiPolygon':\n                    component = component[segmentData.depth[1]];\n                /* falls through */\n                case 'Polygon':\n                    component = component[segmentData.depth[0]];\n                    if (component.length > 4) {\n                        if (index == component.length - 1) {\n                            index = 0;\n                        }\n                        component.splice(index, 1);\n                        deleted = true;\n                        if (index === 0) {\n                            // close the ring again\n                            component.pop();\n                            component.push(component[0]);\n                            newIndex = component.length - 1;\n                        }\n                    }\n                    break;\n                default:\n                // pass\n            }\n            if (deleted) {\n                this.setGeometryCoordinates_(geometry, coordinates);\n                var segments = [];\n                if (left !== undefined) {\n                    this.rBush_.remove(left);\n                    segments.push(left.segment[0]);\n                }\n                if (right !== undefined) {\n                    this.rBush_.remove(right);\n                    segments.push(right.segment[1]);\n                }\n                if (left !== undefined && right !== undefined) {\n                    /** @type {SegmentData} */\n                    var newSegmentData = {\n                        depth: segmentData.depth,\n                        feature: segmentData.feature,\n                        geometry: segmentData.geometry,\n                        index: newIndex,\n                        segment: segments,\n                    };\n                    this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n                }\n                this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n                if (this.vertexFeature_) {\n                    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n                    this.vertexFeature_ = null;\n                }\n                dragSegments.length = 0;\n            }\n        }\n        return deleted;\n    };\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {Array} coordinates Coordinates.\n     * @private\n     */\n    Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n        this.changingFeature_ = true;\n        geometry.setCoordinates(coordinates);\n        this.changingFeature_ = false;\n    };\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} index Index.\n     * @param {Array<number>|undefined} depth Depth.\n     * @param {number} delta Delta (1 or -1).\n     * @private\n     */\n    Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n        this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n            if (segmentDataMatch.geometry === geometry &&\n                (depth === undefined ||\n                    segmentDataMatch.depth === undefined ||\n                    equals(segmentDataMatch.depth, depth)) &&\n                segmentDataMatch.index > index) {\n                segmentDataMatch.index += delta;\n            }\n        });\n    };\n    return Modify;\n}(PointerInteraction));\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n    return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === 'Circle') {\n        var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n        if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n            var userProjection = getUserProjection();\n            if (userProjection) {\n                circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n            }\n            var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n            var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n            return distanceToCircumference * distanceToCircumference;\n        }\n    }\n    var coordinate = fromUserCoordinate(pointCoordinates, projection);\n    tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n    tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n    return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === 'Circle' &&\n        segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n        var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n        var userProjection = getUserProjection();\n        if (userProjection) {\n            circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n        }\n        return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n    }\n    var coordinate = fromUserCoordinate(pointCoordinates, projection);\n    tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n    tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n    return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n    var style = createEditingStyle();\n    return function (feature, resolution) {\n        return style['Point'];\n    };\n}\nexport default Modify;\n//# sourceMappingURL=Modify.js.map","export * from \"-!../../../../node_modules/.pnpm/mini-css-extract-plugin@0.9.0_webpack@4.47.0/node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../../node_modules/.pnpm/css-loader@3.6.0_webpack@4.47.0/node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../../node_modules/.pnpm/vue-loader@16.8.3_@vue+compiler-sfc@3.4.6_vue@3.4.6_webpack@4.47.0/node_modules/vue-loader/dist/stylePostLoader.js!../../../../node_modules/.pnpm/postcss-loader@3.0.0/node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../../node_modules/.pnpm/cache-loader@4.1.0_webpack@4.47.0/node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/.pnpm/vue-loader@16.8.3_@vue+compiler-sfc@3.4.6_vue@3.4.6_webpack@4.47.0/node_modules/vue-loader/dist/index.js??ref--1-1!./index.vue?vue&type=style&index=0&id=471ab784&scoped=true&lang=css\"","/**\n * @module ol/geom/flat/interpolate\n */\nimport { binarySearch } from '../../array.js';\nimport { lerp } from '../../math.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>} [opt_dest] Destination.\n * @param {number} [opt_dimension] Destination dimension (default is `2`)\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest, opt_dimension) {\n    var o, t;\n    var n = (end - offset) / stride;\n    if (n === 1) {\n        o = offset;\n    }\n    else if (n === 2) {\n        o = offset;\n        t = fraction;\n    }\n    else if (n !== 0) {\n        var x1 = flatCoordinates[offset];\n        var y1 = flatCoordinates[offset + 1];\n        var length_1 = 0;\n        var cumulativeLengths = [0];\n        for (var i = offset + stride; i < end; i += stride) {\n            var x2 = flatCoordinates[i];\n            var y2 = flatCoordinates[i + 1];\n            length_1 += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n            cumulativeLengths.push(length_1);\n            x1 = x2;\n            y1 = y2;\n        }\n        var target = fraction * length_1;\n        var index = binarySearch(cumulativeLengths, target);\n        if (index < 0) {\n            t =\n                (target - cumulativeLengths[-index - 2]) /\n                    (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n            o = offset + (-index - 2) * stride;\n        }\n        else {\n            o = offset + index * stride;\n        }\n    }\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var dest = opt_dest ? opt_dest : new Array(dimension);\n    for (var i = 0; i < dimension; ++i) {\n        dest[i] =\n            o === undefined\n                ? NaN\n                : t === undefined\n                    ? flatCoordinates[o + i]\n                    : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n    }\n    return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {\n    if (end == offset) {\n        return null;\n    }\n    var coordinate;\n    if (m < flatCoordinates[offset + stride - 1]) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(offset, offset + stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    else if (flatCoordinates[end - 1] < m) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(end - stride, end);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    // FIXME use O(1) search\n    if (m == flatCoordinates[offset + stride - 1]) {\n        return flatCoordinates.slice(offset, offset + stride);\n    }\n    var lo = offset / stride;\n    var hi = end / stride;\n    while (lo < hi) {\n        var mid = (lo + hi) >> 1;\n        if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n            hi = mid;\n        }\n        else {\n            lo = mid + 1;\n        }\n    }\n    var m0 = flatCoordinates[lo * stride - 1];\n    if (m == m0) {\n        return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n    }\n    var m1 = flatCoordinates[(lo + 1) * stride - 1];\n    var t = (m - m0) / (m1 - m0);\n    coordinate = [];\n    for (var i = 0; i < stride - 1; ++i) {\n        coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));\n    }\n    coordinate.push(m);\n    return coordinate;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n    if (interpolate) {\n        return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n    }\n    var coordinate;\n    if (m < flatCoordinates[stride - 1]) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(0, stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    if (flatCoordinates[flatCoordinates.length - 1] < m) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        else {\n            return null;\n        }\n    }\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        if (offset == end) {\n            continue;\n        }\n        if (m < flatCoordinates[offset + stride - 1]) {\n            return null;\n        }\n        else if (m <= flatCoordinates[end - 1]) {\n            return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);\n        }\n        offset = end;\n    }\n    return null;\n}\n//# sourceMappingURL=interpolate.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/Select\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport Interaction from './Interaction.js';\nimport VectorLayer from '../layer/Vector.js';\nimport { TRUE } from '../functions.js';\nimport { clear } from '../obj.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { extend, includes } from '../array.js';\nimport { getUid } from '../util.js';\nimport { never, shiftKeyOnly, singleClick } from '../events/condition.js';\n/**\n * @enum {string}\n */\nvar SelectEventType = {\n    /**\n     * Triggered when feature(s) has been (de)selected.\n     * @event SelectEvent#select\n     * @api\n     */\n    SELECT: 'select',\n};\n/**\n * A function that takes an {@link module:ol/Feature~Feature} or\n * {@link module:ol/render/Feature~RenderFeature} and an\n * {@link module:ol/layer/Layer~Layer} and returns `true` if the feature may be\n * selected or `false` otherwise.\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>):boolean} FilterFunction\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [addCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default, this is {@link module:ol/events/condition.never}. Use this if you\n * want to use different events for add and remove instead of `toggle`.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. This is the event\n * for the selected features as a whole. By default, this is\n * {@link module:ol/events/condition.singleClick}. Clicking on a feature selects that\n * feature and removes any that were in the selection. Clicking outside any\n * feature removes all from the selection.\n * See `toggle`, `add`, `remove` options for adding/removing extra features to/\n * from the selection.\n * @property {Array<import(\"../layer/Layer.js\").default>|function(import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>): boolean} [layers]\n * A list of layers from which features should be selected. Alternatively, a\n * filter function can be provided. The function will be called for each layer\n * in the map and should return `true` for layers that you want to be\n * selectable. If the option is absent, all visible layers will be considered\n * selectable.\n * @property {import(\"../style/Style.js\").StyleLike|null} [style]\n * Style for the selected features. By default the default edit style is used\n * (see {@link module:ol/style/Style~Style}). Set to `null` if this interaction should not apply\n * any style changes for selected features.\n * If set to a falsey value, the selected feature's style will not change.\n * @property {import(\"../events/condition.js\").Condition} [removeCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default, this is {@link module:ol/events/condition.never}. Use this if you\n * want to use different events for add and remove instead of `toggle`.\n * @property {import(\"../events/condition.js\").Condition} [toggleCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. This is in addition\n * to the `condition` event. By default,\n * {@link module:ol/events/condition.shiftKeyOnly}, i.e. pressing `shift` as\n * well as the `condition` event, adds that feature to the current selection if\n * it is not currently selected, and removes it if it is. See `add` and `remove`\n * if you want to use different events instead of a toggle.\n * @property {boolean} [multi=false] A boolean that determines if the default\n * behaviour should select only single features or all (overlapping) features at\n * the clicked map position. The default of `false` means single select.\n * @property {import(\"../Collection.js\").default<import(\"../Feature.js\").default>} [features]\n * Collection where the interaction will place selected features. Optional. If\n * not set the interaction will create a collection. In any case the collection\n * used by the interaction is returned by\n * {@link module:ol/interaction/Select~Select#getFeatures}.\n * @property {FilterFunction} [filter] A function\n * that takes an {@link module:ol/Feature~Feature} and an\n * {@link module:ol/layer/Layer~Layer} and returns `true` if the feature may be\n * selected or `false` otherwise.\n * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside\n * the radius around the given position will be checked for features.\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of\n * this type.\n */\nvar SelectEvent = /** @class */ (function (_super) {\n    __extends(SelectEvent, _super);\n    /**\n     * @param {SelectEventType} type The event type.\n     * @param {Array<import(\"../Feature.js\").default>} selected Selected features.\n     * @param {Array<import(\"../Feature.js\").default>} deselected Deselected features.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Associated\n     *     {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     */\n    function SelectEvent(type, selected, deselected, mapBrowserEvent) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * Selected features array.\n         * @type {Array<import(\"../Feature.js\").default>}\n         * @api\n         */\n        _this.selected = selected;\n        /**\n         * Deselected features array.\n         * @type {Array<import(\"../Feature.js\").default>}\n         * @api\n         */\n        _this.deselected = deselected;\n        /**\n         * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @api\n         */\n        _this.mapBrowserEvent = mapBrowserEvent;\n        return _this;\n    }\n    return SelectEvent;\n}(Event));\nexport { SelectEvent };\n/**\n * Original feature styles to reset to when features are no longer selected.\n * @type {Object<number, import(\"../style/Style.js\").default|Array<import(\"../style/Style.js\").default>|import(\"../style/Style.js\").StyleFunction>}\n */\nvar originalFeatureStyles = {};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'select', SelectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'select', Return>} SelectOnSignature\n */\n/**\n * @classdesc\n * Interaction for selecting vector features. By default, selected features are\n * styled differently, so this interaction can be used for visual highlighting,\n * as well as selecting features for other actions, such as modification or\n * output. There are three ways of controlling which features are selected:\n * using the browser event as defined by the `condition` and optionally the\n * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a\n * further feature filter using the `filter` option.\n *\n * @fires SelectEvent\n * @api\n */\nvar Select = /** @class */ (function (_super) {\n    __extends(Select, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Select(opt_options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {SelectOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {SelectOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {SelectOnSignature<void>}\n         */\n        _this.un;\n        var options = opt_options ? opt_options : {};\n        /**\n         * @private\n         */\n        _this.boundAddFeature_ = _this.addFeature_.bind(_this);\n        /**\n         * @private\n         */\n        _this.boundRemoveFeature_ = _this.removeFeature_.bind(_this);\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : singleClick;\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.addCondition_ = options.addCondition ? options.addCondition : never;\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.removeCondition_ = options.removeCondition\n            ? options.removeCondition\n            : never;\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.toggleCondition_ = options.toggleCondition\n            ? options.toggleCondition\n            : shiftKeyOnly;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.multi_ = options.multi ? options.multi : false;\n        /**\n         * @private\n         * @type {FilterFunction}\n         */\n        _this.filter_ = options.filter ? options.filter : TRUE;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;\n        /**\n         * @private\n         * @type {import(\"../style/Style.js\").default|Array<import(\"../style/Style.js\").default>|import(\"../style/Style.js\").StyleFunction|null}\n         */\n        _this.style_ =\n            options.style !== undefined ? options.style : getDefaultStyleFunction();\n        /**\n         * @private\n         * @type {import(\"../Collection.js\").default}\n         */\n        _this.features_ = options.features || new Collection();\n        /** @type {function(import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>): boolean} */\n        var layerFilter;\n        if (options.layers) {\n            if (typeof options.layers === 'function') {\n                layerFilter = options.layers;\n            }\n            else {\n                var layers_1 = options.layers;\n                layerFilter = function (layer) {\n                    return includes(layers_1, layer);\n                };\n            }\n        }\n        else {\n            layerFilter = TRUE;\n        }\n        /**\n         * @private\n         * @type {function(import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>): boolean}\n         */\n        _this.layerFilter_ = layerFilter;\n        /**\n         * An association between selected feature (key)\n         * and layer (value)\n         * @private\n         * @type {Object<string, import(\"../layer/Layer.js\").default>}\n         */\n        _this.featureLayerAssociation_ = {};\n        return _this;\n    }\n    /**\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../layer/Layer.js\").default} layer Layer.\n     * @private\n     */\n    Select.prototype.addFeatureLayerAssociation_ = function (feature, layer) {\n        this.featureLayerAssociation_[getUid(feature)] = layer;\n    };\n    /**\n     * Get the selected features.\n     * @return {import(\"../Collection.js\").default<import(\"../Feature.js\").default>} Features collection.\n     * @api\n     */\n    Select.prototype.getFeatures = function () {\n        return this.features_;\n    };\n    /**\n     * Returns the Hit-detection tolerance.\n     * @return {number} Hit tolerance in pixels.\n     * @api\n     */\n    Select.prototype.getHitTolerance = function () {\n        return this.hitTolerance_;\n    };\n    /**\n     * Returns the associated {@link module:ol/layer/Vector~VectorLayer vector layer} of\n     * a selected feature.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature\n     * @return {import('../layer/Vector.js').default} Layer.\n     * @api\n     */\n    Select.prototype.getLayer = function (feature) {\n        return /** @type {import('../layer/Vector.js').default} */ (this.featureLayerAssociation_[getUid(feature)]);\n    };\n    /**\n     * Hit-detection tolerance. Pixels inside the radius around the given position\n     * will be checked for features.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @api\n     */\n    Select.prototype.setHitTolerance = function (hitTolerance) {\n        this.hitTolerance_ = hitTolerance;\n    };\n    /**\n     * Remove the interaction from its current map, if any,  and attach it to a new\n     * map, if any. Pass `null` to just remove the interaction from the current map.\n     * @param {import(\"../PluggableMap.js\").default|null} map Map.\n     * @api\n     */\n    Select.prototype.setMap = function (map) {\n        var currentMap = this.getMap();\n        if (currentMap && this.style_) {\n            this.features_.forEach(this.restorePreviousStyle_.bind(this));\n        }\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            this.features_.addEventListener(CollectionEventType.ADD, this.boundAddFeature_);\n            this.features_.addEventListener(CollectionEventType.REMOVE, this.boundRemoveFeature_);\n            if (this.style_) {\n                this.features_.forEach(this.applySelectedStyle_.bind(this));\n            }\n        }\n        else {\n            this.features_.removeEventListener(CollectionEventType.ADD, this.boundAddFeature_);\n            this.features_.removeEventListener(CollectionEventType.REMOVE, this.boundRemoveFeature_);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Select.prototype.addFeature_ = function (evt) {\n        var feature = evt.element;\n        if (this.style_) {\n            this.applySelectedStyle_(feature);\n        }\n        if (!this.getLayer(feature)) {\n            var layer = /** @type {VectorLayer} */ (this.getMap()\n                .getAllLayers()\n                .find(function (layer) {\n                if (layer instanceof VectorLayer &&\n                    layer.getSource() &&\n                    layer.getSource().hasFeature(feature)) {\n                    return layer;\n                }\n            }));\n            if (layer) {\n                this.addFeatureLayerAssociation_(feature, layer);\n            }\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Select.prototype.removeFeature_ = function (evt) {\n        var feature = evt.element;\n        if (this.style_) {\n            this.restorePreviousStyle_(feature);\n        }\n    };\n    /**\n     * @return {import(\"../style/Style.js\").StyleLike|null} Select style.\n     */\n    Select.prototype.getStyle = function () {\n        return this.style_;\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @private\n     */\n    Select.prototype.applySelectedStyle_ = function (feature) {\n        var key = getUid(feature);\n        if (!(key in originalFeatureStyles)) {\n            originalFeatureStyles[key] = feature.getStyle();\n        }\n        feature.setStyle(this.style_);\n    };\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature\n     * @private\n     */\n    Select.prototype.restorePreviousStyle_ = function (feature) {\n        var interactions = this.getMap().getInteractions().getArray();\n        for (var i = interactions.length - 1; i >= 0; --i) {\n            var interaction = interactions[i];\n            if (interaction !== this &&\n                interaction instanceof Select &&\n                interaction.getStyle() &&\n                interaction.getFeatures().getArray().lastIndexOf(feature) !== -1) {\n                feature.setStyle(interaction.getStyle());\n                return;\n            }\n        }\n        var key = getUid(feature);\n        feature.setStyle(originalFeatureStyles[key]);\n        delete originalFeatureStyles[key];\n    };\n    /**\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     * @private\n     */\n    Select.prototype.removeFeatureLayerAssociation_ = function (feature) {\n        delete this.featureLayerAssociation_[getUid(feature)];\n    };\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may change the\n     * selected state of features.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     * @this {Select}\n     */\n    Select.prototype.handleEvent = function (mapBrowserEvent) {\n        if (!this.condition_(mapBrowserEvent)) {\n            return true;\n        }\n        var add = this.addCondition_(mapBrowserEvent);\n        var remove = this.removeCondition_(mapBrowserEvent);\n        var toggle = this.toggleCondition_(mapBrowserEvent);\n        var set = !add && !remove && !toggle;\n        var map = mapBrowserEvent.map;\n        var features = this.getFeatures();\n        var deselected = [];\n        var selected = [];\n        if (set) {\n            // Replace the currently selected feature(s) with the feature(s) at the\n            // pixel, or clear the selected feature(s) if there is no feature at\n            // the pixel.\n            clear(this.featureLayerAssociation_);\n            map.forEachFeatureAtPixel(mapBrowserEvent.pixel, \n            /**\n             * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n             * @param {import(\"../layer/Layer.js\").default} layer Layer.\n             * @return {boolean|undefined} Continue to iterate over the features.\n             */\n            function (feature, layer) {\n                if (this.filter_(feature, layer)) {\n                    this.addFeatureLayerAssociation_(feature, layer);\n                    selected.push(feature);\n                    return !this.multi_;\n                }\n            }.bind(this), {\n                layerFilter: this.layerFilter_,\n                hitTolerance: this.hitTolerance_,\n            });\n            for (var i = features.getLength() - 1; i >= 0; --i) {\n                var feature = features.item(i);\n                var index = selected.indexOf(feature);\n                if (index > -1) {\n                    // feature is already selected\n                    selected.splice(index, 1);\n                }\n                else {\n                    features.remove(feature);\n                    deselected.push(feature);\n                }\n            }\n            if (selected.length !== 0) {\n                features.extend(selected);\n            }\n        }\n        else {\n            // Modify the currently selected feature(s).\n            map.forEachFeatureAtPixel(mapBrowserEvent.pixel, \n            /**\n             * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n             * @param {import(\"../layer/Layer.js\").default} layer Layer.\n             * @return {boolean|undefined} Continue to iterate over the features.\n             */\n            function (feature, layer) {\n                if (this.filter_(feature, layer)) {\n                    if ((add || toggle) && !includes(features.getArray(), feature)) {\n                        this.addFeatureLayerAssociation_(feature, layer);\n                        selected.push(feature);\n                    }\n                    else if ((remove || toggle) &&\n                        includes(features.getArray(), feature)) {\n                        deselected.push(feature);\n                        this.removeFeatureLayerAssociation_(feature);\n                    }\n                    return !this.multi_;\n                }\n            }.bind(this), {\n                layerFilter: this.layerFilter_,\n                hitTolerance: this.hitTolerance_,\n            });\n            for (var j = deselected.length - 1; j >= 0; --j) {\n                features.remove(deselected[j]);\n            }\n            features.extend(selected);\n        }\n        if (selected.length > 0 || deselected.length > 0) {\n            this.dispatchEvent(new SelectEvent(SelectEventType.SELECT, selected, deselected, mapBrowserEvent));\n        }\n        return true;\n    };\n    return Select;\n}(Interaction));\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n    var styles = createEditingStyle();\n    extend(styles['Polygon'], styles['LineString']);\n    extend(styles['GeometryCollection'], styles['LineString']);\n    return function (feature) {\n        if (!feature.getGeometry()) {\n            return null;\n        }\n        return styles[feature.getGeometry().getType()];\n    };\n}\nexport default Select;\n//# sourceMappingURL=Select.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/LineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { forEach as forEachSegment } from './flat/segments.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nvar LineString = /** @class */ (function (_super) {\n    __extends(LineString, _super);\n    /**\n     * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n     *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    function LineString(coordinates, opt_layout) {\n        var _this = _super.call(this) || this;\n        /**\n         * @private\n         * @type {import(\"../coordinate.js\").Coordinate}\n         */\n        _this.flatMidpoint_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.flatMidpointRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDelta_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.maxDeltaRevision_ = -1;\n        if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n            _this.setFlatCoordinates(opt_layout, \n            /** @type {Array<number>} */ (coordinates));\n        }\n        else {\n            _this.setCoordinates(\n            /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates), opt_layout);\n        }\n        return _this;\n    }\n    /**\n     * Append the passed coordinate to the coordinates of the linestring.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @api\n     */\n    LineString.prototype.appendCoordinate = function (coordinate) {\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = coordinate.slice();\n        }\n        else {\n            extend(this.flatCoordinates, coordinate);\n        }\n        this.changed();\n    };\n    /**\n     * Make a complete copy of the geometry.\n     * @return {!LineString} Clone.\n     * @api\n     */\n    LineString.prototype.clone = function () {\n        var lineString = new LineString(this.flatCoordinates.slice(), this.layout);\n        lineString.applyProperties(this);\n        return lineString;\n    };\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n     * @param {number} minSquaredDistance Minimum squared distance.\n     * @return {number} Minimum squared distance.\n     */\n    LineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n            return minSquaredDistance;\n        }\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    };\n    /**\n     * Iterate over each segment, calling the provided callback.\n     * If the callback returns a truthy value the function returns that\n     * value immediately. Otherwise the function returns `false`.\n     *\n     * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n     *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n     * @return {T|boolean} Value.\n     * @template T,S\n     * @api\n     */\n    LineString.prototype.forEachSegment = function (callback) {\n        return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n    };\n    /**\n     * Returns the coordinate at `m` using linear interpolation, or `null` if no\n     * such coordinate exists.\n     *\n     * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n     * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n     * M will return the first coordinate and Ms greater than the last M will\n     * return the last coordinate.\n     *\n     * @param {number} m M.\n     * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n     * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n     * @api\n     */\n    LineString.prototype.getCoordinateAtM = function (m, opt_extrapolate) {\n        if (this.layout != GeometryLayout.XYM &&\n            this.layout != GeometryLayout.XYZM) {\n            return null;\n        }\n        var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n        return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n    };\n    /**\n     * Return the coordinates of the linestring.\n     * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n     * @api\n     */\n    LineString.prototype.getCoordinates = function () {\n        return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * Return the coordinate at the provided fraction along the linestring.\n     * The `fraction` is a number between 0 and 1, where 0 is the start of the\n     * linestring and 1 is the end.\n     * @param {number} fraction Fraction.\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_dest] Optional coordinate whose values will\n     *     be modified. If not provided, a new coordinate will be returned.\n     * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n     * @api\n     */\n    LineString.prototype.getCoordinateAt = function (fraction, opt_dest) {\n        return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest, this.stride);\n    };\n    /**\n     * Return the length of the linestring on projected plane.\n     * @return {number} Length (on projected plane).\n     * @api\n     */\n    LineString.prototype.getLength = function () {\n        return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    };\n    /**\n     * @return {Array<number>} Flat midpoint.\n     */\n    LineString.prototype.getFlatMidpoint = function () {\n        if (this.flatMidpointRevision_ != this.getRevision()) {\n            this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n            this.flatMidpointRevision_ = this.getRevision();\n        }\n        return this.flatMidpoint_;\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {LineString} Simplified LineString.\n     * @protected\n     */\n    LineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        var simplifiedFlatCoordinates = [];\n        simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n    };\n    /**\n     * Get the type of this geometry.\n     * @return {import(\"./Geometry.js\").Type} Geometry type.\n     * @api\n     */\n    LineString.prototype.getType = function () {\n        return 'LineString';\n    };\n    /**\n     * Test if the geometry and the passed extent intersect.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {boolean} `true` if the geometry and the extent intersect.\n     * @api\n     */\n    LineString.prototype.intersectsExtent = function (extent) {\n        return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    };\n    /**\n     * Set the coordinates of the linestring.\n     * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     * @api\n     */\n    LineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n        this.setLayout(opt_layout, coordinates, 1);\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = [];\n        }\n        this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    };\n    return LineString;\n}(SimpleGeometry));\nexport default LineString;\n//# sourceMappingURL=LineString.js.map"],"sourceRoot":""}