{"version":3,"sources":["webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/source/OSM.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/control/OverviewMap.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/source/XYZ.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/Overlay.js"],"names":["extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","OSM","_super","opt_options","attributions","options","interpolate","undefined","imageSmoothing","crossOrigin","url","attributionsCollapsible","cacheSize","maxZoom","opaque","reprojectionErrorThreshold","tileLoadFunction","transition","wrapX","zDirection","MAX_RATIO","MIN_RATIO","ControlledMap","apply","arguments","createRenderer","OverviewMap","_this","element","document","createElement","render","target","boundHandleRotationChanged_","handleRotationChanged_","bind","collapsed_","collapsed","collapsible_","collapsible","rotateWithView_","rotateWithView","viewExtent_","className","tipLabel","collapseLabel","collapseLabel_","textContent","label","label_","activeLabel","button","setAttribute","title","appendChild","addEventListener","CLICK","handleClick_","ovmapDiv_","view_","view","ovmap_","ovmap","layers","forEach","layer","addLayer","box","style","boxSizing","boxOverlay_","position","positioning","addOverlay","cssClasses","scope","overlay","overlayBox","getElement","move","event","mousePosition","clientX","clientY","coordinates","getEventCoordinateInternal","setPosition","endMoving","getMap","getView","setCenterInternal","window","removeEventListener","setMap","map","oldMap","oldView","unbindView_","setTarget","listenerKeys","push","PROPERTYCHANGE","handleMapPropertyChange_","bindView_","isDef","updateSize","resetExtent_","isRendered","updateBoxAfterOvmapIsRendered_","key","VIEW","newView","TARGET","SIZE","projection","getProjection","setView","addChangeListener","ROTATION","removeChangeListener","setRotation","getRotation","validateExtent_","mapSize","getSize","extent","calculateExtentInternal","ovmapSize","ovextent","topLeftPixel","getPixelFromCoordinateInternal","bottomRightPixel","boxWidth","Math","abs","boxHeight","ovmapWidth","ovmapHeight","recenter_","ovview","steps","log","LN2","ratio","pow","fitInternal","getCenterInternal","updateBox_","rotation","center","resolution","getResolution","ovresolution","width","height","transform","ovmapPostrenderKey_","POSTRENDER","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsible","setCollapsed","getCollapsed","getRotateWithView","setRotateWithView","getOverviewMap","mapEvent","XYZ","tileGrid","maxResolution","minZoom","tileSize","tilePixelRatio","tileUrlFunction","urls","gutter_","gutter","getGutter","Property","Overlay","on","once","un","id","insertFirst","stopEvent","pointerEvents","autoPan","animation","autoPanAnimation","margin","autoPanMargin","rendered","transform_","visible","mapPostrenderListenerKey","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","get","getId","getOffset","getPosition","getPositioning","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","panIntoView","opt_panIntoViewOptions","getTargetElement","mapRect","getRect","overlayRect","panIntoViewOptions","myMargin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","centerPx","newCenterPx","panOptions","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","getBoundingClientRect","offsetX","left","pageXOffset","offsetY","top","pageYOffset","setVisible","display","pixel","getPixelFromCoordinate","updateRenderedPosition","x","round","y","posX","posY","concat","msTransform","getOptions"],"mappings":"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","file":"js/chunk-10d1a535.54f849b2.js","sourcesContent":["/**\n * @module ol/source/OSM\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport XYZ from './XYZ.js';\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nexport var ATTRIBUTION = '&#169; ' +\n    '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' +\n    'contributors.';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url='https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */\nvar OSM = /** @class */ (function (_super) {\n    __extends(OSM, _super);\n    /**\n     * @param {Options} [opt_options] Open Street Map options.\n     */\n    function OSM(opt_options) {\n        var options = opt_options || {};\n        var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n        if (options.interpolate !== undefined) {\n            interpolate = options.interpolate;\n        }\n        var attributions;\n        if (options.attributions !== undefined) {\n            attributions = options.attributions;\n        }\n        else {\n            attributions = [ATTRIBUTION];\n        }\n        var crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n        var url = options.url !== undefined\n            ? options.url\n            : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n        return _super.call(this, {\n            attributions: attributions,\n            attributionsCollapsible: false,\n            cacheSize: options.cacheSize,\n            crossOrigin: crossOrigin,\n            interpolate: interpolate,\n            maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n            opaque: options.opaque !== undefined ? options.opaque : true,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileLoadFunction: options.tileLoadFunction,\n            transition: options.transition,\n            url: url,\n            wrapX: options.wrapX,\n            zDirection: options.zDirection,\n        }) || this;\n    }\n    return OSM;\n}(XYZ));\nexport default OSM;\n//# sourceMappingURL=OSM.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/OverviewMap\n */\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport PluggableMap from '../PluggableMap.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter, } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nvar MIN_RATIO = 0.1;\nvar ControlledMap = /** @class */ (function (_super) {\n    __extends(ControlledMap, _super);\n    function ControlledMap() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ControlledMap.prototype.createRenderer = function () {\n        return new CompositeMapRenderer(this);\n    };\n    return ControlledMap;\n}(PluggableMap));\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nvar OverviewMap = /** @class */ (function (_super) {\n    __extends(OverviewMap, _super);\n    /**\n     * @param {Options} [opt_options] OverviewMap options.\n     */\n    function OverviewMap(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            render: options.render,\n            target: options.target,\n        }) || this;\n        /**\n         * @private\n         */\n        _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.collapsed_ =\n            options.collapsed !== undefined ? options.collapsed : true;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.collapsible_ =\n            options.collapsible !== undefined ? options.collapsible : true;\n        if (!_this.collapsible_) {\n            _this.collapsed_ = false;\n        }\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.rotateWithView_ =\n            options.rotateWithView !== undefined ? options.rotateWithView : false;\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent|undefined}\n         */\n        _this.viewExtent_ = undefined;\n        var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n        if (typeof collapseLabel === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.collapseLabel_ = document.createElement('span');\n            _this.collapseLabel_.textContent = collapseLabel;\n        }\n        else {\n            _this.collapseLabel_ = collapseLabel;\n        }\n        var label = options.label !== undefined ? options.label : '\\u203A';\n        if (typeof label === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.label_ = document.createElement('span');\n            _this.label_.textContent = label;\n        }\n        else {\n            _this.label_ = label;\n        }\n        var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n        var button = document.createElement('button');\n        button.setAttribute('type', 'button');\n        button.title = tipLabel;\n        button.appendChild(activeLabel);\n        button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        /**\n         * @type {HTMLElement}\n         * @private\n         */\n        _this.ovmapDiv_ = document.createElement('div');\n        _this.ovmapDiv_.className = 'ol-overviewmap-map';\n        /**\n         * Explicitly given view to be used instead of a view derived from the main map.\n         * @type {View}\n         * @private\n         */\n        _this.view_ = options.view;\n        /**\n         * @type {ControlledMap}\n         * @private\n         */\n        _this.ovmap_ = new ControlledMap({\n            view: options.view,\n        });\n        var ovmap = _this.ovmap_;\n        if (options.layers) {\n            options.layers.forEach(function (layer) {\n                ovmap.addLayer(layer);\n            });\n        }\n        var box = document.createElement('div');\n        box.className = 'ol-overviewmap-box';\n        box.style.boxSizing = 'border-box';\n        /**\n         * @type {import(\"../Overlay.js\").default}\n         * @private\n         */\n        _this.boxOverlay_ = new Overlay({\n            position: [0, 0],\n            positioning: 'center-center',\n            element: box,\n        });\n        _this.ovmap_.addOverlay(_this.boxOverlay_);\n        var cssClasses = className +\n            ' ' +\n            CLASS_UNSELECTABLE +\n            ' ' +\n            CLASS_CONTROL +\n            (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n            (_this.collapsible_ ? '' : ' ol-uncollapsible');\n        var element = _this.element;\n        element.className = cssClasses;\n        element.appendChild(_this.ovmapDiv_);\n        element.appendChild(button);\n        /* Interactive map */\n        var scope = _this;\n        var overlay = _this.boxOverlay_;\n        var overlayBox = _this.boxOverlay_.getElement();\n        /* Functions definition */\n        var computeDesiredMousePosition = function (mousePosition) {\n            return {\n                clientX: mousePosition.clientX,\n                clientY: mousePosition.clientY,\n            };\n        };\n        var move = function (event) {\n            var position = /** @type {?} */ (computeDesiredMousePosition(event));\n            var coordinates = ovmap.getEventCoordinateInternal(\n            /** @type {MouseEvent} */ (position));\n            overlay.setPosition(coordinates);\n        };\n        var endMoving = function (event) {\n            var coordinates = ovmap.getEventCoordinateInternal(event);\n            scope.getMap().getView().setCenterInternal(coordinates);\n            window.removeEventListener('mousemove', move);\n            window.removeEventListener('mouseup', endMoving);\n        };\n        /* Binding */\n        overlayBox.addEventListener('mousedown', function () {\n            window.addEventListener('mousemove', move);\n            window.addEventListener('mouseup', endMoving);\n        });\n        return _this;\n    }\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Pass `null` to just remove the control from the current map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default|null} map Map.\n     * @api\n     */\n    OverviewMap.prototype.setMap = function (map) {\n        var oldMap = this.getMap();\n        if (map === oldMap) {\n            return;\n        }\n        if (oldMap) {\n            var oldView = oldMap.getView();\n            if (oldView) {\n                this.unbindView_(oldView);\n            }\n            this.ovmap_.setTarget(null);\n        }\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            this.ovmap_.setTarget(this.ovmapDiv_);\n            this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n            var view = map.getView();\n            if (view) {\n                this.bindView_(view);\n                if (view.isDef()) {\n                    this.ovmap_.updateSize();\n                    this.resetExtent_();\n                }\n            }\n            if (!this.ovmap_.isRendered()) {\n                this.updateBoxAfterOvmapIsRendered_();\n            }\n        }\n    };\n    /**\n     * Handle map property changes.  This only deals with changes to the map's view.\n     * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n     * @private\n     */\n    OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n        if (event.key === MapProperty.VIEW) {\n            var oldView = /** @type {import(\"../View.js\").default} */ (event.oldValue);\n            if (oldView) {\n                this.unbindView_(oldView);\n            }\n            var newView = this.getMap().getView();\n            this.bindView_(newView);\n        }\n        else if (!this.ovmap_.isRendered() &&\n            (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n            this.ovmap_.updateSize();\n        }\n    };\n    /**\n     * Register listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n    OverviewMap.prototype.bindView_ = function (view) {\n        if (!this.view_) {\n            // Unless an explicit view definition was given, derive default from whatever main map uses.\n            var newView = new View({\n                projection: view.getProjection(),\n            });\n            this.ovmap_.setView(newView);\n        }\n        view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n        // Sync once with the new view\n        this.handleRotationChanged_();\n    };\n    /**\n     * Unregister listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n    OverviewMap.prototype.unbindView_ = function (view) {\n        view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n    };\n    /**\n     * Handle rotation changes to the main map.\n     * @private\n     */\n    OverviewMap.prototype.handleRotationChanged_ = function () {\n        if (this.rotateWithView_) {\n            this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n        }\n    };\n    /**\n     * Reset the overview map extent if the box size (width or\n     * height) is less than the size of the overview map size times minRatio\n     * or is greater than the size of the overview size times maxRatio.\n     *\n     * If the map extent was not reset, the box size can fits in the defined\n     * ratio sizes. This method then checks if is contained inside the overview\n     * map current extent. If not, recenter the overview map to the current\n     * main map center location.\n     * @private\n     */\n    OverviewMap.prototype.validateExtent_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        if (!map.isRendered() || !ovmap.isRendered()) {\n            return;\n        }\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var extent = view.calculateExtentInternal(mapSize);\n        if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n            // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n            return;\n        }\n        this.viewExtent_ = extent;\n        var ovmapSize = /** @type {import(\"../size.js\").Size} */ (ovmap.getSize());\n        var ovview = ovmap.getView();\n        var ovextent = ovview.calculateExtentInternal(ovmapSize);\n        var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n        var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n        var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n        var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n        var ovmapWidth = ovmapSize[0];\n        var ovmapHeight = ovmapSize[1];\n        if (boxWidth < ovmapWidth * MIN_RATIO ||\n            boxHeight < ovmapHeight * MIN_RATIO ||\n            boxWidth > ovmapWidth * MAX_RATIO ||\n            boxHeight > ovmapHeight * MAX_RATIO) {\n            this.resetExtent_();\n        }\n        else if (!containsExtent(ovextent, extent)) {\n            this.recenter_();\n        }\n    };\n    /**\n     * Reset the overview map extent to half calculated min and max ratio times\n     * the extent of the main map.\n     * @private\n     */\n    OverviewMap.prototype.resetExtent_ = function () {\n        if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n            return;\n        }\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var extent = view.calculateExtentInternal(mapSize);\n        var ovview = ovmap.getView();\n        // get how many times the current map overview could hold different\n        // box sizes using the min and max ratio, pick the step in the middle used\n        // to calculate the extent from the main map to set it to the overview map,\n        var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n        var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n        scaleFromCenter(extent, ratio);\n        ovview.fitInternal(polygonFromExtent(extent));\n    };\n    /**\n     * Set the center of the overview map to the map center without changing its\n     * resolution.\n     * @private\n     */\n    OverviewMap.prototype.recenter_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        var view = map.getView();\n        var ovview = ovmap.getView();\n        ovview.setCenterInternal(view.getCenterInternal());\n    };\n    /**\n     * Update the box using the main map extent\n     * @private\n     */\n    OverviewMap.prototype.updateBox_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        if (!map.isRendered() || !ovmap.isRendered()) {\n            return;\n        }\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var ovview = ovmap.getView();\n        var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n        var overlay = this.boxOverlay_;\n        var box = this.boxOverlay_.getElement();\n        var center = view.getCenterInternal();\n        var resolution = view.getResolution();\n        var ovresolution = ovview.getResolution();\n        var width = (mapSize[0] * resolution) / ovresolution;\n        var height = (mapSize[1] * resolution) / ovresolution;\n        // set position using center coordinates\n        overlay.setPosition(center);\n        // set box size calculated from map extent size and overview map resolution\n        if (box) {\n            box.style.width = width + 'px';\n            box.style.height = height + 'px';\n            var transform = 'rotate(' + rotation + 'rad)';\n            box.style.transform = transform;\n        }\n    };\n    /**\n     * @private\n     */\n    OverviewMap.prototype.updateBoxAfterOvmapIsRendered_ = function () {\n        if (this.ovmapPostrenderKey_) {\n            return;\n        }\n        this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n            delete this.ovmapPostrenderKey_;\n            this.updateBox_();\n        }, this);\n    };\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    OverviewMap.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleToggle_();\n    };\n    /**\n     * @private\n     */\n    OverviewMap.prototype.handleToggle_ = function () {\n        this.element.classList.toggle(CLASS_COLLAPSED);\n        if (this.collapsed_) {\n            replaceNode(this.collapseLabel_, this.label_);\n        }\n        else {\n            replaceNode(this.label_, this.collapseLabel_);\n        }\n        this.collapsed_ = !this.collapsed_;\n        // manage overview map if it had not been rendered before and control\n        // is expanded\n        var ovmap = this.ovmap_;\n        if (!this.collapsed_) {\n            if (ovmap.isRendered()) {\n                this.viewExtent_ = undefined;\n                ovmap.render();\n                return;\n            }\n            ovmap.updateSize();\n            this.resetExtent_();\n            this.updateBoxAfterOvmapIsRendered_();\n        }\n    };\n    /**\n     * Return `true` if the overview map is collapsible, `false` otherwise.\n     * @return {boolean} True if the widget is collapsible.\n     * @api\n     */\n    OverviewMap.prototype.getCollapsible = function () {\n        return this.collapsible_;\n    };\n    /**\n     * Set whether the overview map should be collapsible.\n     * @param {boolean} collapsible True if the widget is collapsible.\n     * @api\n     */\n    OverviewMap.prototype.setCollapsible = function (collapsible) {\n        if (this.collapsible_ === collapsible) {\n            return;\n        }\n        this.collapsible_ = collapsible;\n        this.element.classList.toggle('ol-uncollapsible');\n        if (!collapsible && this.collapsed_) {\n            this.handleToggle_();\n        }\n    };\n    /**\n     * Collapse or expand the overview map according to the passed parameter. Will\n     * not do anything if the overview map isn't collapsible or if the current\n     * collapsed state is already the one requested.\n     * @param {boolean} collapsed True if the widget is collapsed.\n     * @api\n     */\n    OverviewMap.prototype.setCollapsed = function (collapsed) {\n        if (!this.collapsible_ || this.collapsed_ === collapsed) {\n            return;\n        }\n        this.handleToggle_();\n    };\n    /**\n     * Determine if the overview map is collapsed.\n     * @return {boolean} The overview map is collapsed.\n     * @api\n     */\n    OverviewMap.prototype.getCollapsed = function () {\n        return this.collapsed_;\n    };\n    /**\n     * Return `true` if the overview map view can rotate, `false` otherwise.\n     * @return {boolean} True if the control view can rotate.\n     * @api\n     */\n    OverviewMap.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Set whether the overview map view should rotate with the main map view.\n     * @param {boolean} rotateWithView True if the control view should rotate.\n     * @api\n     */\n    OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n        if (this.rotateWithView_ === rotateWithView) {\n            return;\n        }\n        this.rotateWithView_ = rotateWithView;\n        if (this.getMap().getView().getRotation() !== 0) {\n            if (this.rotateWithView_) {\n                this.handleRotationChanged_();\n            }\n            else {\n                this.ovmap_.getView().setRotation(0);\n            }\n            this.viewExtent_ = undefined;\n            this.validateExtent_();\n            this.updateBox_();\n        }\n    };\n    /**\n     * Return the overview map.\n     * @return {import(\"../PluggableMap.js\").default} Overview map.\n     * @api\n     */\n    OverviewMap.prototype.getOverviewMap = function () {\n        return this.ovmap_;\n    };\n    /**\n     * Update the overview map element.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n    OverviewMap.prototype.render = function (mapEvent) {\n        this.validateExtent_();\n        this.updateBox_();\n    };\n    return OverviewMap;\n}(Control));\nexport default OverviewMap;\n//# sourceMappingURL=OverviewMap.js.map","/**\n * @module ol/source/XYZ\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport TileImage from './TileImage.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Not used if `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get\n * tile URL given a tile coordinate and the projection.\n * Required if `url` or `urls` are not provided.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,\n * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,\n * may be used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case\n * a `tileUrlFunction` can be used, such as:\n * ```js\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';\n *  }\n * ```\n * @api\n */\nvar XYZ = /** @class */ (function (_super) {\n    __extends(XYZ, _super);\n    /**\n     * @param {Options} [opt_options] XYZ options.\n     */\n    function XYZ(opt_options) {\n        var _this = this;\n        var options = opt_options || {};\n        var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n        if (options.interpolate !== undefined) {\n            interpolate = options.interpolate;\n        }\n        var projection = options.projection !== undefined ? options.projection : 'EPSG:3857';\n        var tileGrid = options.tileGrid !== undefined\n            ? options.tileGrid\n            : createXYZ({\n                extent: extentFromProjection(projection),\n                maxResolution: options.maxResolution,\n                maxZoom: options.maxZoom,\n                minZoom: options.minZoom,\n                tileSize: options.tileSize,\n            });\n        _this = _super.call(this, {\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            interpolate: interpolate,\n            opaque: options.opaque,\n            projection: projection,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileGrid: tileGrid,\n            tileLoadFunction: options.tileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            tileUrlFunction: options.tileUrlFunction,\n            url: options.url,\n            urls: options.urls,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n            transition: options.transition,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection,\n        }) || this;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n        return _this;\n    }\n    /**\n     * @return {number} Gutter.\n     */\n    XYZ.prototype.getGutter = function () {\n        return this.gutter_;\n    };\n    return XYZ;\n}(TileImage));\nexport default XYZ;\n//# sourceMappingURL=XYZ.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n/**\n * @enum {string}\n * @protected\n */\nvar Property = {\n    ELEMENT: 'element',\n    MAP: 'map',\n    OFFSET: 'offset',\n    POSITION: 'position',\n    POSITIONING: 'positioning',\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nvar Overlay = /** @class */ (function (_super) {\n    __extends(Overlay, _super);\n    /**\n     * @param {Options} options Overlay options.\n     */\n    function Overlay(options) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {OverlayOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @protected\n         * @type {Options}\n         */\n        _this.options = options;\n        /**\n         * @protected\n         * @type {number|string|undefined}\n         */\n        _this.id = options.id;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.insertFirst =\n            options.insertFirst !== undefined ? options.insertFirst : true;\n        /**\n         * @protected\n         * @type {boolean}\n         */\n        _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.element = document.createElement('div');\n        _this.element.className =\n            options.className !== undefined\n                ? options.className\n                : 'ol-overlay-container ' + CLASS_SELECTABLE;\n        _this.element.style.position = 'absolute';\n        _this.element.style.pointerEvents = 'auto';\n        var autoPan = options.autoPan;\n        if (autoPan && 'object' !== typeof autoPan) {\n            autoPan = {\n                animation: options.autoPanAnimation,\n                margin: options.autoPanMargin,\n            };\n        }\n        /**\n         * @protected\n         * @type {PanIntoViewOptions|false}\n         */\n        _this.autoPan = /** @type {PanIntoViewOptions} */ (autoPan) || false;\n        /**\n         * @protected\n         * @type {{transform_: string,\n         *         visible: boolean}}\n         */\n        _this.rendered = {\n            transform_: '',\n            visible: true,\n        };\n        /**\n         * @protected\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.mapPostrenderListenerKey = null;\n        _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);\n        _this.addChangeListener(Property.MAP, _this.handleMapChanged);\n        _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);\n        _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);\n        _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);\n        if (options.element !== undefined) {\n            _this.setElement(options.element);\n        }\n        _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n        _this.setPositioning(options.positioning || 'top-left');\n        if (options.position !== undefined) {\n            _this.setPosition(options.position);\n        }\n        return _this;\n    }\n    /**\n     * Get the DOM element of this overlay.\n     * @return {HTMLElement|undefined} The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getElement = function () {\n        return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n    };\n    /**\n     * Get the overlay identifier which is set on constructor.\n     * @return {number|string|undefined} Id.\n     * @api\n     */\n    Overlay.prototype.getId = function () {\n        return this.id;\n    };\n    /**\n     * Get the map associated with this overlay.\n     * @return {import(\"./PluggableMap.js\").default|null} The map that the\n     * overlay is part of.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getMap = function () {\n        return /** @type {import(\"./PluggableMap.js\").default|null} */ (this.get(Property.MAP) || null);\n    };\n    /**\n     * Get the offset of this overlay.\n     * @return {Array<number>} The offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getOffset = function () {\n        return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n    };\n    /**\n     * Get the current position of this overlay.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n     *     anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPosition = function () {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(Property.POSITION));\n    };\n    /**\n     * Get the current positioning of this overlay.\n     * @return {Positioning} How the overlay is positioned\n     *     relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.getPositioning = function () {\n        return /** @type {Positioning} */ (this.get(Property.POSITIONING));\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleElementChanged = function () {\n        removeChildren(this.element);\n        var element = this.getElement();\n        if (element) {\n            this.element.appendChild(element);\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleMapChanged = function () {\n        if (this.mapPostrenderListenerKey) {\n            removeNode(this.element);\n            unlistenByKey(this.mapPostrenderListenerKey);\n            this.mapPostrenderListenerKey = null;\n        }\n        var map = this.getMap();\n        if (map) {\n            this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n            this.updatePixelPosition();\n            var container = this.stopEvent\n                ? map.getOverlayContainerStopEvent()\n                : map.getOverlayContainer();\n            if (this.insertFirst) {\n                container.insertBefore(this.element, container.childNodes[0] || null);\n            }\n            else {\n                container.appendChild(this.element);\n            }\n            this.performAutoPan();\n        }\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.render = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handleOffsetChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositionChanged = function () {\n        this.updatePixelPosition();\n        this.performAutoPan();\n    };\n    /**\n     * @protected\n     */\n    Overlay.prototype.handlePositioningChanged = function () {\n        this.updatePixelPosition();\n    };\n    /**\n     * Set the DOM element to be associated with this overlay.\n     * @param {HTMLElement|undefined} element The Element containing the overlay.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setElement = function (element) {\n        this.set(Property.ELEMENT, element);\n    };\n    /**\n     * Set the map to be associated with this overlay.\n     * @param {import(\"./PluggableMap.js\").default|null} map The map that the\n     * overlay is part of. Pass `null` to just remove the overlay from the current map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setMap = function (map) {\n        this.set(Property.MAP, map);\n    };\n    /**\n     * Set the offset for this overlay.\n     * @param {Array<number>} offset Offset.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setOffset = function (offset) {\n        this.set(Property.OFFSET, offset);\n    };\n    /**\n     * Set the position for this overlay. If the position is `undefined` the\n     * overlay is hidden.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n     *     is anchored at.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPosition = function (position) {\n        this.set(Property.POSITION, position);\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary) using the configured autoPan parameters\n     * @protected\n     */\n    Overlay.prototype.performAutoPan = function () {\n        if (this.autoPan) {\n            this.panIntoView(this.autoPan);\n        }\n    };\n    /**\n     * Pan the map so that the overlay is entirely visible in the current viewport\n     * (if necessary).\n     * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action\n     * @api\n     */\n    Overlay.prototype.panIntoView = function (opt_panIntoViewOptions) {\n        var map = this.getMap();\n        if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n            return;\n        }\n        var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n        var element = this.getElement();\n        var overlayRect = this.getRect(element, [\n            outerWidth(element),\n            outerHeight(element),\n        ]);\n        var panIntoViewOptions = opt_panIntoViewOptions || {};\n        var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n        if (!containsExtent(mapRect, overlayRect)) {\n            // the overlay is not completely inside the viewport, so pan the map\n            var offsetLeft = overlayRect[0] - mapRect[0];\n            var offsetRight = mapRect[2] - overlayRect[2];\n            var offsetTop = overlayRect[1] - mapRect[1];\n            var offsetBottom = mapRect[3] - overlayRect[3];\n            var delta = [0, 0];\n            if (offsetLeft < 0) {\n                // move map to the left\n                delta[0] = offsetLeft - myMargin;\n            }\n            else if (offsetRight < 0) {\n                // move map to the right\n                delta[0] = Math.abs(offsetRight) + myMargin;\n            }\n            if (offsetTop < 0) {\n                // move map up\n                delta[1] = offsetTop - myMargin;\n            }\n            else if (offsetBottom < 0) {\n                // move map down\n                delta[1] = Math.abs(offsetBottom) + myMargin;\n            }\n            if (delta[0] !== 0 || delta[1] !== 0) {\n                var center = /** @type {import(\"./coordinate.js\").Coordinate} */ (map.getView().getCenterInternal());\n                var centerPx = map.getPixelFromCoordinateInternal(center);\n                if (!centerPx) {\n                    return;\n                }\n                var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n                var panOptions = panIntoViewOptions.animation || {};\n                map.getView().animateInternal({\n                    center: map.getCoordinateFromPixelInternal(newCenterPx),\n                    duration: panOptions.duration,\n                    easing: panOptions.easing,\n                });\n            }\n        }\n    };\n    /**\n     * Get the extent of an element relative to the document\n     * @param {HTMLElement} element The element.\n     * @param {import(\"./size.js\").Size} size The size of the element.\n     * @return {import(\"./extent.js\").Extent} The extent.\n     * @protected\n     */\n    Overlay.prototype.getRect = function (element, size) {\n        var box = element.getBoundingClientRect();\n        var offsetX = box.left + window.pageXOffset;\n        var offsetY = box.top + window.pageYOffset;\n        return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n    };\n    /**\n     * Set the positioning for this overlay.\n     * @param {Positioning} positioning how the overlay is\n     *     positioned relative to its point on the map.\n     * @observable\n     * @api\n     */\n    Overlay.prototype.setPositioning = function (positioning) {\n        this.set(Property.POSITIONING, positioning);\n    };\n    /**\n     * Modify the visibility of the element.\n     * @param {boolean} visible Element visibility.\n     * @protected\n     */\n    Overlay.prototype.setVisible = function (visible) {\n        if (this.rendered.visible !== visible) {\n            this.element.style.display = visible ? '' : 'none';\n            this.rendered.visible = visible;\n        }\n    };\n    /**\n     * Update pixel position.\n     * @protected\n     */\n    Overlay.prototype.updatePixelPosition = function () {\n        var map = this.getMap();\n        var position = this.getPosition();\n        if (!map || !map.isRendered() || !position) {\n            this.setVisible(false);\n            return;\n        }\n        var pixel = map.getPixelFromCoordinate(position);\n        var mapSize = map.getSize();\n        this.updateRenderedPosition(pixel, mapSize);\n    };\n    /**\n     * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n     * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n     * @protected\n     */\n    Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n        var style = this.element.style;\n        var offset = this.getOffset();\n        var positioning = this.getPositioning();\n        this.setVisible(true);\n        var x = Math.round(pixel[0] + offset[0]) + 'px';\n        var y = Math.round(pixel[1] + offset[1]) + 'px';\n        var posX = '0%';\n        var posY = '0%';\n        if (positioning == 'bottom-right' ||\n            positioning == 'center-right' ||\n            positioning == 'top-right') {\n            posX = '-100%';\n        }\n        else if (positioning == 'bottom-center' ||\n            positioning == 'center-center' ||\n            positioning == 'top-center') {\n            posX = '-50%';\n        }\n        if (positioning == 'bottom-left' ||\n            positioning == 'bottom-center' ||\n            positioning == 'bottom-right') {\n            posY = '-100%';\n        }\n        else if (positioning == 'center-left' ||\n            positioning == 'center-center' ||\n            positioning == 'center-right') {\n            posY = '-50%';\n        }\n        var transform = \"translate(\".concat(posX, \", \").concat(posY, \") translate(\").concat(x, \", \").concat(y, \")\");\n        if (this.rendered.transform_ != transform) {\n            this.rendered.transform_ = transform;\n            style.transform = transform;\n            // @ts-ignore IE9\n            style.msTransform = transform;\n        }\n    };\n    /**\n     * returns the options this Overlay has been created with\n     * @return {Options} overlay options\n     */\n    Overlay.prototype.getOptions = function () {\n        return this.options;\n    };\n    return Overlay;\n}(BaseObject));\nexport default Overlay;\n//# sourceMappingURL=Overlay.js.map"],"sourceRoot":""}