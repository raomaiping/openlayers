{"version":3,"sources":["webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/renderer/webgl/Layer.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/webgl.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/webgl/ContextEventType.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/webgl/Helper.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/webgl/PostProcessingPass.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/webgl/Buffer.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/vec/mat4.js","webpack:///./node_modules/.pnpm/ol@6.15.1/node_modules/ol/control/FullScreen.js"],"names":["extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","WebGLWorkerMessageType","GENERATE_BUFFERS","WebGLLayerRenderer","_super","layer","opt_options","_this","options","inversePixelTransform_","pixelContext_","postProcesses_","postProcesses","uniforms_","uniforms","helper","addChangeListener","MAP","removeHelper","bind","dispatchPreComposeEvent","dispatchPostComposeEvent","context","frameState","getLayer","hasListener","PRECOMPOSE","event_1","undefined","dispatchEvent","POSTCOMPOSE","event_2","reset","setUniforms","dispose","prepareFrame","getRenderSource","incrementGroup","groupNumber","className","i","ii","layerStatesArray","length","renderer","getRenderer","layerClassName","getClassName","canvasCacheKey","mapId","canvasCacheKeyMatches","getCanvas","afterHelperCreated","prepareFrameInternal","disposeInternal","dispatchRenderEvent_","type","pixelRatio","size","event_3","preRender","PRERENDER","postRender","POSTRENDER","getDataAtPixel","pixel","hitTolerance","renderPixel","slice","gl","getGL","layerExtent","getExtent","renderCoordinate","pixelToCoordinateTransform","attributes","getContextAttributes","preserveDrawingBuffer","Uint8Array","data","x","Math","round","y","pixelContext","pixelCanvas","document","createElement","width","height","getContext","clearRect","drawImage","canvas","getImageData","err","colorEncodeId","id","opt_array","array","radix","divide","floor","colorDecodeId","color","mult","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","STREAM_DRAW","STATIC_DRAW","DYNAMIC_DRAW","UNSIGNED_BYTE","UNSIGNED_SHORT","UNSIGNED_INT","FLOAT","CONTEXT_IDS","opt_attributes","antialias","e","WebGLPostProcessingPass","gl_","webGlContext","scaleRatio_","scaleRatio","renderTargetTexture_","createTexture","renderTargetTextureSize_","frameBuffer_","createFramebuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","bindBuffer","bufferData","Float32Array","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","keys","forEach","name","push","value","location","init","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","viewport","internalFormat","RGBA","format","bindTexture","TEXTURE_2D","texImage2D","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","framebufferTexture2D","COLOR_ATTACHMENT0","apply","nextPass","preCompose","postCompose","activeTexture","TEXTURE0","canvasId","renderTargets","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","uniform2f","uniform1i","opacity","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","texture","concat","isArray","uniform3f","uniform4f","DefaultUniform","PROJECTION_MATRIX","OFFSET_SCALE_MATRIX","OFFSET_ROTATION_MATRIX","TIME","ZOOM","RESOLUTION","AttributeType","canvasCache","getSharedCanvasCacheKey","key","uniqueCanvasCacheKeyCount","WebGLHelper","boundHandleWebGLContextLost_","handleWebGLContextLost","boundHandleWebGLContextRestored_","handleWebGLContextRestored","canvasCacheKey_","canvas_","cacheItem","style","position","left","users","bufferCache_","extensionCache_","currentProgram_","addEventListener","ContextEventType","offsetRotateMatrix_","offsetScaleMatrix_","tmpMat4_","uniformLocations_","attribLocations_","postProcessPasses_","map","shaderCompileErrors_","startTime_","Date","now","name_1","getExtension","extension","buffer","bufferKey","bufferCache","webGlBuffer","getType","flushBufferData","getArray","getUsage","deleteBuffer","buf","bufferCacheEntry","isContextLost","removeEventListener","loseContext","releaseCanvas","prepareDraw","opt_disableAlphaBlend","ZERO","applyFrameState","prepareDrawToRenderTarget","renderTarget","getSize","getFramebuffer","getTexture","drawElements","start","end","elementType","numItems","offsetInBytes","finalizeDraw","rotation","viewState","offsetScaleMatrix","offsetRotateMatrix","setUniformMatrixValue","setUniformFloatValue","zoom","resolution","HTMLImageElement","prevValue","complete","program","source","shader","getProgram","fragmentShaderSource","vertexShaderSource","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","Error","deleteShader","getProgramParameter","LINK_STATUS","getAttributeLocation","makeProjectionTransform","transform","center","setUniformFloatVec4","uniform4fv","uniformMatrix4fv","enableAttributeArray_","attribName","stride","offset","enableAttributes","attr","getByteSizeFromType","computeAttributesStride","opt_data","opt_texture","Disposable","BYTES_PER_ELEMENT","Uint16Array","Uint32Array","BufferUsage","WebGLArrayBuffer","opt_usage","usage","ofSize","getArrayClassForType","fromArray","arrayClass","from","fromArrayBuffer","fromTransform","mat4","events","FullScreenEventType","FullScreen","element","target","on","once","un","keys_","source_","isInFullscreen_","boundHandleMapTargetChange_","handleMapTargetChange_","cssClassName_","documentListeners_","activeClassName_","activeClassName","split","inactiveClassName_","inactiveClassName","label","labelNode_","createTextNode","labelActive","labelActiveNode_","tipLabel","button_","title","setAttribute","appendChild","CLICK","handleClick_","setClassName_","event","preventDefault","handleFullScreen_","getMap","doc","getOwnerDocument","isFullScreenSupported","isFullScreen","exitFullscreen","exitFullScreen","getElementById","getTargetElement","requestFullScreen","requestFullScreenWithKeys","handleFullScreenChange_","wasInFullscreen","updateSize","fullscreen","_a","_b","_c","_d","classList","remove","add","setMap","oldMap","removeChangeListener","TARGET","listeners","body","requestFullscreen","fullscreenEnabled","fullscreenElement"],"mappings":"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","file":"js/chunk-0d4f3c53.205ad004.js","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/webgl/Layer\n */\nimport LayerProperty from '../../layer/Property.js';\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport WebGLHelper from '../../webgl/Helper.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, } from '../../transform.js';\nimport { containsCoordinate } from '../../extent.js';\n/**\n * @enum {string}\n */\nexport var WebGLWorkerMessageType = {\n    GENERATE_BUFFERS: 'GENERATE_BUFFERS',\n};\n/**\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\n * the generated buffers in it.\n * Note that any addition properties present in the message *will* be sent back to the main thread.\n * @property {WebGLWorkerMessageType} type Message type\n * @property {ArrayBuffer} renderInstructions Render instructions raw binary buffer.\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\n * @property {number} [customAttributesCount] Amount of custom attributes count in the render instructions.\n */\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n/**\n * @typedef {Object} Options\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar WebGLLayerRenderer = /** @class */ (function (_super) {\n    __extends(WebGLLayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     * @param {Options} [opt_options] Options.\n     */\n    function WebGLLayerRenderer(layer, opt_options) {\n        var _this = _super.call(this, layer) || this;\n        var options = opt_options || {};\n        /**\n         * The transform for viewport CSS pixels to rendered pixels.  This transform is only\n         * set before dispatching rendering events.\n         * @private\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.inversePixelTransform_ = createTransform();\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.pixelContext_ = null;\n        /**\n         * @private\n         */\n        _this.postProcesses_ = options.postProcesses;\n        /**\n         * @private\n         */\n        _this.uniforms_ = options.uniforms;\n        /**\n         * @type {WebGLHelper}\n         * @protected\n         */\n        _this.helper;\n        layer.addChangeListener(LayerProperty.MAP, _this.removeHelper.bind(_this));\n        _this.dispatchPreComposeEvent = _this.dispatchPreComposeEvent.bind(_this);\n        _this.dispatchPostComposeEvent = _this.dispatchPostComposeEvent.bind(_this);\n        return _this;\n    }\n    /**\n     * @param {WebGLRenderingContext} context The WebGL rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.dispatchPreComposeEvent = function (context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\n            var event_1 = new RenderEvent(RenderEventType.PRECOMPOSE, undefined, frameState, context);\n            layer.dispatchEvent(event_1);\n        }\n    };\n    /**\n     * @param {WebGLRenderingContext} context The WebGL rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.dispatchPostComposeEvent = function (context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\n            var event_2 = new RenderEvent(RenderEventType.POSTCOMPOSE, undefined, frameState, context);\n            layer.dispatchEvent(event_2);\n        }\n    };\n    /**\n     * Reset options (only handles uniforms).\n     * @param {Options} options Options.\n     */\n    WebGLLayerRenderer.prototype.reset = function (options) {\n        this.uniforms_ = options.uniforms;\n        if (this.helper) {\n            this.helper.setUniforms(this.uniforms_);\n        }\n    };\n    /**\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.removeHelper = function () {\n        if (this.helper) {\n            this.helper.dispose();\n            delete this.helper;\n        }\n    };\n    /**\n     * Determine whether renderFrame should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    WebGLLayerRenderer.prototype.prepareFrame = function (frameState) {\n        if (this.getLayer().getRenderSource()) {\n            var incrementGroup = true;\n            var groupNumber = -1;\n            var className = void 0;\n            for (var i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\n                var layer = frameState.layerStatesArray[i].layer;\n                var renderer = layer.getRenderer();\n                if (!(renderer instanceof WebGLLayerRenderer)) {\n                    incrementGroup = true;\n                    continue;\n                }\n                var layerClassName = layer.getClassName();\n                if (incrementGroup || layerClassName !== className) {\n                    groupNumber += 1;\n                    incrementGroup = false;\n                }\n                className = layerClassName;\n                if (renderer === this) {\n                    break;\n                }\n            }\n            var canvasCacheKey = 'map/' + frameState.mapId + '/group/' + groupNumber;\n            if (!this.helper || !this.helper.canvasCacheKeyMatches(canvasCacheKey)) {\n                this.removeHelper();\n                this.helper = new WebGLHelper({\n                    postProcesses: this.postProcesses_,\n                    uniforms: this.uniforms_,\n                    canvasCacheKey: canvasCacheKey,\n                });\n                if (className) {\n                    this.helper.getCanvas().className = className;\n                }\n                this.afterHelperCreated();\n            }\n        }\n        return this.prepareFrameInternal(frameState);\n    };\n    /**\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.afterHelperCreated = function () { };\n    /**\n     * Determine whether renderFrame should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n        return true;\n    };\n    /**\n     * Clean up.\n     */\n    WebGLLayerRenderer.prototype.disposeInternal = function () {\n        this.removeHelper();\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {WebGLRenderingContext} context The rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            composeTransform(this.inversePixelTransform_, 0, 0, frameState.pixelRatio, -frameState.pixelRatio, 0, 0, -frameState.size[1]);\n            var event_3 = new RenderEvent(type, this.inversePixelTransform_, frameState, context);\n            layer.dispatchEvent(event_3);\n        }\n    };\n    /**\n     * @param {WebGLRenderingContext} context The rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.preRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    };\n    /**\n     * @param {WebGLRenderingContext} context The rendering context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    WebGLLayerRenderer.prototype.postRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n     *    location, null will be returned.  If there is data, but pixel values cannot be\n     *    returned, and empty array will be returned.\n     */\n    WebGLLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n        var renderPixel = applyTransform([frameState.pixelRatio, 0, 0, frameState.pixelRatio, 0, 0], pixel.slice());\n        var gl = this.helper.getGL();\n        if (!gl) {\n            return null;\n        }\n        var layer = this.getLayer();\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n            /** get only data inside of the layer extent */\n            if (!containsCoordinate(layerExtent, renderCoordinate)) {\n                return null;\n            }\n        }\n        var attributes = gl.getContextAttributes();\n        if (!attributes || !attributes.preserveDrawingBuffer) {\n            // we assume there is data at the given pixel (although there might not be)\n            return new Uint8Array();\n        }\n        var x = Math.round(renderPixel[0]);\n        var y = Math.round(renderPixel[1]);\n        var pixelContext = this.pixelContext_;\n        if (!pixelContext) {\n            var pixelCanvas = document.createElement('canvas');\n            pixelCanvas.width = 1;\n            pixelCanvas.height = 1;\n            pixelContext = pixelCanvas.getContext('2d');\n            this.pixelContext_ = pixelContext;\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(gl.canvas, x, y, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            return data;\n        }\n        if (data[3] === 0) {\n            return null;\n        }\n        return data;\n    };\n    return WebGLLayerRenderer;\n}(LayerRenderer));\nvar tmpArray_ = [];\nvar bufferPositions_ = { vertexPosition: 0, indexPosition: 0 };\nfunction writePointVertex(buffer, pos, x, y, index) {\n    buffer[pos + 0] = x;\n    buffer[pos + 1] = y;\n    buffer[pos + 2] = index;\n}\n/**\n * An object holding positions both in an index and a vertex buffer.\n * @typedef {Object} BufferPositions\n * @property {number} vertexPosition Position in the vertex buffer\n * @property {number} indexPosition Position in the index buffer\n */\n/**\n * Pushes a quad (two triangles) based on a point geometry\n * @param {Float32Array} instructions Array of render instructions for points.\n * @param {number} elementIndex Index from which render instructions will be read.\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\n * @param {number} customAttributesCount Amount of custom attributes for each element.\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\n * @return {BufferPositions} New buffer positions where to write next\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\n * @property {number} indexPosition New position in the index buffer where future writes should start.\n * @private\n */\nexport function writePointFeatureToBuffers(instructions, elementIndex, vertexBuffer, indexBuffer, customAttributesCount, bufferPositions) {\n    // This is for x, y and index\n    var baseVertexAttrsCount = 3;\n    var baseInstructionsCount = 2;\n    var stride = baseVertexAttrsCount + customAttributesCount;\n    var x = instructions[elementIndex + 0];\n    var y = instructions[elementIndex + 1];\n    // read custom numerical attributes on the feature\n    var customAttrs = tmpArray_;\n    customAttrs.length = customAttributesCount;\n    for (var i = 0; i < customAttrs.length; i++) {\n        customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\n    }\n    var vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\n    var iPos = bufferPositions ? bufferPositions.indexPosition : 0;\n    var baseIndex = vPos / stride;\n    // push vertices for each of the four quad corners (first standard then custom attributes)\n    writePointVertex(vertexBuffer, vPos, x, y, 0);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 1);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 2);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    writePointVertex(vertexBuffer, vPos, x, y, 3);\n    customAttrs.length &&\n        vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n    vPos += stride;\n    indexBuffer[iPos++] = baseIndex;\n    indexBuffer[iPos++] = baseIndex + 1;\n    indexBuffer[iPos++] = baseIndex + 3;\n    indexBuffer[iPos++] = baseIndex + 1;\n    indexBuffer[iPos++] = baseIndex + 2;\n    indexBuffer[iPos++] = baseIndex + 3;\n    bufferPositions_.vertexPosition = vPos;\n    bufferPositions_.indexPosition = iPos;\n    return bufferPositions_;\n}\n/**\n * Returns a texture of 1x1 pixel, white\n * @private\n * @return {ImageData} Image data.\n */\nexport function getBlankImageData() {\n    var canvas = document.createElement('canvas');\n    var image = canvas.getContext('2d').createImageData(1, 1);\n    image.data[0] = 255;\n    image.data[1] = 255;\n    image.data[2] = 255;\n    image.data[3] = 255;\n    return image;\n}\n/**\n * Generates a color array based on a numerical id\n * Note: the range for each component is 0 to 1 with 256 steps\n * @param {number} id Id\n * @param {Array<number>} [opt_array] Reusable array\n * @return {Array<number>} Color array containing the encoded id\n */\nexport function colorEncodeId(id, opt_array) {\n    var array = opt_array || [];\n    var radix = 256;\n    var divide = radix - 1;\n    array[0] = Math.floor(id / radix / radix / radix) / divide;\n    array[1] = (Math.floor(id / radix / radix) % radix) / divide;\n    array[2] = (Math.floor(id / radix) % radix) / divide;\n    array[3] = (id % radix) / divide;\n    return array;\n}\n/**\n * Reads an id from a color-encoded array\n * Note: the expected range for each component is 0 to 1 with 256 steps.\n * @param {Array<number>} color Color array containing the encoded id\n * @return {number} Decoded id\n */\nexport function colorDecodeId(color) {\n    var id = 0;\n    var radix = 256;\n    var mult = radix - 1;\n    id += Math.round(color[0] * radix * radix * radix * mult);\n    id += Math.round(color[1] * radix * radix * mult);\n    id += Math.round(color[2] * radix * mult);\n    id += Math.round(color[3] * mult);\n    return id;\n}\nexport default WebGLLayerRenderer;\n//# sourceMappingURL=Layer.js.map","/**\n * @module ol/webgl\n */\nimport { SAFARI_BUG_237906 } from './has.js';\nimport { assign } from './obj.js';\n/**\n * Constants taken from goog.webgl\n */\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\nexport var ARRAY_BUFFER = 0x8892;\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\nexport var ELEMENT_ARRAY_BUFFER = 0x8893;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport var STREAM_DRAW = 0x88e0;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport var STATIC_DRAW = 0x88e4;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\nexport var DYNAMIC_DRAW = 0x88e8;\n/**\n * @const\n * @type {number}\n */\nexport var UNSIGNED_BYTE = 0x1401;\n/**\n * @const\n * @type {number}\n */\nexport var UNSIGNED_SHORT = 0x1403;\n/**\n * @const\n * @type {number}\n */\nexport var UNSIGNED_INT = 0x1405;\n/**\n * @const\n * @type {number}\n */\nexport var FLOAT = 0x1406;\n/** end of goog.webgl constants\n */\n/**\n * @const\n * @type {Array<string>}\n */\nvar CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [opt_attributes] Attributes.\n * @return {WebGLRenderingContext} WebGL rendering context.\n */\nexport function getContext(canvas, opt_attributes) {\n    var attributes = assign({\n        preserveDrawingBuffer: true,\n        antialias: SAFARI_BUG_237906 ? false : true, // https://bugs.webkit.org/show_bug.cgi?id=237906\n    }, opt_attributes);\n    var ii = CONTEXT_IDS.length;\n    for (var i = 0; i < ii; ++i) {\n        try {\n            var context = canvas.getContext(CONTEXT_IDS[i], attributes);\n            if (context) {\n                return /** @type {!WebGLRenderingContext} */ (context);\n            }\n        }\n        catch (e) {\n            // pass\n        }\n    }\n    return null;\n}\n/**\n * @type {Array<string>}\n */\nvar supportedExtensions;\n/**\n * @return {Array<string>} List of supported WebGL extensions.\n */\nexport function getSupportedExtensions() {\n    if (!supportedExtensions) {\n        var canvas = document.createElement('canvas');\n        var gl = getContext(canvas);\n        if (gl) {\n            supportedExtensions = gl.getSupportedExtensions();\n        }\n    }\n    return supportedExtensions;\n}\n//# sourceMappingURL=webgl.js.map","/**\n * @module ol/webgl/ContextEventType\n */\n/**\n * @enum {string}\n */\nexport default {\n    LOST: 'webglcontextlost',\n    RESTORED: 'webglcontextrestored',\n};\n//# sourceMappingURL=ContextEventType.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/webgl/Helper\n */\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport { FLOAT, UNSIGNED_BYTE, UNSIGNED_INT, UNSIGNED_SHORT, getContext, } from '../webgl.js';\nimport { clear } from '../obj.js';\nimport { compose as composeTransform, create as createTransform, reset as resetTransform, rotate as rotateTransform, scale as scaleTransform, } from '../transform.js';\nimport { create, fromTransform } from '../vec/mat4.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\nexport var ShaderType = {\n    FRAGMENT_SHADER: 0x8b30,\n    VERTEX_SHADER: 0x8b31,\n};\n/**\n * Uniform names used in the default shaders: `PROJECTION_MATRIX`, `OFFSET_SCALE_MATRIX`.\n * and `OFFSET_ROTATION_MATRIX`.\n * @enum {string}\n */\nexport var DefaultUniform = {\n    PROJECTION_MATRIX: 'u_projectionMatrix',\n    OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',\n    OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix',\n    TIME: 'u_time',\n    ZOOM: 'u_zoom',\n    RESOLUTION: 'u_resolution',\n};\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\nexport var AttributeType = {\n    UNSIGNED_BYTE: UNSIGNED_BYTE,\n    UNSIGNED_SHORT: UNSIGNED_SHORT,\n    UNSIGNED_INT: UNSIGNED_INT,\n    FLOAT: FLOAT,\n};\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import(\"../transform\").Transform} UniformLiteralValue\n */\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../PluggableMap.js\").FrameState):UniformLiteralValue} UniformValue\n */\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {HTMLCanvasElement} canvas Canvas element.\n * @property {number} users The count of users of this canvas.\n */\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\nvar canvasCache = {};\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\nfunction getSharedCanvasCacheKey(key) {\n    return 'shared/' + key;\n}\nvar uniqueCanvasCacheKeyCount = 0;\n/**\n * @return {string} The unique cache key.\n */\nfunction getUniqueCanvasCacheKey() {\n    var key = 'unique/' + uniqueCanvasCacheKeyCount;\n    uniqueCanvasCacheKeyCount += 1;\n    return key;\n}\n/**\n * @param {string} key The cache key for the canvas.\n * @return {HTMLCanvasElement} The canvas.\n */\nfunction getCanvas(key) {\n    var cacheItem = canvasCache[key];\n    if (!cacheItem) {\n        var canvas = document.createElement('canvas');\n        canvas.style.position = 'absolute';\n        canvas.style.left = '0';\n        cacheItem = { users: 0, canvas: canvas };\n        canvasCache[key] = cacheItem;\n    }\n    cacheItem.users += 1;\n    return cacheItem.canvas;\n}\n/**\n * @param {string} key The cache key for the canvas.\n */\nfunction releaseCanvas(key) {\n    var cacheItem = canvasCache[key];\n    if (!cacheItem) {\n        return;\n    }\n    cacheItem.users -= 1;\n    if (cacheItem.users > 0) {\n        return;\n    }\n    var canvas = cacheItem.canvas;\n    var gl = getContext(canvas);\n    var extension = gl.getExtension('WEBGL_lose_context');\n    if (extension) {\n        extension.loseContext();\n    }\n    delete canvasCache[key];\n}\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes enableAttributes()} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n *\n * @api\n */\nvar WebGLHelper = /** @class */ (function (_super) {\n    __extends(WebGLHelper, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function WebGLHelper(opt_options) {\n        var _this = _super.call(this) || this;\n        var options = opt_options || {};\n        /** @private */\n        _this.boundHandleWebGLContextLost_ = _this.handleWebGLContextLost.bind(_this);\n        /** @private */\n        _this.boundHandleWebGLContextRestored_ =\n            _this.handleWebGLContextRestored.bind(_this);\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.canvasCacheKey_ = options.canvasCacheKey\n            ? getSharedCanvasCacheKey(options.canvasCacheKey)\n            : getUniqueCanvasCacheKey();\n        /**\n         * @private\n         * @type {HTMLCanvasElement}\n         */\n        _this.canvas_ = getCanvas(_this.canvasCacheKey_);\n        /**\n         * @private\n         * @type {WebGLRenderingContext}\n         */\n        _this.gl_ = getContext(_this.canvas_);\n        /**\n         * @private\n         * @type {!Object<string, BufferCacheEntry>}\n         */\n        _this.bufferCache_ = {};\n        /**\n         * @private\n         * @type {Object<string, Object>}\n         */\n        _this.extensionCache_ = {};\n        /**\n         * @private\n         * @type {WebGLProgram}\n         */\n        _this.currentProgram_ = null;\n        _this.canvas_.addEventListener(ContextEventType.LOST, _this.boundHandleWebGLContextLost_);\n        _this.canvas_.addEventListener(ContextEventType.RESTORED, _this.boundHandleWebGLContextRestored_);\n        /**\n         * @private\n         * @type {import(\"../transform.js\").Transform}\n         */\n        _this.offsetRotateMatrix_ = createTransform();\n        /**\n         * @private\n         * @type {import(\"../transform.js\").Transform}\n         */\n        _this.offsetScaleMatrix_ = createTransform();\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.tmpMat4_ = create();\n        /**\n         * @private\n         * @type {Object<string, WebGLUniformLocation>}\n         */\n        _this.uniformLocations_ = {};\n        /**\n         * @private\n         * @type {Object<string, number>}\n         */\n        _this.attribLocations_ = {};\n        /**\n         * Holds info about custom uniforms used in the post processing pass.\n         * If the uniform is a texture, the WebGL Texture object will be stored here.\n         * @type {Array<UniformInternalDescription>}\n         * @private\n         */\n        _this.uniforms_ = [];\n        if (options.uniforms) {\n            _this.setUniforms(options.uniforms);\n        }\n        var gl = _this.getGL();\n        /**\n         * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n         * options. If no post process was given, a default one is used (so as not to have to make an exception to\n         * the frame buffer logic).\n         * @type {Array<WebGLPostProcessingPass>}\n         * @private\n         */\n        _this.postProcessPasses_ = options.postProcesses\n            ? options.postProcesses.map(function (options) {\n                return new WebGLPostProcessingPass({\n                    webGlContext: gl,\n                    scaleRatio: options.scaleRatio,\n                    vertexShader: options.vertexShader,\n                    fragmentShader: options.fragmentShader,\n                    uniforms: options.uniforms,\n                });\n            })\n            : [new WebGLPostProcessingPass({ webGlContext: gl })];\n        /**\n         * @type {string|null}\n         * @private\n         */\n        _this.shaderCompileErrors_ = null;\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.startTime_ = Date.now();\n        return _this;\n    }\n    /**\n     * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n     */\n    WebGLHelper.prototype.setUniforms = function (uniforms) {\n        this.uniforms_ = [];\n        for (var name_1 in uniforms) {\n            this.uniforms_.push({\n                name: name_1,\n                value: uniforms[name_1],\n            });\n        }\n        this.uniformLocations_ = {};\n    };\n    /**\n     * @param {string} canvasCacheKey The canvas cache key.\n     * @return {boolean} The provided key matches the one this helper was constructed with.\n     */\n    WebGLHelper.prototype.canvasCacheKeyMatches = function (canvasCacheKey) {\n        return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n    };\n    /**\n     * Get a WebGL extension.  If the extension is not supported, null is returned.\n     * Extensions are cached after they are enabled for the first time.\n     * @param {string} name The extension name.\n     * @return {Object|null} The extension or null if not supported.\n     */\n    WebGLHelper.prototype.getExtension = function (name) {\n        if (name in this.extensionCache_) {\n            return this.extensionCache_[name];\n        }\n        var extension = this.gl_.getExtension(name);\n        this.extensionCache_[name] = extension;\n        return extension;\n    };\n    /**\n     * Just bind the buffer if it's in the cache. Otherwise create\n     * the WebGL buffer, bind it, populate it, and add an entry to\n     * the cache.\n     * @param {import(\"./Buffer\").default} buffer Buffer.\n     * @api\n     */\n    WebGLHelper.prototype.bindBuffer = function (buffer) {\n        var gl = this.getGL();\n        var bufferKey = getUid(buffer);\n        var bufferCache = this.bufferCache_[bufferKey];\n        if (!bufferCache) {\n            var webGlBuffer = gl.createBuffer();\n            bufferCache = {\n                buffer: buffer,\n                webGlBuffer: webGlBuffer,\n            };\n            this.bufferCache_[bufferKey] = bufferCache;\n        }\n        gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n    };\n    /**\n     * Update the data contained in the buffer array; this is required for the\n     * new data to be rendered\n     * @param {import(\"./Buffer\").default} buffer Buffer.\n     * @api\n     */\n    WebGLHelper.prototype.flushBufferData = function (buffer) {\n        var gl = this.getGL();\n        this.bindBuffer(buffer);\n        gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n    };\n    /**\n     * @param {import(\"./Buffer.js\").default} buf Buffer.\n     */\n    WebGLHelper.prototype.deleteBuffer = function (buf) {\n        var gl = this.getGL();\n        var bufferKey = getUid(buf);\n        var bufferCacheEntry = this.bufferCache_[bufferKey];\n        if (bufferCacheEntry && !gl.isContextLost()) {\n            gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\n        }\n        delete this.bufferCache_[bufferKey];\n    };\n    /**\n     * Clean up.\n     */\n    WebGLHelper.prototype.disposeInternal = function () {\n        this.canvas_.removeEventListener(ContextEventType.LOST, this.boundHandleWebGLContextLost_);\n        this.canvas_.removeEventListener(ContextEventType.RESTORED, this.boundHandleWebGLContextRestored_);\n        releaseCanvas(this.canvasCacheKey_);\n        delete this.gl_;\n        delete this.canvas_;\n    };\n    /**\n     * Clear the buffer & set the viewport to draw.\n     * Post process passes will be initialized here, the first one being bound as a render target for\n     * subsequent draw calls.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.\n     * @api\n     */\n    WebGLHelper.prototype.prepareDraw = function (frameState, opt_disableAlphaBlend) {\n        var gl = this.getGL();\n        var canvas = this.getCanvas();\n        var size = frameState.size;\n        var pixelRatio = frameState.pixelRatio;\n        canvas.width = size[0] * pixelRatio;\n        canvas.height = size[1] * pixelRatio;\n        canvas.style.width = size[0] + 'px';\n        canvas.style.height = size[1] + 'px';\n        gl.useProgram(this.currentProgram_);\n        // loop backwards in post processes list\n        for (var i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n            this.postProcessPasses_[i].init(frameState);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.clearColor(0.0, 0.0, 0.0, 0.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n        gl.useProgram(this.currentProgram_);\n        this.applyFrameState(frameState);\n        this.applyUniforms(frameState);\n    };\n    /**\n     * Clear the render target & bind it for future draw operations.\n     * This is similar to `prepareDraw`, only post processes will not be applied.\n     * Note: the whole viewport will be drawn to the render target, regardless of its size.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n     * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.\n     */\n    WebGLHelper.prototype.prepareDrawToRenderTarget = function (frameState, renderTarget, opt_disableAlphaBlend) {\n        var gl = this.getGL();\n        var size = renderTarget.getSize();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n        gl.viewport(0, 0, size[0], size[1]);\n        gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n        gl.clearColor(0.0, 0.0, 0.0, 0.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n        gl.useProgram(this.currentProgram_);\n        this.applyFrameState(frameState);\n        this.applyUniforms(frameState);\n    };\n    /**\n     * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n     * @param {number} start Start index.\n     * @param {number} end End index.\n     * @api\n     */\n    WebGLHelper.prototype.drawElements = function (start, end) {\n        var gl = this.getGL();\n        this.getExtension('OES_element_index_uint');\n        var elementType = gl.UNSIGNED_INT;\n        var elementSize = 4;\n        var numItems = end - start;\n        var offsetInBytes = start * elementSize;\n        gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n    };\n    /**\n     * Apply the successive post process passes which will eventually render to the actual canvas.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [preCompose] Called before composing.\n     * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [postCompose] Called before composing.\n     */\n    WebGLHelper.prototype.finalizeDraw = function (frameState, preCompose, postCompose) {\n        // apply post processes using the next one as target\n        for (var i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n            if (i === ii - 1) {\n                this.postProcessPasses_[i].apply(frameState, null, preCompose, postCompose);\n            }\n            else {\n                this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1]);\n            }\n        }\n    };\n    /**\n     * @return {HTMLCanvasElement} Canvas.\n     * @api\n     */\n    WebGLHelper.prototype.getCanvas = function () {\n        return this.canvas_;\n    };\n    /**\n     * Get the WebGL rendering context\n     * @return {WebGLRenderingContext} The rendering context.\n     * @api\n     */\n    WebGLHelper.prototype.getGL = function () {\n        return this.gl_;\n    };\n    /**\n     * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    WebGLHelper.prototype.applyFrameState = function (frameState) {\n        var size = frameState.size;\n        var rotation = frameState.viewState.rotation;\n        var offsetScaleMatrix = resetTransform(this.offsetScaleMatrix_);\n        scaleTransform(offsetScaleMatrix, 2 / size[0], 2 / size[1]);\n        var offsetRotateMatrix = resetTransform(this.offsetRotateMatrix_);\n        if (rotation !== 0) {\n            rotateTransform(offsetRotateMatrix, -rotation);\n        }\n        this.setUniformMatrixValue(DefaultUniform.OFFSET_SCALE_MATRIX, fromTransform(this.tmpMat4_, offsetScaleMatrix));\n        this.setUniformMatrixValue(DefaultUniform.OFFSET_ROTATION_MATRIX, fromTransform(this.tmpMat4_, offsetRotateMatrix));\n        this.setUniformFloatValue(DefaultUniform.TIME, (Date.now() - this.startTime_) * 0.001);\n        this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n        this.setUniformFloatValue(DefaultUniform.RESOLUTION, frameState.viewState.resolution);\n    };\n    /**\n     * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    WebGLHelper.prototype.applyUniforms = function (frameState) {\n        var gl = this.getGL();\n        var value;\n        var textureSlot = 0;\n        this.uniforms_.forEach(function (uniform) {\n            value =\n                typeof uniform.value === 'function'\n                    ? uniform.value(frameState)\n                    : uniform.value;\n            // apply value based on type\n            if (value instanceof HTMLCanvasElement ||\n                value instanceof HTMLImageElement ||\n                value instanceof ImageData) {\n                // create a texture & put data\n                if (!uniform.texture) {\n                    uniform.prevValue = undefined;\n                    uniform.texture = gl.createTexture();\n                }\n                gl.activeTexture(gl[\"TEXTURE\".concat(textureSlot)]);\n                gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                var imageReady = !(value instanceof HTMLImageElement) ||\n                    /** @type {HTMLImageElement} */ (value).complete;\n                if (imageReady && uniform.prevValue !== value) {\n                    uniform.prevValue = value;\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n                }\n                // fill texture slots by increasing index\n                gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);\n            }\n            else if (Array.isArray(value) && value.length === 6) {\n                this.setUniformMatrixValue(uniform.name, fromTransform(this.tmpMat4_, value));\n            }\n            else if (Array.isArray(value) && value.length <= 4) {\n                switch (value.length) {\n                    case 2:\n                        gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);\n                        return;\n                    case 3:\n                        gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);\n                        return;\n                    case 4:\n                        gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);\n                        return;\n                    default:\n                        return;\n                }\n            }\n            else if (typeof value === 'number') {\n                gl.uniform1f(this.getUniformLocation(uniform.name), value);\n            }\n        }.bind(this));\n    };\n    /**\n     * Use a program.  If the program is already in use, this will return `false`.\n     * @param {WebGLProgram} program Program.\n     * @return {boolean} Changed.\n     * @api\n     */\n    WebGLHelper.prototype.useProgram = function (program) {\n        if (program == this.currentProgram_) {\n            return false;\n        }\n        else {\n            var gl = this.getGL();\n            gl.useProgram(program);\n            this.currentProgram_ = program;\n            this.uniformLocations_ = {};\n            this.attribLocations_ = {};\n            return true;\n        }\n    };\n    /**\n     * Will attempt to compile a vertex or fragment shader based on source\n     * On error, the shader will be returned but\n     * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n     * Use `gl.getShaderInfoLog(shader)` to have details\n     * @param {string} source Shader source\n     * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n     * @return {WebGLShader} Shader object\n     */\n    WebGLHelper.prototype.compileShader = function (source, type) {\n        var gl = this.getGL();\n        var shader = gl.createShader(type);\n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        return shader;\n    };\n    /**\n     * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n     * @param {string} fragmentShaderSource Fragment shader source.\n     * @param {string} vertexShaderSource Vertex shader source.\n     * @return {WebGLProgram} Program\n     * @api\n     */\n    WebGLHelper.prototype.getProgram = function (fragmentShaderSource, vertexShaderSource) {\n        var gl = this.getGL();\n        var fragmentShader = this.compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n        var vertexShader = this.compileShader(vertexShaderSource, gl.VERTEX_SHADER);\n        var program = gl.createProgram();\n        gl.attachShader(program, fragmentShader);\n        gl.attachShader(program, vertexShader);\n        gl.linkProgram(program);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            var message = \"Fragment shader compliation failed: \".concat(gl.getShaderInfoLog(fragmentShader));\n            throw new Error(message);\n        }\n        gl.deleteShader(fragmentShader);\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n            var message = \"Vertex shader compilation failed: \".concat(gl.getShaderInfoLog(vertexShader));\n            throw new Error(message);\n        }\n        gl.deleteShader(vertexShader);\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n            var message = \"GL program linking failed: \".concat(gl.getShaderInfoLog(vertexShader));\n            throw new Error(message);\n        }\n        return program;\n    };\n    /**\n     * Will get the location from the shader or the cache\n     * @param {string} name Uniform name\n     * @return {WebGLUniformLocation} uniformLocation\n     * @api\n     */\n    WebGLHelper.prototype.getUniformLocation = function (name) {\n        if (this.uniformLocations_[name] === undefined) {\n            this.uniformLocations_[name] = this.getGL().getUniformLocation(this.currentProgram_, name);\n        }\n        return this.uniformLocations_[name];\n    };\n    /**\n     * Will get the location from the shader or the cache\n     * @param {string} name Attribute name\n     * @return {number} attribLocation\n     * @api\n     */\n    WebGLHelper.prototype.getAttributeLocation = function (name) {\n        if (this.attribLocations_[name] === undefined) {\n            this.attribLocations_[name] = this.getGL().getAttribLocation(this.currentProgram_, name);\n        }\n        return this.attribLocations_[name];\n    };\n    /**\n     * Modifies the given transform to apply the rotation/translation/scaling of the given frame state.\n     * The resulting transform can be used to convert world space coordinates to view coordinates.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../transform\").Transform} transform Transform to update.\n     * @return {import(\"../transform\").Transform} The updated transform object.\n     * @api\n     */\n    WebGLHelper.prototype.makeProjectionTransform = function (frameState, transform) {\n        var size = frameState.size;\n        var rotation = frameState.viewState.rotation;\n        var resolution = frameState.viewState.resolution;\n        var center = frameState.viewState.center;\n        resetTransform(transform);\n        composeTransform(transform, 0, 0, 2 / (resolution * size[0]), 2 / (resolution * size[1]), -rotation, -center[0], -center[1]);\n        return transform;\n    };\n    /**\n     * Give a value for a standard float uniform\n     * @param {string} uniform Uniform name\n     * @param {number} value Value\n     * @api\n     */\n    WebGLHelper.prototype.setUniformFloatValue = function (uniform, value) {\n        this.getGL().uniform1f(this.getUniformLocation(uniform), value);\n    };\n    /**\n     * Give a value for a vec4 uniform\n     * @param {string} uniform Uniform name\n     * @param {Array<number>} value Array of length 4.\n     */\n    WebGLHelper.prototype.setUniformFloatVec4 = function (uniform, value) {\n        this.getGL().uniform4fv(this.getUniformLocation(uniform), value);\n    };\n    /**\n     * Give a value for a standard matrix4 uniform\n     * @param {string} uniform Uniform name\n     * @param {Array<number>} value Matrix value\n     * @api\n     */\n    WebGLHelper.prototype.setUniformMatrixValue = function (uniform, value) {\n        this.getGL().uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n    };\n    /**\n     * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n     * internally.\n     * @param {string} attribName Attribute name\n     * @param {number} size Number of components per attributes\n     * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n     * @param {number} stride Stride in bytes (0 means attribs are packed)\n     * @param {number} offset Offset in bytes\n     * @private\n     */\n    WebGLHelper.prototype.enableAttributeArray_ = function (attribName, size, type, stride, offset) {\n        var location = this.getAttributeLocation(attribName);\n        // the attribute has not been found in the shaders; do not enable it\n        if (location < 0) {\n            return;\n        }\n        this.getGL().enableVertexAttribArray(location);\n        this.getGL().vertexAttribPointer(location, size, type, false, stride, offset);\n    };\n    /**\n     * Will enable the following attributes to be read from the currently bound buffer,\n     * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n     * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n     * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n     * @api\n     */\n    WebGLHelper.prototype.enableAttributes = function (attributes) {\n        var stride = computeAttributesStride(attributes);\n        var offset = 0;\n        for (var i = 0; i < attributes.length; i++) {\n            var attr = attributes[i];\n            this.enableAttributeArray_(attr.name, attr.size, attr.type || FLOAT, stride, offset);\n            offset += attr.size * getByteSizeFromType(attr.type);\n        }\n    };\n    /**\n     * WebGL context was lost\n     * @private\n     */\n    WebGLHelper.prototype.handleWebGLContextLost = function () {\n        clear(this.bufferCache_);\n        this.currentProgram_ = null;\n    };\n    /**\n     * WebGL context was restored\n     * @private\n     */\n    WebGLHelper.prototype.handleWebGLContextRestored = function () { };\n    /**\n     * Will create or reuse a given webgl texture and apply the given size. If no image data\n     * specified, the texture will be empty, otherwise image data will be used and the `size`\n     * parameter will be ignored.\n     * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n     * @param {Array<number>} size Expected size of the texture\n     * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [opt_data] Image data/object to bind to the texture\n     * @param {WebGLTexture} [opt_texture] Existing texture to reuse\n     * @return {WebGLTexture} The generated texture\n     * @api\n     */\n    WebGLHelper.prototype.createTexture = function (size, opt_data, opt_texture) {\n        var gl = this.getGL();\n        var texture = opt_texture || gl.createTexture();\n        // set params & size\n        var level = 0;\n        var internalFormat = gl.RGBA;\n        var border = 0;\n        var format = gl.RGBA;\n        var type = gl.UNSIGNED_BYTE;\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        if (opt_data) {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, opt_data);\n        }\n        else {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, null);\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        return texture;\n    };\n    return WebGLHelper;\n}(Disposable));\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n * @api\n */\nexport function computeAttributesStride(attributes) {\n    var stride = 0;\n    for (var i = 0; i < attributes.length; i++) {\n        var attr = attributes[i];\n        stride += attr.size * getByteSizeFromType(attr.type);\n    }\n    return stride;\n}\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\nfunction getByteSizeFromType(type) {\n    switch (type) {\n        case AttributeType.UNSIGNED_BYTE:\n            return Uint8Array.BYTES_PER_ELEMENT;\n        case AttributeType.UNSIGNED_SHORT:\n            return Uint16Array.BYTES_PER_ELEMENT;\n        case AttributeType.UNSIGNED_INT:\n            return Uint32Array.BYTES_PER_ELEMENT;\n        case AttributeType.FLOAT:\n        default:\n            return Float32Array.BYTES_PER_ELEMENT;\n    }\n}\nexport default WebGLHelper;\n//# sourceMappingURL=Helper.js.map","/**\n * @module ol/webgl/PostProcessingPass\n */\nimport { getUid } from '../util.js';\nvar DEFAULT_VERTEX_SHADER = \"\\n  precision mediump float;\\n  \\n  attribute vec2 a_position;\\n  varying vec2 v_texCoord;\\n  varying vec2 v_screenCoord;\\n  \\n  uniform vec2 u_screenSize;\\n   \\n  void main() {\\n    v_texCoord = a_position * 0.5 + 0.5;\\n    v_screenCoord = v_texCoord * u_screenSize;\\n    gl_Position = vec4(a_position, 0.0, 1.0);\\n  }\\n\";\nvar DEFAULT_FRAGMENT_SHADER = \"\\n  precision mediump float;\\n   \\n  uniform sampler2D u_image;\\n  uniform float u_opacity;\\n   \\n  varying vec2 v_texCoord;\\n   \\n  void main() {\\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\\n  }\\n\";\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n *\n * @api\n */\nvar WebGLPostProcessingPass = /** @class */ (function () {\n    /**\n     * @param {Options} options Options.\n     */\n    function WebGLPostProcessingPass(options) {\n        this.gl_ = options.webGlContext;\n        var gl = this.gl_;\n        this.scaleRatio_ = options.scaleRatio || 1;\n        this.renderTargetTexture_ = gl.createTexture();\n        this.renderTargetTextureSize_ = null;\n        this.frameBuffer_ = gl.createFramebuffer();\n        // compile the program for the frame buffer\n        // TODO: make compilation errors show up\n        var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n        gl.compileShader(vertexShader);\n        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n        gl.compileShader(fragmentShader);\n        this.renderTargetProgram_ = gl.createProgram();\n        gl.attachShader(this.renderTargetProgram_, vertexShader);\n        gl.attachShader(this.renderTargetProgram_, fragmentShader);\n        gl.linkProgram(this.renderTargetProgram_);\n        // bind the vertices buffer for the frame buffer\n        this.renderTargetVerticesBuffer_ = gl.createBuffer();\n        var verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n        this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n        this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n        this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_opacity');\n        this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n        /**\n         * Holds info about custom uniforms used in the post processing pass\n         * @type {Array<UniformInternalDescription>}\n         * @private\n         */\n        this.uniforms_ = [];\n        options.uniforms &&\n            Object.keys(options.uniforms).forEach(function (name) {\n                this.uniforms_.push({\n                    value: options.uniforms[name],\n                    location: gl.getUniformLocation(this.renderTargetProgram_, name),\n                });\n            }.bind(this));\n    }\n    /**\n     * Get the WebGL rendering context\n     * @return {WebGLRenderingContext} The rendering context.\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.getGL = function () {\n        return this.gl_;\n    };\n    /**\n     * Initialize the render target texture of the post process, make sure it is at the\n     * right size and bind it as a render target for the next draw calls.\n     * The last step to be initialized will be the one where the primitives are rendered.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.init = function (frameState) {\n        var gl = this.getGL();\n        var textureSize = [\n            gl.drawingBufferWidth * this.scaleRatio_,\n            gl.drawingBufferHeight * this.scaleRatio_,\n        ];\n        // rendering goes to my buffer\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n        gl.viewport(0, 0, textureSize[0], textureSize[1]);\n        // if size has changed: adjust canvas & render target texture\n        if (!this.renderTargetTextureSize_ ||\n            this.renderTargetTextureSize_[0] !== textureSize[0] ||\n            this.renderTargetTextureSize_[1] !== textureSize[1]) {\n            this.renderTargetTextureSize_ = textureSize;\n            // create a new texture\n            var level = 0;\n            var internalFormat = gl.RGBA;\n            var border = 0;\n            var format = gl.RGBA;\n            var type = gl.UNSIGNED_BYTE;\n            var data = null;\n            gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            // bind the texture to the framebuffer\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n        }\n    };\n    /**\n     * Render to the next postprocessing pass (or to the canvas if final pass).\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n     * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n     * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [preCompose] Called before composing.\n     * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [postCompose] Called before composing.\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.apply = function (frameState, nextPass, preCompose, postCompose) {\n        var gl = this.getGL();\n        var size = frameState.size;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n        gl.activeTexture(gl.TEXTURE0);\n        gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n        if (!nextPass) {\n            // clear the canvas if we are the first to render to it\n            // and preserveDrawingBuffer is true\n            var canvasId = getUid(gl.canvas);\n            if (!frameState.renderTargets[canvasId]) {\n                var attributes = gl.getContextAttributes();\n                if (attributes && attributes.preserveDrawingBuffer) {\n                    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n                    gl.clear(gl.COLOR_BUFFER_BIT);\n                }\n                frameState.renderTargets[canvasId] = true;\n            }\n        }\n        gl.enable(gl.BLEND);\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n        gl.useProgram(this.renderTargetProgram_);\n        gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n        gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n        gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n        gl.uniform1i(this.renderTargetTextureLocation_, 0);\n        var opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n        gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n        this.applyUniforms(frameState);\n        if (preCompose) {\n            preCompose(gl, frameState);\n        }\n        gl.drawArrays(gl.TRIANGLES, 0, 6);\n        if (postCompose) {\n            postCompose(gl, frameState);\n        }\n    };\n    /**\n     * @return {WebGLFramebuffer} Frame buffer\n     * @api\n     */\n    WebGLPostProcessingPass.prototype.getFrameBuffer = function () {\n        return this.frameBuffer_;\n    };\n    /**\n     * Sets the custom uniforms based on what was given in the constructor.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    WebGLPostProcessingPass.prototype.applyUniforms = function (frameState) {\n        var gl = this.getGL();\n        var value;\n        var textureSlot = 1;\n        this.uniforms_.forEach(function (uniform) {\n            value =\n                typeof uniform.value === 'function'\n                    ? uniform.value(frameState)\n                    : uniform.value;\n            // apply value based on type\n            if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n                // create a texture & put data\n                if (!uniform.texture) {\n                    uniform.texture = gl.createTexture();\n                }\n                gl.activeTexture(gl[\"TEXTURE\".concat(textureSlot)]);\n                gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                if (value instanceof ImageData) {\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n                }\n                else {\n                    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n                }\n                // fill texture slots\n                gl.uniform1i(uniform.location, textureSlot++);\n            }\n            else if (Array.isArray(value)) {\n                switch (value.length) {\n                    case 2:\n                        gl.uniform2f(uniform.location, value[0], value[1]);\n                        return;\n                    case 3:\n                        gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n                        return;\n                    case 4:\n                        gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n                        return;\n                    default:\n                        return;\n                }\n            }\n            else if (typeof value === 'number') {\n                gl.uniform1f(uniform.location, value);\n            }\n        });\n    };\n    return WebGLPostProcessingPass;\n}());\nexport default WebGLPostProcessingPass;\n//# sourceMappingURL=PostProcessingPass.js.map","/**\n * @module ol/webgl/Buffer\n */\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER, STATIC_DRAW, STREAM_DRAW, } from '../webgl.js';\nimport { assert } from '../asserts.js';\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\nexport var BufferUsage = {\n    STATIC_DRAW: STATIC_DRAW,\n    STREAM_DRAW: STREAM_DRAW,\n    DYNAMIC_DRAW: DYNAMIC_DRAW,\n};\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n * @api\n */\nvar WebGLArrayBuffer = /** @class */ (function () {\n    /**\n     * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n     * @param {number} [opt_usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n     * Default is `DYNAMIC_DRAW`.\n     */\n    function WebGLArrayBuffer(type, opt_usage) {\n        /**\n         * @private\n         * @type {Float32Array|Uint32Array}\n         */\n        this.array = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.type = type;\n        assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);\n        /**\n         * @private\n         * @type {number}\n         */\n        this.usage = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;\n    }\n    /**\n     * Populates the buffer with an array of the given size (all values will be zeroes).\n     * @param {number} size Array size\n     */\n    WebGLArrayBuffer.prototype.ofSize = function (size) {\n        this.array = new (getArrayClassForType(this.type))(size);\n    };\n    /**\n     * Populates the buffer with an array of the given size (all values will be zeroes).\n     * @param {Array<number>} array Numerical array\n     */\n    WebGLArrayBuffer.prototype.fromArray = function (array) {\n        var arrayClass = getArrayClassForType(this.type);\n        this.array = arrayClass.from\n            ? arrayClass.from(array)\n            : new arrayClass(array);\n    };\n    /**\n     * Populates the buffer with a raw binary array buffer.\n     * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n     * initialized for the same typed array class.\n     */\n    WebGLArrayBuffer.prototype.fromArrayBuffer = function (buffer) {\n        this.array = new (getArrayClassForType(this.type))(buffer);\n    };\n    /**\n     * @return {number} Buffer type.\n     */\n    WebGLArrayBuffer.prototype.getType = function () {\n        return this.type;\n    };\n    /**\n     * Will return null if the buffer was not initialized\n     * @return {Float32Array|Uint32Array} Array.\n     */\n    WebGLArrayBuffer.prototype.getArray = function () {\n        return this.array;\n    };\n    /**\n     * @return {number} Usage.\n     */\n    WebGLArrayBuffer.prototype.getUsage = function () {\n        return this.usage;\n    };\n    /**\n     * Will return 0 if the buffer is not initialized\n     * @return {number} Array size\n     */\n    WebGLArrayBuffer.prototype.getSize = function () {\n        return this.array ? this.array.length : 0;\n    };\n    return WebGLArrayBuffer;\n}());\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\nexport function getArrayClassForType(type) {\n    switch (type) {\n        case ARRAY_BUFFER:\n            return Float32Array;\n        case ELEMENT_ARRAY_BUFFER:\n            return Uint32Array;\n        default:\n            return Float32Array;\n    }\n}\nexport default WebGLArrayBuffer;\n//# sourceMappingURL=Buffer.js.map","/**\n * @module ol/vec/mat4\n */\n/**\n * @return {Array<number>} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n/**\n * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Array<number>} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\nexport function fromTransform(mat4, transform) {\n    mat4[0] = transform[0];\n    mat4[1] = transform[1];\n    mat4[4] = transform[2];\n    mat4[5] = transform[3];\n    mat4[12] = transform[4];\n    mat4[13] = transform[5];\n    return mat4;\n}\n//# sourceMappingURL=mat4.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = [\n    'fullscreenchange',\n    'webkitfullscreenchange',\n    'MSFullscreenChange',\n];\n/**\n * @enum {string}\n */\nvar FullScreenEventType = {\n    /**\n     * Triggered after the map entered fullscreen.\n     * @event FullScreenEventType#enterfullscreen\n     * @api\n     */\n    ENTERFULLSCREEN: 'enterfullscreen',\n    /**\n     * Triggered after the map leave fullscreen.\n     * @event FullScreenEventType#leavefullscreen\n     * @api\n     */\n    LEAVEFULLSCREEN: 'leavefullscreen',\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nvar FullScreen = /** @class */ (function (_super) {\n    __extends(FullScreen, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function FullScreen(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            target: options.target,\n        }) || this;\n        /***\n         * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {FullScreenOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.keys_ = options.keys !== undefined ? options.keys : false;\n        /**\n         * @private\n         * @type {HTMLElement|string|undefined}\n         */\n        _this.source_ = options.source;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.isInFullscreen_ = false;\n        /**\n         * @private\n         */\n        _this.boundHandleMapTargetChange_ = _this.handleMapTargetChange_.bind(_this);\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.cssClassName_ =\n            options.className !== undefined ? options.className : 'ol-full-screen';\n        /**\n         * @private\n         * @type {Array<import(\"../events.js\").EventsKey>}\n         */\n        _this.documentListeners_ = [];\n        /**\n         * @private\n         * @type {Array<string>}\n         */\n        _this.activeClassName_ =\n            options.activeClassName !== undefined\n                ? options.activeClassName.split(' ')\n                : [_this.cssClassName_ + '-true'];\n        /**\n         * @private\n         * @type {Array<string>}\n         */\n        _this.inactiveClassName_ =\n            options.inactiveClassName !== undefined\n                ? options.inactiveClassName.split(' ')\n                : [_this.cssClassName_ + '-false'];\n        var label = options.label !== undefined ? options.label : '\\u2922';\n        /**\n         * @private\n         * @type {Text|HTMLElement}\n         */\n        _this.labelNode_ =\n            typeof label === 'string' ? document.createTextNode(label) : label;\n        var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n        /**\n         * @private\n         * @type {Text|HTMLElement}\n         */\n        _this.labelActiveNode_ =\n            typeof labelActive === 'string'\n                ? document.createTextNode(labelActive)\n                : labelActive;\n        var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.button_ = document.createElement('button');\n        _this.button_.title = tipLabel;\n        _this.button_.setAttribute('type', 'button');\n        _this.button_.appendChild(_this.labelNode_);\n        _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        _this.setClassName_(_this.button_, _this.isInFullscreen_);\n        _this.element.className = \"\".concat(_this.cssClassName_, \" \").concat(CLASS_UNSELECTABLE, \" \").concat(CLASS_CONTROL);\n        _this.element.appendChild(_this.button_);\n        return _this;\n    }\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    FullScreen.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleFullScreen_();\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleFullScreen_ = function () {\n        var map = this.getMap();\n        if (!map) {\n            return;\n        }\n        var doc = map.getOwnerDocument();\n        if (!isFullScreenSupported(doc)) {\n            return;\n        }\n        if (isFullScreen(doc)) {\n            exitFullScreen(doc);\n        }\n        else {\n            var element = void 0;\n            if (this.source_) {\n                element =\n                    typeof this.source_ === 'string'\n                        ? doc.getElementById(this.source_)\n                        : this.source_;\n            }\n            else {\n                element = map.getTargetElement();\n            }\n            if (this.keys_) {\n                requestFullScreenWithKeys(element);\n            }\n            else {\n                requestFullScreen(element);\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleFullScreenChange_ = function () {\n        var map = this.getMap();\n        if (!map) {\n            return;\n        }\n        var wasInFullscreen = this.isInFullscreen_;\n        this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n        if (wasInFullscreen !== this.isInFullscreen_) {\n            this.setClassName_(this.button_, this.isInFullscreen_);\n            if (this.isInFullscreen_) {\n                replaceNode(this.labelActiveNode_, this.labelNode_);\n                this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n            }\n            else {\n                replaceNode(this.labelNode_, this.labelActiveNode_);\n                this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n            }\n            map.updateSize();\n        }\n    };\n    /**\n     * @param {HTMLElement} element Target element\n     * @param {boolean} fullscreen True if fullscreen class name should be active\n     * @private\n     */\n    FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n        var _a, _b, _c, _d;\n        if (fullscreen) {\n            (_a = element.classList).remove.apply(_a, this.inactiveClassName_);\n            (_b = element.classList).add.apply(_b, this.activeClassName_);\n        }\n        else {\n            (_c = element.classList).remove.apply(_c, this.activeClassName_);\n            (_d = element.classList).add.apply(_d, this.inactiveClassName_);\n        }\n    };\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Pass `null` to just remove the control from the current map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default|null} map Map.\n     * @api\n     */\n    FullScreen.prototype.setMap = function (map) {\n        var oldMap = this.getMap();\n        if (oldMap) {\n            oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n        }\n        _super.prototype.setMap.call(this, map);\n        this.handleMapTargetChange_();\n        if (map) {\n            map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n        }\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleMapTargetChange_ = function () {\n        var listeners = this.documentListeners_;\n        for (var i = 0, ii = listeners.length; i < ii; ++i) {\n            unlistenByKey(listeners[i]);\n        }\n        listeners.length = 0;\n        var map = this.getMap();\n        if (map) {\n            var doc = map.getOwnerDocument();\n            if (isFullScreenSupported(doc)) {\n                this.element.classList.remove(CLASS_UNSUPPORTED);\n            }\n            else {\n                this.element.classList.add(CLASS_UNSUPPORTED);\n            }\n            for (var i = 0, ii = events.length; i < ii; ++i) {\n                listeners.push(listen(doc, events[i], this.handleFullScreenChange_, this));\n            }\n            this.handleFullScreenChange_();\n        }\n    };\n    return FullScreen;\n}(Control));\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n    var body = doc.body;\n    return !!(body['webkitRequestFullscreen'] ||\n        (body['msRequestFullscreen'] && doc['msFullscreenEnabled']) ||\n        (body.requestFullscreen && doc.fullscreenEnabled));\n}\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n    return !!(doc['webkitIsFullScreen'] ||\n        doc['msFullscreenElement'] ||\n        doc.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    }\n    else if (element['msRequestFullscreen']) {\n        element['msRequestFullscreen']();\n    }\n    else if (element['webkitRequestFullscreen']) {\n        element['webkitRequestFullscreen']();\n    }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n    if (element['webkitRequestFullscreen']) {\n        element['webkitRequestFullscreen']();\n    }\n    else {\n        requestFullScreen(element);\n    }\n}\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n    if (doc.exitFullscreen) {\n        doc.exitFullscreen();\n    }\n    else if (doc['msExitFullscreen']) {\n        doc['msExitFullscreen']();\n    }\n    else if (doc['webkitExitFullscreen']) {\n        doc['webkitExitFullscreen']();\n    }\n}\nexport default FullScreen;\n//# sourceMappingURL=FullScreen.js.map"],"sourceRoot":""}